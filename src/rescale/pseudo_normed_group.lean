import pseudo_normed_group.category
import rescale.basic

noncomputable theory

open_locale nnreal

namespace rescale

open pseudo_normed_group

variables (r r' : ‚Ñù‚â•0) (M : Type*)

section pseudo_normed_group

variables [pseudo_normed_group M]

instance : pseudo_normed_group (rescale r M) :=
{ filtration := Œª c, show set M, from filtration M (c * r‚Åª¬π),
  filtration_mono := Œª c‚ÇÅ c‚ÇÇ h, filtration_mono (mul_le_mul' h le_rfl),
  zero_mem_filtration := Œª c, @zero_mem_filtration M _ _,
  neg_mem_filtration := Œª c, @neg_mem_filtration M _ _,
  add_mem_filtration := Œª c‚ÇÅ c‚ÇÇ, by { simp only [add_mul], apply add_mem_filtration } }

lemma mem_filtration (x : rescale r M) (c : ‚Ñù‚â•0) :
  x ‚àà filtration (rescale r M) c ‚Üî (of.symm x) ‚àà filtration M (c * r‚Åª¬π) :=
iff.rfl

end pseudo_normed_group


--Should we change name to this section? But one for the comphaus_fil.. and one for the
--profinitely_filt.. seems a lot
section profinitely_filtered_pseudo_normed_group

open comphaus_filtered_pseudo_normed_group profinitely_filtered_pseudo_normed_group

instance [comphaus_filtered_pseudo_normed_group M] :
  comphaus_filtered_pseudo_normed_group (rescale r M) :=
{ topology := by { delta rescale, apply_instance },
  t2 := by { delta rescale, apply_instance },
  compact := by { delta rescale, apply_instance },
  continuous_add' :=
  begin
    intros c‚ÇÅ c‚ÇÇ,
    haveI : fact ((c‚ÇÅ + c‚ÇÇ) * r‚Åª¬π ‚â§ c‚ÇÅ * r‚Åª¬π + c‚ÇÇ * r‚Åª¬π) := ‚ü®(add_mul _ _ _).le‚ü©,
    rw (embedding_cast_le ((c‚ÇÅ + c‚ÇÇ) * r‚Åª¬π) (c‚ÇÅ * r‚Åª¬π + c‚ÇÇ * r‚Åª¬π)).continuous_iff,
    exact (continuous_add' (c‚ÇÅ * r‚Åª¬π) (c‚ÇÇ * r‚Åª¬π)),
  end,
  continuous_neg' := Œª c, continuous_neg' _,
  continuous_cast_le := Œª c‚ÇÅ c‚ÇÇ h, by exactI continuous_cast_le _ _,}

instance [profinitely_filtered_pseudo_normed_group M] :
  profinitely_filtered_pseudo_normed_group (rescale r M) := {}

@[simps]
def map_comphaus_filtered_pseudo_normed_group_hom {M‚ÇÅ M‚ÇÇ : Type*}
  [profinitely_filtered_pseudo_normed_group M‚ÇÅ] [profinitely_filtered_pseudo_normed_group M‚ÇÇ]
  (N : ‚Ñù‚â•0) (f : comphaus_filtered_pseudo_normed_group_hom M‚ÇÅ M‚ÇÇ) :
  comphaus_filtered_pseudo_normed_group_hom (rescale N M‚ÇÅ) (rescale N M‚ÇÇ) :=
{ to_fun := rescale.of ‚àò f ‚àò rescale.of.symm,
  map_zero' := f.map_zero,
  map_add' := Œª x y, f.map_add x y,
  bound' := begin
    obtain ‚ü®C, hC‚ü© := f.bound,
    refine ‚ü®C, Œª c x hx, _‚ü©,
    rw rescale.mem_filtration at hx ‚ä¢,
    simp only [function.comp_app, equiv.symm_apply_apply, mul_assoc],
    exact hC hx,
  end,
  continuous' := Œª c‚ÇÅ c‚ÇÇ f‚ÇÄ hf‚ÇÄ, f.continuous f‚ÇÄ hf‚ÇÄ, }

end profinitely_filtered_pseudo_normed_group

section profinitely_filtered_pseudo_normed_group_with_Tinv

open profinitely_filtered_pseudo_normed_group_with_Tinv
open profinitely_filtered_pseudo_normed_group

variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M]

include r'

@[simps]
def Tinv' : rescale r M ‚Üí+ rescale r M :=
{ to_fun := Œª x, of $ Tinv $ of.symm x,
  map_zero' := by { delta rescale, exact Tinv.map_zero },
  map_add' := by { delta rescale, exact Tinv.map_add } }

lemma Tinv'_mem_filtration (c : ‚Ñù‚â•0) (x : rescale r M) (hx : x ‚àà filtration (rescale r M) c) :
  (Tinv' r r' M) x ‚àà filtration (rescale r M) (r'‚Åª¬π * c) :=
by simpa only [mem_filtration, Tinv'_apply, equiv.symm_apply_apply, mul_assoc]
  using Tinv_mem_filtration _ _ hx

variable [fact (0 < r')]

@[simps]
def Tinv : comphaus_filtered_pseudo_normed_group_hom (rescale r M) (rescale r M) :=
comphaus_filtered_pseudo_normed_group_hom.mk' (Tinv' r r' M)
begin
  refine ‚ü®r'‚Åª¬π, Œª c, ‚ü®Tinv'_mem_filtration r r' M c, _‚ü©‚ü©,
  haveI :  fact (c * r‚Åª¬π ‚â§ r' * (r'‚Åª¬π * c * r‚Åª¬π)) :=
    ‚ü®by rw [mul_assoc, mul_inv_cancel_left‚ÇÄ ‚Äπfact (0 < r')‚Ä∫.1.ne.symm]‚ü©,
  apply Tinv‚ÇÄ_continuous,
end

instance : profinitely_filtered_pseudo_normed_group_with_Tinv r' (rescale r M) :=
{ Tinv := rescale.Tinv r r' M,
  Tinv_mem_filtration := Tinv'_mem_filtration r r' M,
  .. rescale.profinitely_filtered_pseudo_normed_group r M }

@[simps]
def map_comphaus_filtered_pseudo_normed_group_with_Tinv_hom {M‚ÇÅ M‚ÇÇ : Type*}
  [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÅ]
  [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÇ]
  (N : ‚Ñù‚â•0) (f : comphaus_filtered_pseudo_normed_group_with_Tinv_hom r' M‚ÇÅ M‚ÇÇ) :
  comphaus_filtered_pseudo_normed_group_with_Tinv_hom r' (rescale N M‚ÇÅ) (rescale N M‚ÇÇ) :=
{ to_fun := rescale.of ‚àò f ‚àò rescale.of.symm,
  strict' := Œª c x hx, begin
    rw rescale.mem_filtration at hx ‚ä¢,
    simp only [function.comp_app, equiv.symm_apply_apply, mul_assoc],
    exact f.strict hx,
  end,
  map_Tinv' := f.map_Tinv,
  continuous' := Œª c, f.continuous' (c * N‚Åª¬π),
  .. map_comphaus_filtered_pseudo_normed_group_hom N
      f.to_comphaus_filtered_pseudo_normed_group_hom }

end profinitely_filtered_pseudo_normed_group_with_Tinv

end rescale

namespace ProFiltPseuNormGrpWithTinv

variables (r' : ‚Ñù‚â•0) [fact (0 < r')]

@[simps]
def rescale (N : ‚Ñù‚â•0) : ProFiltPseuNormGrpWithTinv r' ‚•§ ProFiltPseuNormGrpWithTinv r' :=
{ obj := Œª M, of r' $ rescale N M,
  map := Œª M‚ÇÅ M‚ÇÇ f, rescale.map_comphaus_filtered_pseudo_normed_group_with_Tinv_hom _ _ f }

end ProFiltPseuNormGrpWithTinv

namespace ProFiltPseuNormGrpWithTinv‚ÇÅ

variables (r' : ‚Ñù‚â•0) [fact (0 < r')]

@[simps]
def rescale (N : ‚Ñù‚â•0) [fact (0 < N)] :
  ProFiltPseuNormGrpWithTinv‚ÇÅ r' ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ r' :=
{ obj := Œª M,
  { M := rescale N M,
    exhaustive' := Œª x,
    begin
      obtain ‚ü®c, hc‚ü© := M.exhaustive r' (rescale.of.symm x),
      refine ‚ü®c * N, _‚ü©,
      rw rescale.mem_filtration,
      rwa mul_inv_cancel_right‚ÇÄ,
      exact (fact.out _ : 0 < N).ne'
    end },
  map := Œª M‚ÇÅ M‚ÇÇ f, rescale.map_comphaus_filtered_pseudo_normed_group_with_Tinv_hom _ _ f, }
.

@[simps]
def rescale_out (N : ‚Ñù‚â•0) [fact (1 ‚â§ N)] :
  rescale r' N ‚ü∂ ùü≠ _ :=
{ app := Œª M,
  { to_fun := (rescale.of.symm : _root_.rescale N M ‚Üí M),
    map_zero' := rfl,
    map_add' := Œª x y, rfl,
    strict' := Œª c x hx, pseudo_normed_group.filtration_mono (fact.out _) hx,
    continuous' := Œª c, comphaus_filtered_pseudo_normed_group.continuous_cast_le (c * N‚Åª¬π) c,
    map_Tinv' := Œª x, rfl } }

end ProFiltPseuNormGrpWithTinv‚ÇÅ
