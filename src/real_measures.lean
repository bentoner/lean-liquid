import analysis.special_functions.pow
import analysis.specific_limits
import category_theory.Fintype
import analysis.normed_space.basic

import pseudo_normed_group.basic
import pseudo_normed_group.category

import for_mathlib.nnreal
import for_mathlib.real

universe u

noncomputable theory
open_locale big_operators nnreal classical

section definitions

@[nolint unused_arguments, derive add_comm_group]
def real_measures (p : ‚Ñù‚â•0) (S : Fintype) := S ‚Üí ‚Ñù

variables {p : ‚Ñù‚â•0} {S S' : Fintype.{u}}

notation `‚Ñ≥` := real_measures

namespace real_measures

-- Move me
lemma nonneg_of_norm_mul_fpow (k n : ‚Ñ§) (p : ‚Ñù‚â•0) : 0 ‚â§ ‚à• k ‚à• * (p : ‚Ñù)^n :=
mul_nonneg (norm_nonneg _) (fpow_nonneg (nnreal.coe_nonneg _) _)

def map (f : S ‚ü∂ S') : ‚Ñ≥ p S ‚Üí ‚Ñ≥ p S' :=
Œª F s', ‚àë s in finset.univ.filter (Œª t, f t = s'), F s

@[simp]
lemma map_apply (f : S ‚ü∂ S') (F : ‚Ñ≥ p S) (s' : S') :
  map f F s' = ‚àë s in finset.univ.filter (Œª t, f t = s'), F s := rfl

@[simp]
lemma map_id : (map (ùüô S) : ‚Ñ≥ p S ‚Üí ‚Ñ≥ p S) = id :=
begin
  ext F s,
  rw [map_apply, finset.sum_filter, id.def],
  simp only [Fintype.id_apply, finset.sum_ite_eq', finset.mem_univ, if_true],
end

@[simp]
lemma map_comp {S'' : Fintype.{u}} (f : S ‚ü∂ S') (g : S' ‚ü∂ S'') :
  (map (f ‚â´ g) : ‚Ñ≥ p S ‚Üí ‚Ñ≥ p S'') = map g ‚àò map f :=
begin
  ext F s,
  simp only [function.comp_app, map_apply],
  convert finset.sum_bUnion _ using 1, swap 2, { classical, apply_instance },
  { apply finset.sum_congr,
    { change finset.univ.filter (Œª t, g (f t) = s) = _,
      ext i,
      simp only [true_and, exists_prop, finset.mem_univ, finset.mem_bUnion,
        exists_eq_right', finset.mem_filter] },
    { intros, refl } },
  { intros i hi j hj h k hk,
    refine h _,
    simp only [true_and, finset.inf_eq_inter, finset.mem_univ,
      finset.mem_filter, finset.mem_inter] at hk,
    rw [‚Üê hk.1, ‚Üê hk.2] }
end

@[simp] lemma zero_apply (s : S) : (0 : ‚Ñ≥ p S) s = 0 := rfl

@[simp] lemma add_apply (F G : ‚Ñ≥ p S) (s : S) : (F + G) s = F s + G s := rfl

@[simp] lemma neg_apply (F : ‚Ñ≥ p S) (s : S) : (-F) s = - (F s) := rfl

@[simp] lemma sub_apply (F G : ‚Ñ≥ p S) (s : S) : (F - G) s = F s - G s := rfl

instance : has_norm (‚Ñ≥ p S) := ‚ü®Œª F, ‚àë s, ‚à•F s‚à• ^ (p:‚Ñù)‚ü©

lemma norm_def (F : ‚Ñ≥ p S) : ‚à•F‚à• = ‚àë s, ‚à•F s‚à• ^ (p:‚Ñù) := rfl

instance : has_nnnorm (‚Ñ≥ p S) := ‚ü®Œª F, ‚àë s, ‚à•F s‚à•‚Çä ^ (p:‚Ñù)‚ü©

lemma nnnorm_def (F : ‚Ñ≥ p S) : ‚à•F‚à•‚Çä = ‚àë s, ‚à•F s‚à•‚Çä ^ (p:‚Ñù) := rfl

@[simp] protected lemma coe_nnnorm (F : ‚Ñ≥ p S) : (‚à•F‚à•‚Çä : ‚Ñù) = ‚à•F‚à• :=
by simp only [norm_def, nnnorm_def, nnreal.coe_sum, nnreal.coe_rpow, coe_nnnorm]

lemma map_bound [hp : fact (p ‚â§ 1)] (f : S ‚ü∂ S') (F : ‚Ñ≥ p S) :
  ‚à•map f F‚à•‚Çä ‚â§ ‚à•F‚à•‚Çä :=
begin
  calc ‚àë s', ‚à•‚àë s in finset.univ.filter (Œª t, f t = s'), F s‚à•‚Çä ^ (p:‚Ñù)
      ‚â§  ‚àë s' : S', ‚àë s in finset.univ.filter (Œª t, f t = s'), ‚à•F s‚à•‚Çä ^ (p:‚Ñù) : _
  ... = ‚àë s, ‚à•F s‚à•‚Çä ^ (p:‚Ñù) : _,
  { apply finset.sum_le_sum,
    rintros s' -, sorry, },
  { rw ‚Üê finset.sum_bUnion,
    { refine finset.sum_congr _ _,
      { ext s,
        simp only [true_and, finset.mem_univ, finset.mem_bUnion, iff_true,
          exists_true_left, finset.mem_filter],
        refine ‚ü®_, finset.mem_univ _, rfl‚ü©, },
      { intros, refl } },
    { rintro x - y - h i hi,
      apply h,
      simp only [true_and, finset.inf_eq_inter, finset.mem_univ,
        finset.mem_filter, finset.mem_inter] at hi,
      rw [‚Üê hi.1, ‚Üê hi.2] } },

end

@[simp] protected lemma nnnorm_zero [hp : fact (0 < p)] : ‚à•(0 : ‚Ñ≥ p S)‚à•‚Çä = 0 :=
begin
  rw [nnnorm_def, finset.sum_eq_zero],
  rintro s -,
  rw [zero_apply, nnnorm_zero, nnreal.zero_rpow],
  exact_mod_cast hp.out.ne',
end

protected lemma nnnorm_add (F G : ‚Ñ≥ p S) : ‚à•F + G‚à•‚Çä ‚â§ ‚à•F‚à•‚Çä + ‚à•G‚à•‚Çä :=
begin
  dsimp [nnnorm_def],
  rw ‚Üê finset.sum_add_distrib,
  apply finset.sum_le_sum,
  intros s hs,
  sorry
end

--needed?
instance png_real_measures [fact (0 < p)] : pseudo_normed_group (‚Ñ≥ p S) :=
{ filtration := Œª c, { F | ‚à•F‚à•‚Çä ‚â§ c },
  filtration_mono := Œª c‚ÇÅ c‚ÇÇ h F hF, by {dsimp at *, exact le_trans hF h},
  zero_mem_filtration := Œª c, by simp only [real_measures.nnnorm_zero, zero_le', set.mem_set_of_eq],
  neg_mem_filtration := Œª c F h, by { dsimp [nnnorm_def] at *, simp only [h, nnnorm_neg] },
  add_mem_filtration := Œª c‚ÇÅ c‚ÇÇ F‚ÇÅ F‚ÇÇ h‚ÇÅ h‚ÇÇ,
    (real_measures.nnnorm_add _ _).trans (add_le_add h‚ÇÅ h‚ÇÇ) }

/-

instance pfpng_real_measures [fact (0 < p)] :
  comphaus_filtered_pseudo_normed_group (‚Ñ≥ p S) :=
{ continuous_add' := begin
    intros c‚ÇÅ c‚ÇÇ,
    rw continuous_iff,
    intros A,
    let E : real_measures_bdd p S A c‚ÇÅ √ó real_measures_bdd p S A c‚ÇÇ ‚Üí
      real_measures_bdd p S A (c‚ÇÅ + c‚ÇÇ) := Œª G, ‚ü®G.1 + G.2, _‚ü©,
    swap, {
      rw nnreal.coe_add,
      refine le_trans _ (add_le_add G.fst.2 G.snd.2),
      rw ‚Üê finset.sum_add_distrib,
      apply finset.sum_le_sum,
      intros i hi,
      rw ‚Üê finset.sum_add_distrib,
      apply finset.sum_le_sum,
      intros j hj,
      rw ‚Üê add_mul,
      refine mul_le_mul (norm_add_le _ _) (le_refl _)
        (fpow_nonneg (nnreal.coe_nonneg _) _) (add_nonneg (norm_nonneg _) (norm_nonneg _)) },
    have :
      (truncate A : _ ‚Üí real_measures_bdd p S A (c‚ÇÅ + c‚ÇÇ)) ‚àò pseudo_normed_group.add' =
      E ‚àò (prod.map (truncate A) (truncate A)),
    { ext, refl },
    rw this,
    apply continuous.comp,
    { exact continuous_of_discrete_topology },
    { apply continuous.prod_map,
      all_goals {apply truncate_continuous} }
  end,
  continuous_neg' := begin
    intros c,
    rw continuous_iff,
    intros A,
    let E : real_measures_bdd p S A c ‚Üí real_measures_bdd p S A c :=
      Œª G, ‚ü®- G, _‚ü©,
    swap, {
      convert G.2 using 1,
      apply finset.sum_congr rfl,
      intros s hs,
      apply finset.sum_congr rfl,
      intros x hx,
      congr' 1,
      simpa },
    have : (truncate A : _ ‚Üí real_measures_bdd p S A c) ‚àò pseudo_normed_group.neg' =
      E ‚àò truncate A,
    { ext, refl },
    rw this,
    apply continuous.comp,
    { exact continuous_of_discrete_topology },
    { apply truncate_continuous }
  end,
  continuous_cast_le := begin
    introsI c‚ÇÅ c‚ÇÇ h,
    rw continuous_iff,
    intros A,
    let g : real_measures_bdd p S A c‚ÇÅ ‚Üí real_measures_bdd p S A c‚ÇÇ :=
      Œª g, ‚ü®g, le_trans g.2 h.out‚ü©,
    have : (truncate A : _ ‚Üí real_measures_bdd p S A c‚ÇÇ) ‚àò pseudo_normed_group.cast_le =
      g ‚àò truncate A,
    { ext, refl },
    rw this,
    apply continuous.comp,
    { exact continuous_of_discrete_topology },
    { apply truncate_continuous }
  end,
  ..(infer_instance : (pseudo_normed_group (‚Ñ≥ p S))) }

variable {Œ± : Type*}

open pseudo_normed_group profinitely_filtered_pseudo_normed_group
  comphaus_filtered_pseudo_normed_group

def map_hom [fact (0 < p)] (f : S ‚ü∂ S') :
  comphaus_filtered_pseudo_normed_group_hom (‚Ñ≥ p S) (‚Ñ≥ p S') :=
{ to_fun := map f,
  map_zero' := begin
    ext F s i,
    simp,
  end,
  map_add' := begin
    intros F G,
    ext s i,
    simp [‚Üê finset.sum_bUnion, ‚Üê finset.sum_add_distrib],
  end,
  bound' := begin
    -- should we introduce strict morphisms, and the strict category, so we can have limits?
    use 1,
    rintros c F (hF : ‚à• F ‚à• ‚â§ c),
    exact le_trans (map_bound _ _) (by simpa),
  end,
  continuous' := begin
    intros c‚ÇÅ c‚ÇÇ f‚ÇÄ h,
    haveI h‚ÇÇ : fact (c‚ÇÇ ‚â§ c‚ÇÅ ‚äî c‚ÇÇ) := ‚ü®le_sup_right‚ü©,
    let e : filtration (‚Ñ≥ p S') c‚ÇÇ ‚Üí filtration (‚Ñ≥ p S') (c‚ÇÅ ‚äî c‚ÇÇ) :=
      cast_le,
    suffices : continuous (e ‚àò f‚ÇÄ),
    { rwa (embedding_cast_le _ _).to_inducing.continuous_iff },
    rw continuous_iff,
    intros T,
    let e' : real_measures_bdd p S T c‚ÇÅ ‚Üí real_measures_bdd p S T (c‚ÇÅ ‚äî c‚ÇÇ) :=
      Œª F, ‚ü®F, le_trans F.bound $ by exact_mod_cast le_sup_left‚ü©,
    have : truncate T ‚àò e ‚àò f‚ÇÄ = real_measures_bdd.map f ‚àò e' ‚àò truncate T,
    { ext F s' t,
      change (f‚ÇÄ F : ‚Ñ≥ p S') s' t = _,
      rw ‚Üê h,
      refl },
    rw this,
    continuity,
  end }

@[simps]
def functor (p : ‚Ñù‚â•0) [fact (0 < p)] : Fintype.{u} ‚•§ CompHausFiltPseuNormGrp.{u} :=
{ obj := Œª S, CompHausFiltPseuNormGrp.of $ ‚Ñ≥ p S,
  map := Œª S T f, map_hom f,
  map_id' := begin
    intros S,
    ext1,
    dsimp [map_hom],
    simp,
  end,
  map_comp' := begin
    intros S S' S'' f g,
    ext1,
    dsimp [map_hom],
    simp,
  end}

-/

end real_measures

end definitions
