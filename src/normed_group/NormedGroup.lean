import algebra.punit_instances
import category_theory.concrete_category.bundled_hom
import category_theory.limits.shapes.zero
import category_theory.limits.shapes.kernels
import category_theory.limits.creates

import for_mathlib.normed_group_hom
import for_mathlib.normed_group_quotient

/-!
# The category of normed abelian groups and continuous group homomorphisms

-/

universes u v

-- move this
section for_mathlib

instance punit.uniform_space : uniform_space punit := ‚ä•

noncomputable
instance punit.metric_space : metric_space punit :=
{ dist := Œª _ _, 0,
  dist_self := Œª _, rfl,
  dist_comm := Œª _ _, rfl,
  eq_of_dist_eq_zero := Œª _ _ _, subsingleton.elim _ _,
  dist_triangle := Œª _ _ _, show (0:‚Ñù) ‚â§ 0 + 0, by rw add_zero,
  .. punit.uniform_space }

noncomputable
instance punit.normed_group : normed_group punit :=
{ norm := function.const _ 0,
  dist_eq := Œª _ _, rfl,
  .. punit.add_comm_group, .. punit.metric_space }

end for_mathlib

open category_theory

/-- The category of normed abelian groups and bounded group homomorphisms. -/
def NormedGroup : Type (u+1) := bundled normed_group

namespace NormedGroup

instance bundled_hom : bundled_hom @normed_group_hom :=
‚ü®@normed_group_hom.to_fun, @normed_group_hom.id, @normed_group_hom.comp, @normed_group_hom.coe_inj‚ü©

attribute [derive [has_coe_to_sort, large_category, concrete_category]] NormedGroup

/-- Construct a bundled `NormedGroup` from the underlying type and typeclass. -/
def of (M : Type u) [normed_group M] : NormedGroup := bundled.of M

noncomputable
instance : has_zero NormedGroup := ‚ü®of punit‚ü©

noncomputable
instance : inhabited NormedGroup := ‚ü®0‚ü©

instance (M : NormedGroup) : normed_group M := M.str

@[simp] lemma coe_of (V : Type u) [normed_group V] : (NormedGroup.of V : Type u) = V := rfl

@[simp] lemma coe_id (V : NormedGroup) : ‚áë(ùüô V) = id := rfl

instance : limits.has_zero_morphisms.{u (u+1)} NormedGroup :=
{ comp_zero' := by { intros, apply normed_group_hom.zero_comp },
  zero_comp' := by { intros, apply normed_group_hom.comp_zero } }

section equalizers_and_kernels

open category_theory.limits

/-- The equalizer cone for a parallel pair of morphisms of normed groups. -/
def parallel_pair_cone {V W : NormedGroup.{u}} (f g : V ‚ü∂ W) :
  cone (parallel_pair f g) :=
@fork.of_Œπ _ _ _ _ _ _ (of (f - g).ker) (normed_group_hom.ker.incl (f - g)) $
begin
  ext v,
  have : v.1 ‚àà (f - g).ker := v.2,
  simpa only [normed_group_hom.ker.incl_to_fun, pi.zero_apply, coe_comp, normed_group_hom.coe_zero,
    subtype.val_eq_coe, normed_group_hom.mem_ker,
    normed_group_hom.coe_sub, pi.sub_apply, sub_eq_zero] using this
end

instance has_limit_parallel_pair {V W : NormedGroup.{u}} (f g : V ‚ü∂ W) :
  has_limit (parallel_pair f g) :=
{ exists_limit := nonempty.intro
  { cone := parallel_pair_cone f g,
    is_limit := fork.is_limit.mk _
      (Œª c, normed_group_hom.ker.lift (fork.Œπ c) _ $
      show normed_group_hom.comp_hom (f - g) c.Œπ = 0,
      by { rw [add_monoid_hom.map_sub, add_monoid_hom.sub_apply, sub_eq_zero], exact c.condition })
      (Œª c, normed_group_hom.ker.incl_comp_lift _ _ _)
      (Œª c g h, by { ext x, dsimp, rw ‚Üê h, refl }) } }

instance : limits.has_equalizers.{u (u+1)} NormedGroup :=
@has_equalizers_of_has_limit_parallel_pair NormedGroup _ $ Œª V W f g,
  NormedGroup.has_limit_parallel_pair f g

instance : limits.has_kernels.{u (u+1)} NormedGroup :=
by apply_instance

end equalizers_and_kernels

section cokernels

variables {A B C : NormedGroup.{u}}

@[simp]
noncomputable
def coker (f : A ‚ü∂ B) : NormedGroup := NormedGroup.of $
  quotient_add_group.quotient f.range.topological_closure

@[simp]
noncomputable
def coker.œÄ {f : A ‚ü∂ B} : B ‚ü∂ coker f :=
  normed_group_hom.normed_group.mk _

lemma coker.œÄ_surjective {f : A ‚ü∂ B} : function.surjective (coker.œÄ : B ‚ü∂ coker f).to_add_monoid_hom :=
  surjective_quot_mk _

open normed_group_hom

noncomputable
def lift {f : A ‚ü∂ B} {g : B ‚ü∂ C} (cond : f ‚â´ g = 0) : coker f ‚ü∂ C :=
{ bound' := begin
    -- Is this actually true!?
    rcases g.bound with ‚ü®c,hcpos,hc‚ü©,
    use c,
    intros v,
    rcases coker.œÄ_surjective v with ‚ü®v,rfl‚ü©,
    change ‚à• g v ‚à• ‚â§ c * Inf {r : ‚Ñù | ‚àÉ y : B, coker.œÄ _ = coker.œÄ _ ‚àß _ },
    have : (c : ‚Ñù) * Inf {r : ‚Ñù | ‚àÉ (y : B), (coker.œÄ y : coker f) = (coker.œÄ v : coker f) ‚àß r = ‚à•y‚à•} =
      Inf {r : ‚Ñù | ‚àÉ (y : B), (coker.œÄ y : coker f) = (coker.œÄ v : coker f) ‚àß r = c * ‚à• y ‚à• }, sorry,
    rw this,
    rw real.le_Inf,
    { rintros x ‚ü®b,hx,rfl‚ü©,
      have : g v = g b,
      {
        have : b - v ‚àà f.range.topological_closure, sorry, -- from hx
        have : (range f).topological_closure ‚â§ g.ker,
        {
          change (closure (f.range : set B)) ‚äÜ (ker g : set B),
          have : is_closed (g.ker : set B), sorry,
          -- there should now be a lemma saying that, given `is_closed Y`,
          -- closure X ‚äÜ Y ‚Üî X ‚äÜ Y
          -- Then conclude using `cond`.
          sorry,
        },
        suffices : g (b - v) = 0, sorry, -- This must be in mathlib somewhere...
        apply this,
        assumption,
      },
      rw this,
      apply hc },
    { refine ‚ü®c * ‚à• v ‚à•,v,rfl, rfl‚ü© },
    { use 0,
      intros y hy,
      rcases hy with ‚ü®y,hy,rfl‚ü©,
      apply mul_nonneg (le_of_lt _) (norm_nonneg _),
      simpa },
  end,
  ..(quotient_add_group.lift _ g.to_add_monoid_hom begin
    intros b hb,
    sorry,
  end ) }

end cokernels

end NormedGroup
#lint- only unused_arguments def_lemma doc_blame
