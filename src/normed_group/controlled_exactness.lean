import for_mathlib.uniform_space_cauchy
import for_mathlib.big_operators_basic
import for_mathlib.normed_group_hom_completion
import for_mathlib.specific_limit

noncomputable theory

open filter set function normed_group uniform_space normed_group_hom finset
open_locale topological_space big_operators

lemma controlled_exactness {M M‚ÇÅ M‚ÇÇ : Type*} [normed_group M] [normed_group M‚ÇÅ] [normed_group M‚ÇÇ]
  {f : normed_group_hom M‚ÇÅ M} {C : ‚Ñù} (hC : 0 < C) {D : ‚Ñù}
  {g : normed_group_hom M M‚ÇÇ}
  (h : ‚àÄ m ‚àà g.ker, ‚àÉ m' : M‚ÇÅ, f m' = m ‚àß ‚à•m'‚à• ‚â§ C*‚à•m‚à•)
  (h' : ‚àÄ x ‚àà g.range, ‚àÉ y, g y = x ‚àß ‚à•y‚à• ‚â§ D * ‚à•x‚à•) :
  ‚àÄ m ‚àà g.completion.ker, ‚àÄ Œµ > 0, ‚àÉ m' : completion M‚ÇÅ, f.completion m' = m ‚àß ‚à•m'‚à• ‚â§ (C + Œµ)*‚à•m‚à• :=
begin
  intros hatm hatm_in Œµ Œµ_pos,
  by_cases H : hatm = 0,
  { use 0,
    simp [H] },
  set hatf := f.completion,
  set i := incl g.ker,

  have norm_j_comp_i : ‚àÄ x, ‚à•j.comp i x‚à• = ‚à•x‚à•,
  { intro x,
    erw [norm_to_compl, norm_incl] },
  have : hatm ‚àà closure ((j.comp i).range : set $ completion M),
    by rwa ‚Üê normed_group_hom.ker_completion h',

  set b : ‚Ñï ‚Üí ‚Ñù := Œª i, (1/2)^i*(Œµ*‚à•hatm‚à•/2)/C,
  have b_pos : ‚àÄ i, 0 < b i,
  { intro i,
    field_simp [b, hC],
    exact div_pos (mul_pos Œµ_pos (norm_pos_iff.mpr H)) (mul_pos (by norm_num : (0 : ‚Ñù) < 2^i*2) hC) },
  obtain  ‚ü®m, lim_m : tendsto (Œª n, ‚àë k in range (n + 1), j.comp i (m k)) at_top (ùìù hatm),
        hm‚ÇÄ : ‚à•j.comp i (m 0) - hatm‚à• < b 0, hm : ‚àÄ n > 0, ‚à•(j.comp i) (m n)‚à• < b n‚ü© :=
    controlled_sum_of_mem_closure_range this b_pos,
  have : ‚àÄ n, ‚àÉ m' : M‚ÇÅ, f m' = m n ‚àß ‚à•m'‚à• ‚â§ C * ‚à•m n‚à•,
  { intros n, apply h, exact (m n).property },
  choose m' hfm' hnorm_m' using this,
  set s : ‚Ñï ‚Üí completion M‚ÇÅ := Œª n, ‚àë k in range (n+1), j (m' k),
  have : cauchy_seq s,
  { apply normed_group.cauchy_series_of_le_geometric'' (by norm_num) one_half_lt_one,
    rintro n (hn : n ‚â• 1),
    calc ‚à•j (m' n)‚à• = ‚à•m' n‚à• : norm_to_compl _
    ... ‚â§ C*‚à•m n‚à• : hnorm_m' n
    ... = C*‚à•j.comp i (m n)‚à• : by rw norm_j_comp_i
    ... ‚â§ C * b n : mul_le_mul_of_nonneg_left (hm _ $ nat.succ_le_iff.mp hn).le hC.le
    ... = (1/2)^n * (Œµ * ‚à•hatm‚à•/2) : by simp [b, mul_div_cancel' _ hC.ne.symm]
    ... = (Œµ * ‚à•hatm‚à•/2) * (1/2)^n : mul_comm _ _ },
  obtain ‚ü®hatm' : completion M‚ÇÅ, hhatm'‚ü© := cauchy_seq_tendsto_of_complete this,
  refine ‚ü®hatm', _, _‚ü©,
  { apply tendsto_nhds_unique _ lim_m,
    convert (hatf.continuous.tendsto hatm').comp hhatm',
    ext n,
    dsimp [s],
    rw [hatf.map_sum],
    congr,
    ext k,
    erw [f.completion_coe, hfm'],
    refl },
  { apply le_of_tendsto' (continuous_norm.continuous_at.tendsto.comp hhatm'),
    simp only [norm_j_comp_i] at hm,
    have hnorm‚ÇÄ : ‚à•j (m' 0)‚à• ‚â§ C*b 0 + C*‚à•hatm‚à•,
    { have := calc
      ‚à•m 0‚à• = ‚à•j.comp i (m 0)‚à• : by rw norm_j_comp_i
      ... ‚â§ ‚à•hatm‚à• + ‚à•j.comp i (m 0) - hatm‚à• : norm_le_insert' _ _
      ... ‚â§ ‚à•hatm‚à• + b 0 : by apply add_le_add_left hm‚ÇÄ.le,

      calc ‚à•j (m' 0)‚à•  = ‚à•m' 0‚à• : norm_to_compl _
      ... ‚â§ C*‚à•m 0‚à• : hnorm_m' 0
      ... ‚â§ C*(‚à•hatm‚à• + b 0) : mul_le_mul_of_nonneg_left this hC.le
      ... = C * b 0 + C * ‚à•hatm‚à• : by rw [add_comm, mul_add] },

    intros n,
    have : ‚àë k in range (n + 1), C * b k ‚â§ Œµ * ‚à•hatm‚à•,
    calc ‚àë k in range (n + 1), C * b k = (‚àë k in range (n + 1), (1 / 2) ^ k) * (Œµ * ‚à•hatm‚à• / 2) : by simp only [b, mul_div_cancel' _ hC.ne.symm, ‚Üê sum_mul]
     ... ‚â§  2 * (Œµ * ‚à•hatm‚à• / 2) : mul_le_mul_of_nonneg_right (sum_geometric_two_le _) (by nlinarith [Œµ_pos, norm_nonneg hatm])
     ... = Œµ * ‚à•hatm‚à• : mul_div_cancel' _ two_ne_zero,

    calc ‚à•s n‚à• ‚â§ ‚àë k in range (n+1), ‚à•j (m' k)‚à• : norm_sum_le _ _
    ... = ‚àë k in range n, ‚à•j (m' (k + 1))‚à• + ‚à•j (m' 0)‚à• : sum_range_succ' _ _
    ... = ‚àë k in range n, ‚à•m' (k + 1)‚à• + ‚à•j (m' 0)‚à• : by simp only [norm_to_compl]
    ... ‚â§ ‚àë k in range n, C*‚à•m (k + 1)‚à• + ‚à•j (m' 0)‚à• : add_le_add_right (sum_le_sum (Œª _ _, hnorm_m' _)) _
    ... ‚â§ ‚àë k in range n, C*b (k+1) + (C*b 0 + C*‚à•hatm‚à•) :  add_le_add (sum_le_sum (Œª k _, _)) hnorm‚ÇÄ
    ... = ‚àë k in range (n+1), C*b k + C*‚à•hatm‚à• :  _
    ... ‚â§ (C+Œµ)*‚à•hatm‚à• : _,

    { exact mul_le_mul_of_nonneg_left (hm _ k.succ_pos).le hC.le },
    { rw [‚Üê add_assoc, sum_range_succ'] },
    { rw [add_comm, add_mul],
      apply add_le_add_left this } }
end
