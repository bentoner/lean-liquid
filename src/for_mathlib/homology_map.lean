import for_mathlib.homological_complex_op
import for_mathlib.commsq

noncomputable theory

open category_theory opposite

variables {ùìê : Type*} [category ùìê] [abelian ùìê]
variables {Œπ : Type*} {c : complex_shape Œπ}

lemma is_iso_of_square {A B C D : ùìê} (a : A ‚ü∂ B) (b : B ‚ü∂ D) (a' : A ‚ü∂ C) (c : C ‚ü∂ D) (w : a ‚â´ b = a' ‚â´ c)
  (ha : is_iso a) (hb : is_iso b) (ha' : is_iso a') :
  is_iso c :=
begin
  have hc : c = inv a' ‚â´ a ‚â´ b, { rw [is_iso.eq_inv_comp, w], },
  rw [hc], apply_instance,
end

def homology.map' {A‚ÇÅ B‚ÇÅ C‚ÇÅ A‚ÇÇ B‚ÇÇ C‚ÇÇ : ùìê}
  {f‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ} {g‚ÇÅ : B‚ÇÅ ‚ü∂ C‚ÇÅ} (w‚ÇÅ : f‚ÇÅ ‚â´ g‚ÇÅ = 0)
  {f‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ} {g‚ÇÇ : B‚ÇÇ ‚ü∂ C‚ÇÇ} (w‚ÇÇ : f‚ÇÇ ‚â´ g‚ÇÇ = 0)
  {a : A‚ÇÅ ‚ü∂ A‚ÇÇ} {b : B‚ÇÅ ‚ü∂ B‚ÇÇ} {c : C‚ÇÅ ‚ü∂ C‚ÇÇ}
  (sq1 : commsq f‚ÇÅ a b f‚ÇÇ) (sq2 : commsq g‚ÇÅ b c g‚ÇÇ) :
  homology f‚ÇÅ g‚ÇÅ w‚ÇÅ ‚ü∂ homology f‚ÇÇ g‚ÇÇ w‚ÇÇ :=
homology.map w‚ÇÅ w‚ÇÇ ‚ü®a, b, sq1.w.symm‚ü© ‚ü®b, c, sq2.w.symm‚ü© rfl

lemma homology.map_eq {A‚ÇÅ B‚ÇÅ C‚ÇÅ A‚ÇÇ B‚ÇÇ C‚ÇÇ : ùìê}
  {f‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ} {g‚ÇÅ : B‚ÇÅ ‚ü∂ C‚ÇÅ} (w‚ÇÅ : f‚ÇÅ ‚â´ g‚ÇÅ = 0)
  {f‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ} {g‚ÇÇ : B‚ÇÇ ‚ü∂ C‚ÇÇ} (w‚ÇÇ : f‚ÇÇ ‚â´ g‚ÇÇ = 0)
  (sq1 : arrow.mk f‚ÇÅ ‚ü∂ arrow.mk f‚ÇÇ) (sq2 : arrow.mk g‚ÇÅ ‚ü∂ arrow.mk g‚ÇÇ) (H) :
  homology.map w‚ÇÅ w‚ÇÇ sq1 sq2 H =
    @homology.map' _ _ _ _ _ _ _ _ _ _ _ w‚ÇÅ _ _ w‚ÇÇ sq1.left sq1.right sq2.right
      (commsq.of_eq sq1.w.symm) (commsq.of_eq $ by { rw H, exact sq2.w.symm }) :=
by { rw homology.map', cases sq1, cases sq2, congr, rw H, }
