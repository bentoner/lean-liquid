import algebra.homology.homotopy_category

universes v u

open_locale classical
noncomputable theory

open category_theory category_theory.limits homological_complex

variables {Œπ : Type*}
variables {V : Type u} [category.{v} V] [preadditive V]
variables {c : complex_shape Œπ}

namespace category_theory

namespace quotient

variables {ùíû : Type*} [category ùíû] {r : hom_rel ùíû} [congruence r]
variables {X Y : ùíû} {f g : X ‚ü∂ Y}

lemma comp_closure.rel (h : comp_closure r f g) : r f g :=
by { cases h, apply congruence.comp_left, apply congruence.comp_right, assumption }

end quotient

end category_theory

namespace homotopy

variables {C D : homological_complex V c} {f f‚ÇÅ f‚ÇÇ g g‚ÇÅ g‚ÇÇ : C ‚ü∂ D}

@[simps {fully_applied := ff}]
protected def neg (h : homotopy f g) : homotopy (-f) (-g) :=
{ hom := -h.hom,
  zero' := Œª i j H, by { dsimp, rw [h.zero i j H, neg_zero] },
  comm := Œª i, by simp only [neg_f_apply, add_monoid_hom.map_neg, h.comm, neg_add] }

@[simps {fully_applied := ff}]
def add_left (f : C ‚ü∂ D) (h : homotopy g‚ÇÅ g‚ÇÇ) : homotopy (f + g‚ÇÅ) (f + g‚ÇÇ) :=
{ comm := Œª i, by { simp only [add_f_apply, h.comm], rw [add_comm, add_comm (f.f i), ‚Üê add_assoc] },
  .. h }

@[simps {fully_applied := ff}]
def add_right (h : homotopy f‚ÇÅ f‚ÇÇ) (g : C ‚ü∂ D) : homotopy (f‚ÇÅ + g) (f‚ÇÇ + g) :=
{ comm := Œª i, by simp only [add_f_apply, h.comm, add_assoc],
  .. h }

@[simps {fully_applied := ff}]
def sub_left (f : C ‚ü∂ D) (h : homotopy g‚ÇÅ g‚ÇÇ) : homotopy (f - g‚ÇÅ) (f - g‚ÇÇ) :=
{ comm := Œª i, by simp only [h.comm, add_f_apply, neg_f_apply, neg_hom, sub_eq_add_neg,
    add_monoid_hom.map_neg, add_comm _ (f.f i), ‚Üê add_assoc, neg_add],
  .. h.neg }

@[simps {fully_applied := ff}]
def sub_right (h : homotopy f‚ÇÅ f‚ÇÇ) (g : C ‚ü∂ D) : homotopy (f‚ÇÅ - g) (f‚ÇÇ - g) :=
{ comm := Œª i, by simp only [sub_f_apply, h.comm, add_sub],
  .. h }

end homotopy

namespace homotopy_category
/-
Generalize this stuff to suitable quotient categories?
-/

variables (A B : homotopy_category V c)

@[simp] lemma quot_mk {A B : homological_complex V c} (f : A ‚ü∂ B) :
  quot.mk _ f = (quotient V c).map f := rfl

instance : has_zero (A ‚ü∂ B) :=
‚ü®(quotient V c).map 0‚ü©

instance : has_neg (A ‚ü∂ B) :=
‚ü®quot.lift (Œª f, (quotient V c).map (-f))
  (Œª (f g : A.as ‚ü∂ B.as) (h : quotient.comp_closure (homotopic V c) f g),
    eq_of_homotopy _ _ h.rel.some.neg)‚ü©

instance : has_add (A ‚ü∂ B) :=
‚ü®quot.lift‚ÇÇ (Œª f g, (quotient V c).map (f + g))
  (Œª (f g‚ÇÅ g‚ÇÇ : A.as ‚ü∂ B.as) (h : quotient.comp_closure (homotopic V c) g‚ÇÅ g‚ÇÇ),
    eq_of_homotopy _ _ (h.rel.some.add_left _))
  (Œª (f‚ÇÅ f‚ÇÇ g : A.as ‚ü∂ B.as) (h : quotient.comp_closure (homotopic V c) f‚ÇÅ f‚ÇÇ),
    eq_of_homotopy _ _ (h.rel.some.add_right g))‚ü©

lemma quotient_map_add {A B : homological_complex V c} (f g : A ‚ü∂ B) :
  (quotient V c).map (f + g) = (quotient V c).map f + (quotient V c).map g := rfl

instance : has_sub (A ‚ü∂ B) :=
‚ü®quot.lift‚ÇÇ (Œª f g, (quotient V c).map (f - g))
  (Œª (f g‚ÇÅ g‚ÇÇ : A.as ‚ü∂ B.as) (h : quotient.comp_closure (homotopic V c) g‚ÇÅ g‚ÇÇ),
    eq_of_homotopy _ _ (h.rel.some.sub_left _))
  (Œª (f‚ÇÅ f‚ÇÇ g : A.as ‚ü∂ B.as) (h : quotient.comp_closure (homotopic V c) f‚ÇÅ f‚ÇÇ),
    eq_of_homotopy _ _ (h.rel.some.sub_right g))‚ü©

instance : add_comm_group (A ‚ü∂ B) :=
function.surjective.add_comm_group (Œª f, (quotient V c).map f) (surjective_quot_mk _)
  rfl (Œª _ _, rfl) (Œª _, rfl) (Œª _ _, rfl)

instance : preadditive (homotopy_category V c) :=
{ add_comp' := Œª X Y Z f‚ÇÅ f‚ÇÇ g,
  begin
    apply quot.induction_on‚ÇÉ f‚ÇÅ f‚ÇÇ g, clear f‚ÇÅ f‚ÇÇ g,
    intros f‚ÇÅ f‚ÇÇ g,
    repeat { erw quot_mk },
    rw [‚Üê quotient_map_add],
    calc (quotient V c).map (f‚ÇÅ + f‚ÇÇ) ‚â´ (quotient V c).map g
        = (quotient V c).map ((f‚ÇÅ + f‚ÇÇ) ‚â´ g) : by rw (quotient V c).map_comp
    ... = (quotient V c).map (f‚ÇÅ ‚â´ g + f‚ÇÇ ‚â´ g) : by rw preadditive.add_comp
    ... = (quotient V c).map (f‚ÇÅ ‚â´ g) + (quotient V c).map (f‚ÇÇ ‚â´ g) :
      by rw quotient_map_add,
  end,
  comp_add' := Œª X Y Z f g‚ÇÅ g‚ÇÇ,
  begin
    apply quot.induction_on‚ÇÉ f g‚ÇÅ g‚ÇÇ, clear f g‚ÇÅ g‚ÇÇ,
    intros f g‚ÇÅ g‚ÇÇ,
    repeat { erw quot_mk },
    rw [‚Üê quotient_map_add],
    calc (quotient V c).map f ‚â´ (quotient V c).map (g‚ÇÅ + g‚ÇÇ)
        = (quotient V c).map (f ‚â´ (g‚ÇÅ + g‚ÇÇ)) : by rw (quotient V c).map_comp
    ... = (quotient V c).map (f ‚â´ g‚ÇÅ + f ‚â´ g‚ÇÇ) : by rw preadditive.comp_add
    ... = (quotient V c).map (f ‚â´ g‚ÇÅ) + (quotient V c).map (f ‚â´ g‚ÇÇ) :
      by rw quotient_map_add,
  end }

instance quotient.additive : (quotient V c).additive := {}

end homotopy_category
