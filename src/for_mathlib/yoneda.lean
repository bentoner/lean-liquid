import tactic
import category_theory.yoneda

namespace category_theory

universes w v u
variables {C : Type u} [category.{v} C]

@[simps]
def yoneda' : C ‚•§ C·µí·µñ ‚•§ Type (max w v) :=
{ obj := Œª X, yoneda.obj X ‚ãô ulift_functor.{w},
  map := Œª X Y f, whisker_right (yoneda.map f) _,
  map_id' := Œª X, by { erw [functor.map_id, whisker_right_id], refl },
  map_comp' := Œª X Y Z f g, by { rw [functor.map_comp, whisker_right_comp] } }

open opposite

@[simps]
def yoneda'_equiv (X : C) (F : C·µí·µñ ‚•§ Type (max w v)) :
  (yoneda'.{w}.obj X ‚ü∂ F) ‚âÉ F.obj (op X) :=
{ to_fun := Œª e, e.app _ ‚ü®ùüô _‚ü©,
  inv_fun := Œª t, { app := Œª Y f, F.map f.down.op t },
  left_inv := begin
    intros f,
    ext Y ‚ü®t‚ü©,
    have := (f.naturality t.op).symm,
    apply_fun (Œª e, e ‚ü®ùüô _‚ü©) at this,
    dsimp at t ‚ä¢ this,
    rw [this, category.comp_id],
  end,
  right_inv := by tidy }

end category_theory
