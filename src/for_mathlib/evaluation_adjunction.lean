import category_theory.types
import category_theory.const
import category_theory.functor_category
import category_theory.limits.shapes.products
import category_theory.epi_mono

namespace category_theory

open category_theory.limits

universes v u‚ÇÅ u‚ÇÇ
variables {C : Type u‚ÇÅ} [category.{v} C] {D : Type u‚ÇÇ} [category.{v} D]
variables [‚àÄ (a b : C), has_coproducts_of_shape (a ‚ü∂ b) D]

@[simps]
noncomputable
def lift_eval (b : C) (a : D) :
  C ‚•§ D :=
{ obj := Œª t, ‚àê (Œª i : b ‚ü∂ t, a),
  map := Œª X Y f, sigma.desc $ Œª g, sigma.Œπ (Œª (i : b ‚ü∂ Y), a) $ g ‚â´ f,
  map_id' := Œª X, by {
    ext, simp only [cofan.mk_Œπ_app, colimit.Œπ_desc, category.comp_id], congr' 1, simp },
  map_comp' := Œª X Y Z f g, by {
    ext, simp only [cofan.mk_Œπ_app, colimit.Œπ_desc_assoc, colimit.Œπ_desc], congr' 1, simp } }

@[simps]
noncomputable
def lift_eval_hom_equiv (b : C) (a : D) (F : C ‚•§ D) :
  (lift_eval b a ‚ü∂ F) ‚âÉ (a ‚ü∂ ((evaluation _ _).obj b).obj F) :=
{ to_fun := Œª Œ∑, sigma.Œπ (Œª i : b ‚ü∂ b, a) (ùüô _) ‚â´ Œ∑.app _,
  inv_fun := Œª f, { app := Œª X, sigma.desc $ Œª g, f ‚â´ F.map g },
  left_inv := begin
    intros Œ∑,
    ext,
    simp only [cofan.mk_Œπ_app, colimit.Œπ_desc, category.assoc],
    simp only [‚Üê Œ∑.naturality, ‚Üê category.assoc,cofan.mk_Œπ_app,
      colimit.Œπ_desc, lift_eval_map],
    congr' 2,
    simp,
  end,
  right_inv := by tidy }

variable (D)
noncomputable
def lift_evaluation (a : C) : D ‚•§ C ‚•§ D :=
adjunction.left_adjoint_of_equiv (lift_eval_hom_equiv a) $ by tidy

noncomputable
def evaluation_adjunction (a : C) : lift_evaluation D a ‚ä£ (evaluation _ _).obj a :=
adjunction.adjunction_of_equiv_left _ _

noncomputable
instance (a : C) : is_right_adjoint ((evaluation C D).obj a) :=
‚ü®_, evaluation_adjunction _ _‚ü©

lemma mono_iff_app_mono {F G : C ‚•§ D} (Œ∑ : F ‚ü∂ G) :
  mono Œ∑ ‚Üî (‚àÄ X, mono (Œ∑.app X)) :=
begin
  split,
  { intros h X,
    change mono (((evaluation _ _).obj X).map Œ∑),
    apply right_adjoint_preserves_mono,
  }
end

end category_theory
