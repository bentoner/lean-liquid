import for_mathlib.derived.K_projective
import for_mathlib.homological_complex_op
import for_mathlib.homology_iso_Ab
import for_mathlib.hom_single_iso

noncomputable theory

universes v u

open category_theory category_theory.limits category_theory.preadditive

variables {C : Type u} {Œπ : Type*} [category.{v} C] [abelian C] {c : complex_shape Œπ}

namespace AddCommGroup

-- def has_homology'' {A B C : AddCommGroup} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (w : f ‚â´ g = 0) :
--   _root_.has_homology f g (AddCommGroup.homology f g) :=
-- { w := w,
--   œÄ := (AddCommGroup.kernel_iso_ker _).hom ‚â´ of_hom (quotient_add_group.mk' _),
--   Œπ := _,
--   œÄ_Œπ := _,
--   ex_œÄ := _,
--   Œπ_ex := _,
--   epi_œÄ := _,
--   mono_Œπ := _ }

/-
{ w := w,
  œÄ := (AddCommGroup.kernel_iso_ker _).hom ‚â´ of_hom (quotient_add_group.mk' _),
  Œπ := _,
  -- quotient_add_group.lift _ ((cokernel.œÄ f).comp $ add_subgroup.subtype _) begin
  --   rintro ‚ü®y, hx : g y = 0‚ü© ‚ü®x, rfl : f x = y‚ü©,
  --   dsimp only [add_monoid_hom.comp_apply, quotient_add_group.mk'_apply, subtype.coe_mk,
  --     add_subgroup.coe_subtype],
  --   rw [‚Üê comp_apply, cokernel.condition, zero_apply],
  -- end,
  œÄ_Œπ := by sorry { rw [‚Üê kernel_iso_ker_hom_comp_subtype], refl },
  ex_œÄ := by sorry; begin
    rw [‚Üê exact_comp_hom_inv_comp_iff (kernel_iso_ker g), iso.inv_hom_id_assoc],
    rw AddCommGroup.exact_iff',
    split,
    { ext, simp, },
    { rintros ‚ü®x, hx : _ = _‚ü© (hh : _ = _),
      dsimp at hh,
      rw quotient_add_group.eq_zero_iff at hh,
      obtain ‚ü®t,ht‚ü© := hh,
      use t,
      ext,
      simp_rw comp_apply,
      dsimp [kernel_iso_ker],
      rw [‚Üê comp_apply, kernel.lift_Œπ, ht],
      refl }
  end,
  Œπ_ex := by sorry; begin
    rw AddCommGroup.exact_iff',
    split,
    { ext ‚ü®t‚ü©,
      simpa only [comp_apply, add_monoid_hom.coe_comp, quotient_add_group.coe_mk',
        function.comp_app, quotient_add_group.lift_mk, add_subgroup.coe_subtype,
        add_subgroup.coe_mk, cokernel.œÄ_desc_apply, add_monoid_hom.zero_comp,
        add_monoid_hom.zero_apply] },
    { rintros x (hx : _ = _),
      change ‚àÉ e, _,
      have : function.surjective (cokernel.œÄ f) := surjective_of_epi (cokernel.œÄ f),
      obtain ‚ü®y,rfl‚ü© := this x,
      rw [‚Üê comp_apply, cokernel.œÄ_desc] at hx,
      let yy : g.ker := ‚ü®y,hx‚ü©,
      use quotient_add_group.mk yy,
      simp only [quotient_add_group.lift_mk', add_monoid_hom.coe_comp, add_subgroup.coe_subtype,
        function.comp_app, subtype.coe_mk] }
  end,
  epi_œÄ := by sorry; begin
    apply_with epi_comp {instances:=ff}, { apply_instance },
    rw AddCommGroup.epi_iff_surjective, exact quotient_add_group.mk'_surjective _
  end,
  mono_Œπ := by sorry; begin
    rw [AddCommGroup.mono_iff_injective, injective_iff_map_eq_zero],
    intros y hy,
    obtain ‚ü®‚ü®y, hy'‚ü©, rfl‚ü© := quotient_add_group.mk'_surjective _ y,
    rw [quotient_add_group.mk'_apply, quotient_add_group.eq_zero_iff],
    rw [quotient_add_group.mk'_apply, quotient_add_group.lift_mk] at hy,
    rw add_subgroup.mem_comap,
    dsimp at hy ‚ä¢,
    have : exact f (cokernel.œÄ f) := abelian.exact_cokernel f,
    rw AddCommGroup.exact_iff' at this,
    exact this.2 hy,
  end }
-/

end AddCommGroup


namespace bounded_homotopy_category

open hom_single_iso_setup opposite

lemma aux‚ÇÅ_naturality_snd_var
  (P : bounded_homotopy_category C) {B‚ÇÅ B‚ÇÇ : C} (i : ‚Ñ§) (f : B‚ÇÅ ‚ü∂ B‚ÇÇ) :
  (aux‚ÇÅ P B‚ÇÅ i).hom ‚â´
  (homology_functor AddCommGroup (complex_shape.up ‚Ñ§).symm i).map
    ((nat_trans.map_homological_complex (preadditive_yoneda.map f)
    (complex_shape.up ‚Ñ§).symm).app P.val.as.op) =
  map_hom_complex_homology _ _ f _ _ ‚â´ (aux‚ÇÅ P B‚ÇÇ i).hom :=
begin
  rw [‚Üê iso.comp_inv_eq],
  ext : 2,
  dsimp only [aux‚ÇÅ, iso.symm_hom, iso.symm_inv, homology_iso', homology.map_iso],
  simp only [category.assoc],
  rw [homology.map_eq_desc'_lift_left, homology.œÄ'_desc'_assoc,
    homology.map_eq_lift_desc'_left, homology.lift_Œπ,
    map_hom_complex_homology,
    homology.map_eq_lift_desc'_left, homology.lift_Œπ, homology.œÄ'_desc'],
  dsimp only [arrow.hom_mk_left, map_hom_complex',
    nat_trans.map_homological_complex_app_f, homology_functor_map],
  let t : _ := _, show _ ‚â´ _ ‚â´ t = _,
  have ht : t = homology.Œπ _ _ _ ‚â´
    cokernel.map _ _ (homological_complex.X_prev_iso _ _).hom (ùüô _) _,
  rotate 2, { dsimp, refl }, { rw [category.comp_id], apply homological_complex.d_to_eq },
  { ext1, erw [homology.œÄ'_Œπ_assoc, homology.œÄ'_desc', cokernel.œÄ_desc], refl, },
  rw [ht, homology.map_eq_lift_desc'_right, homology.lift_Œπ_assoc], clear ht t,
  let t : _ := _, show t ‚â´ _ = _,
  have ht : t = kernel.map _ _ (ùüô _) (homological_complex.X_next_iso _ _).inv _ ‚â´
    homology.œÄ' _ _ _,
  rotate 2, { dsimp, apply sub_add_cancel },
  { rw [category.id_comp], symmetry, apply homological_complex.d_from_eq },
  { ext1, erw [homology.lift_Œπ, category.assoc, homology.œÄ'_Œπ, kernel.lift_Œπ_assoc], refl },
  rw [ht, category.assoc, homology.œÄ'_desc'_assoc, category.assoc, category.assoc], clear ht t,
  rw [kernel.lift_Œπ_assoc, cokernel.œÄ_desc],
  simp only [category.assoc, category.id_comp], refl,
end

lemma aux‚ÇÇ_naturality_snd_var
  (P : bounded_homotopy_category C) {B‚ÇÅ B‚ÇÇ : C} (i : ‚Ñ§) (f : B‚ÇÅ ‚ü∂ B‚ÇÇ) :
  (aux‚ÇÇ P B‚ÇÅ i).inv ‚â´ P.map_hom_complex_homology i f _ (homological_complex.d_comp_d _ _ _ _) =
  AddCommGroup.homology_map
    (homological_complex.d_comp_d _ _ _ _)
    (homological_complex.d_comp_d _ _ _ _)
    (commsq.of_eq $ ((map_hom_complex' _ f).comm _ _).symm)
    (commsq.of_eq $ ((map_hom_complex' _ f).comm _ _).symm) ‚â´ (aux‚ÇÇ P B‚ÇÇ i).inv := sorry
.

lemma quotient_add_group.lift_mk''
  {G H : Type*} [add_group G] [add_group H] (N : add_subgroup G) [N.normal]
  {œÜ : G ‚Üí+ H} (HN : ‚àÄ (x : G), x ‚àà N ‚Üí œÜ x = 0) (g : G) :
  (quotient_add_group.lift N œÜ HN) (quotient_add_group.mk' N g) = œÜ g :=
quotient_add_group.lift_mk' _ _ _

attribute [elementwise] iso.inv_hom_id

lemma _root_.AddCommGroup.has_homology_Œπ_eq {A B C : AddCommGroup} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (w : f ‚â´ g = 0) :
  (AddCommGroup.has_homology f g w).Œπ =
  (AddCommGroup.of_hom $ quotient_add_group.lift _ ((quotient_add_group.mk' f.range).comp g.ker.subtype)
      begin
        rintro x ‚ü®a, ha‚ü©,
        simp only [add_monoid_hom.comp_apply, quotient_add_group.coe_mk', quotient_add_group.eq_zero_iff],
        exact ‚ü®a, ha‚ü©,
      end) ‚â´
    (AddCommGroup.cokernel_iso_range_quotient _).inv :=
begin
  dsimp only [AddCommGroup.has_homology, AddCommGroup.of_hom],
  ext x,
  apply_fun (AddCommGroup.cokernel_iso_range_quotient f).hom,
  { simp only [add_monoid_hom.comp_apply, comp_apply, quotient_add_group.lift_mk'',
      AddCommGroup.cokernel_œÄ_cokernel_iso_range_quotient_hom_apply,
      category_theory.iso.inv_hom_id_apply] },
  { erw [‚Üê AddCommGroup.mono_iff_injective], apply_instance },
end
.

lemma _root_.add_monoid_hom.lift_of_surjective_apply {A B C : Type*}
  [add_comm_group A] [add_comm_group B] [add_comm_group C]
  (f : A ‚Üí+ B) (hf : function.surjective f) (g : {g : A ‚Üí+ C // f.ker ‚â§ g.ker}) (a : A) :
  add_monoid_hom.lift_of_surjective f hf g (f a) = g a :=
begin
  show g _ = g _,
  erw [‚Üê sub_eq_zero, ‚Üê g.val.map_sub, ‚Üê g.val.mem_ker],
  apply g.2,
  rw [f.mem_ker, f.map_sub, sub_eq_zero],
  apply function.surj_inv_eq
end

lemma _root_.add_equiv.symm_mk_apply {A B : Type*} [add_comm_group A] [add_comm_group B]
  (f : A ‚Üí B) (g : B ‚Üí A) (h1) (h2) (h3) (b : B) :
  add_equiv.symm ‚ü®f, g, h1, h2, h3‚ü© b = g b := rfl

lemma _root_.add_monoid_hom.subtype_mk_apply {A B : Type*} [add_comm_group A] [add_comm_group B]
  (p : (A ‚Üí+ B) ‚Üí Prop) (f : A ‚Üí+ B) (hf : p f) (a : A) :
  subtype.mk f hf a = f a := rfl

lemma homological_complex_hom_single_iso_natural_aux
  (P : bounded_homotopy_category C) {B‚ÇÅ B‚ÇÇ : C} (i : ‚Ñ§)
  (f : B‚ÇÅ ‚ü∂ B‚ÇÇ)
  (œÜ : (add_monoid_hom.ker ((hom_complex P B‚ÇÅ).d i (i - 1)))) :
  ((map_hom_complex' P f).f i) œÜ ‚àà add_monoid_hom.ker ((hom_complex P B‚ÇÇ).d i (i - 1)) :=
begin
  cases œÜ with œÜ hœÜ,
  rw [add_monoid_hom.mem_ker] at hœÜ ‚ä¢,
  rw [‚Üê comp_apply, (map_hom_complex' P f).comm, comp_apply],
  erw [hœÜ, map_zero],
end

lemma homological_complex_hom_single_iso_natural
  (P : bounded_homotopy_category C) {B‚ÇÅ B‚ÇÇ : C} (i : ‚Ñ§)
  (f : B‚ÇÅ ‚ü∂ B‚ÇÇ)
  (œÜ : (add_monoid_hom.ker ((hom_complex P B‚ÇÅ).d i (i - 1)))) :
  homotopy_category.quotient_map_hom P.val.as ((homological_complex.single C _ i).obj B‚ÇÅ)
    (((homological_complex.hom_single_iso P.val.as B‚ÇÅ i).symm) œÜ) ‚â´
  (single C i).map f =
  homotopy_category.quotient_map_hom P.val.as ((homological_complex.single C _ i).obj B‚ÇÇ)
    (((homological_complex.hom_single_iso P.val.as B‚ÇÇ i).symm)
      ‚ü®(map_hom_complex' P f).f i œÜ, homological_complex_hom_single_iso_natural_aux P i f œÜ‚ü©) :=
sorry

lemma hom_single_iso_naturality_snd_var_good
  (P : bounded_homotopy_category C) {B‚ÇÅ B‚ÇÇ : C} (i : ‚Ñ§)
  (f : B‚ÇÅ ‚ü∂ B‚ÇÇ) :
  (hom_single_iso P B‚ÇÅ i).hom ‚â´
  (homology_functor _ _ i).map (nat_trans.app (nat_trans.map_homological_complex
    (preadditive_yoneda.map f) _) _) =
  (preadditive_yoneda.map $ (single C i).map f).app (op P) ‚â´ (hom_single_iso P B‚ÇÇ i).hom :=
begin
  dsimp only [hom_single_iso, iso.trans_hom, iso.symm_hom, functor.comp_map, functor.op_map,
    functor.right_op_map, quiver.hom.unop_op],
  simp only [category.assoc],
  rw aux‚ÇÅ_naturality_snd_var,
  simp_rw ‚Üê category.assoc, congr' 1, simp_rw category.assoc,
  rw aux‚ÇÇ_naturality_snd_var,
  simp_rw ‚Üê category.assoc, congr' 1,
  rw [‚Üê iso.eq_inv_comp],
  apply (AddCommGroup.has_homology _ _ _).ext_Œπ,
  apply (AddCommGroup.has_homology _ _ _).ext_œÄ,
  rotate, { apply homological_complex.d_comp_d }, { apply homological_complex.d_comp_d },
  rw [AddCommGroup.homology_map, has_homology.map_Œπ, has_homology.œÄ_comp_desc],
  dsimp only [map_hom_complex', nat_trans.map_homological_complex_app_f,
    add_equiv_iso_AddCommGroup_iso],
  simp only [AddCommGroup.has_homology_Œπ_eq, ‚Üê category.assoc],
  rw [iso.eq_comp_inv],
  dsimp only [AddCommGroup.has_homology],
  simp only [category.assoc],
  rw [‚Üê iso.inv_comp_eq],
  ext1 œÜ,
  simp only [category_theory.comp_apply, AddCommGroup.kernel_iso_ker_inv_comp_Œπ_apply,
    AddCommGroup.cokernel_œÄ_cokernel_iso_range_quotient_hom_apply,
    AddCommGroup.of_hom, add_equiv.to_AddCommGroup_iso, add_equiv.coe_to_add_monoid_hom],
  dsimp only [aux‚ÇÉ, preadditive_yoneda_map_app_apply],
  dsimp only [add_equiv.surjective_congr, add_equiv.coe_mk, add_equiv.symm_mk_apply],
  rw [add_monoid_hom.lift_of_surjective_apply, add_monoid_hom.subtype_mk_apply],
  dsimp only [add_monoid_hom.comp_apply, add_equiv.coe_to_add_monoid_hom],
  erw [homological_complex_hom_single_iso_natural P i f œÜ],
  rw [add_monoid_hom.lift_of_surjective_apply, add_monoid_hom.subtype_mk_apply],
  dsimp only [add_monoid_hom.comp_apply, add_equiv.coe_to_add_monoid_hom],
  rw [quotient_add_group.lift_mk'', add_equiv.apply_symm_apply, add_monoid_hom.comp_apply],
  refl,
end

lemma hom_single_iso_naturality_snd_var
  (P : bounded_homotopy_category C) {B‚ÇÅ B‚ÇÇ : C} (i : ‚Ñ§)
  (f : B‚ÇÅ ‚ü∂ B‚ÇÇ) (x : P ‚ü∂ (single C i).obj B‚ÇÅ) :
  ((homology_functor _ _ i).map
    ((nat_trans.map_homological_complex (preadditive_yoneda.map f) _).app P.val.as.op))
      ((hom_single_iso P B‚ÇÅ i).hom x) = ((hom_single_iso P B‚ÇÇ i).hom (x ‚â´ (single C i).map f)) :=
begin
  have := hom_single_iso_naturality_snd_var_good P i f,
  apply_fun (Œª e, e x) at this,
  exact this
end

end bounded_homotopy_category
