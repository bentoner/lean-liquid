import for_mathlib.derived.les2

noncomputable theory

universes v u

open category_theory category_theory.limits

variables {A : Type u} [category.{v} A] [abelian A]

local notation `ùí¶` := homotopy_category A (complex_shape.up ‚Ñ§)

namespace bounded_homotopy_category
variables {X Y Z : cochain_complex A ‚Ñ§} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)


section
open homotopy_category

-- move me
@[reassoc]
lemma Ext_map_Ext_iso [enough_projectives A]
  (i : ‚Ñ§) (P‚ÇÅ P‚ÇÇ X‚ÇÅ X‚ÇÇ Y : bounded_homotopy_category A)
  [is_K_projective P‚ÇÅ.val] [is_K_projective P‚ÇÇ.val]
  (f‚ÇÅ : P‚ÇÅ ‚ü∂ X‚ÇÅ) [is_quasi_iso f‚ÇÅ] (f‚ÇÇ : P‚ÇÇ ‚ü∂ X‚ÇÇ) [is_quasi_iso f‚ÇÇ]
  (œÜ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (œÜ' : P‚ÇÅ ‚ü∂ P‚ÇÇ) (h : œÜ' ‚â´ f‚ÇÇ = f‚ÇÅ ‚â´ œÜ) :
  ((Ext i).flip.obj Y).map œÜ.op ‚â´ (Ext_iso i P‚ÇÅ X‚ÇÅ Y f‚ÇÅ).hom =
    (Ext_iso i P‚ÇÇ X‚ÇÇ Y f‚ÇÇ).hom ‚â´ (preadditive_yoneda.obj (Y‚ü¶i‚üß)).map œÜ'.op :=
begin
  dsimp only [Ext_iso, functor.map_iso_hom, iso.op_hom, Ext, Ext0,
    functor.flip_obj_map, functor.comp_map, whiskering_left_obj_map, whisker_left_app,
    functor.flip_map_app],
  rw [‚Üê category_theory.functor.map_comp, ‚Üê op_comp,
      ‚Üê category_theory.functor.map_comp, ‚Üê op_comp],
  congr' 2,
  dsimp only [replacement_iso_hom, opposite.unop_op],
  refine lift_ext X‚ÇÇ.œÄ _ _ _,
  simp only [category.assoc, lift_lifts, lift_lifts_assoc, quiver.hom.unop_op, h],
end

-- move me
@[reassoc]
lemma Ext_map_Ext_iso' [enough_projectives A]
  (i : ‚Ñ§) (X‚ÇÅ X‚ÇÇ Y : bounded_homotopy_category A) (œÜ : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
  ((Ext i).flip.obj Y).map œÜ.op ‚â´ (Ext_iso i _ X‚ÇÅ Y X‚ÇÅ.œÄ).hom =
    (Ext_iso i _ X‚ÇÇ Y X‚ÇÇ.œÄ).hom ‚â´ (preadditive_yoneda.obj (Y‚ü¶i‚üß)).map (lift (X‚ÇÅ.œÄ ‚â´ œÜ) X‚ÇÇ.œÄ).op :=
Ext_map_Ext_iso _ _ _ _ _ _ _ _ _ _ $ by rw [lift_lifts]

end

def shift_iso [enough_projectives A]
  (n : ‚Ñ§) (X : cochain_complex A ‚Ñ§) (Y : bounded_homotopy_category A)
  [((homotopy_category.quotient A (complex_shape.up ‚Ñ§)).obj X).is_bounded_above] :
  (((Ext (n+1)).flip.obj Y)).obj (opposite.op $ (of' X)‚ü¶(1:‚Ñ§)‚üß) ‚âÖ
  (((Ext n).flip.obj Y)).obj (opposite.op $ (of' X)) :=
begin
  let e := Ext_iso n (of' X).replace (of' X) Y (of' X).œÄ,
  let e' := Ext_iso (n+1) ((of' X).replace‚ü¶1‚üß) ((of' X)‚ü¶1‚üß) Y ((of' X).œÄ‚ü¶(1:‚Ñ§)‚üß'),
  refine (e' ‚â™‚â´ _ ‚â™‚â´ e.symm),
  clear e e',
  refine add_equiv.to_AddCommGroup_iso _,
  refine shift_iso_aux 1 n _ _,
end

open category_theory.preadditive

lemma shift_iso_conj
  (n : ‚Ñ§)
  [enough_projectives A]
  (W : bounded_homotopy_category A)
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y)] :
  (shift_iso _ _ _).inv ‚â´ (((Ext (n+1)).flip.obj W).right_op.map ((of_hom f)‚ü¶(1 : ‚Ñ§)‚üß')).unop
    ‚â´ (shift_iso _ _ _).hom =
  ((Ext n).flip.obj W).map (of_hom f).op :=
begin
  dsimp only [shift_iso, iso.trans_hom, iso.trans_inv, iso.symm_inv, iso.symm_hom,
    functor.right_op_map, quiver.hom.unop_op],
  simp only [category.assoc],
  rw [Ext_map_Ext_iso_assoc (n+1)
    ((shift_functor (bounded_homotopy_category A) (1:‚Ñ§)).obj (of' X).replace)
    ((shift_functor (bounded_homotopy_category A) (1:‚Ñ§)).obj (of' Y).replace)
    _ _ _
    ((shift_functor (bounded_homotopy_category A) 1).map (of' X).œÄ)
    ((shift_functor (bounded_homotopy_category A) 1).map (of' Y).œÄ)
    _ ((lift ((of' X).œÄ ‚â´ of_hom f) (of' Y).œÄ)‚ü¶1‚üß'),
    iso.inv_hom_id_assoc],
  swap,
  { simp only [comp_neg, neg_comp, neg_inj, ‚Üê category_theory.functor.map_comp, lift_lifts], },
  simp only [‚Üê category.assoc, iso.comp_inv_eq],
  rw [Ext_map_Ext_iso', category.assoc, category.assoc], congr' 1,
  rw [‚Üê category.assoc, ‚Üê iso.eq_comp_inv],
  apply AddCommGroup.ext, intros œÜ,
  dsimp only [shift_iso_aux, add_equiv.to_AddCommGroup_iso],
  rw [comp_apply, comp_apply],
  dsimp only [add_equiv.coe_to_add_monoid_hom, add_equiv.symm, equiv.symm, add_equiv.to_equiv_mk,
    add_equiv.coe_mk],
  erw [preadditive_yoneda_obj_map_apply, preadditive_yoneda_obj_map_apply],
  simp only [‚Üê category.assoc, quiver.hom.unop_op, ‚Üê category_theory.functor.map_comp],
end

@[reassoc] lemma shift_iso_Ext_map
  (n : ‚Ñ§)
  [enough_projectives A]
  (W : bounded_homotopy_category A)
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y)] :
  (((Ext (n+1)).flip.obj W).right_op.map ((of_hom f)‚ü¶(1 : ‚Ñ§)‚üß')).unop ‚â´ (shift_iso _ _ _).hom =
  (shift_iso _ _ _).hom ‚â´ ((Ext n).flip.obj W).map (of_hom f).op :=
by rw [‚Üê iso.inv_comp_eq, shift_iso_conj]

@[reassoc] lemma Ext_map_shift_iso_inv
  (n : ‚Ñ§)
  [enough_projectives A]
  (W : bounded_homotopy_category A)
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y)] :
  (shift_iso _ _ _).inv ‚â´ (((Ext (n+1)).flip.obj W).right_op.map ((of_hom f)‚ü¶(1 : ‚Ñ§)‚üß')).unop =
  ((Ext n).flip.obj W).map (of_hom f).op ‚â´ (shift_iso _ _ _).inv :=
by rw [iso.eq_comp_inv, category.assoc, shift_iso_conj]

def Ext_Œ¥
  (n : ‚Ñ§)
  [enough_projectives A]
  (W : bounded_homotopy_category A)
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Z)]
  (w : ‚àÄ i, short_exact (f.f i) (g.f i)) :
  ((Ext n).flip.obj W).obj (opposite.op $ of' X) ‚ü∂
  ((Ext (n+1)).flip.obj W).obj (opposite.op $ of' Z) :=
(shift_iso n X W).inv ‚â´ (connecting_hom' f g (n+1) W w).unop

lemma Ext_Œ¥_natural
  (i : ‚Ñ§)
  [enough_projectives A]
  (W : bounded_homotopy_category A)
  {X‚ÇÅ Y‚ÇÅ Z‚ÇÅ : cochain_complex A ‚Ñ§} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : Y‚ÇÅ ‚ü∂ Z‚ÇÅ)
  {X‚ÇÇ Y‚ÇÇ Z‚ÇÇ : cochain_complex A ‚Ñ§} (g‚ÇÅ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z‚ÇÇ)
  (Œ±‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (Œ±‚ÇÇ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (Œ±‚ÇÉ : Z‚ÇÅ ‚ü∂ Z‚ÇÇ)
  (sq‚ÇÅ : f‚ÇÅ ‚â´ Œ±‚ÇÇ = Œ±‚ÇÅ ‚â´ g‚ÇÅ) (sq‚ÇÇ : f‚ÇÇ ‚â´ Œ±‚ÇÉ = Œ±‚ÇÇ ‚â´ g‚ÇÇ)
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X‚ÇÅ)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y‚ÇÅ)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Z‚ÇÅ)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X‚ÇÇ)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y‚ÇÇ)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Z‚ÇÇ)]
  (w‚ÇÅ : ‚àÄ i, short_exact (f‚ÇÅ.f i) (f‚ÇÇ.f i))
  (w‚ÇÇ : ‚àÄ i, short_exact (g‚ÇÅ.f i) (g‚ÇÇ.f i)) :
  ((Ext i).flip.obj W).map (of_hom Œ±‚ÇÅ).op ‚â´ Ext_Œ¥ f‚ÇÅ f‚ÇÇ i W w‚ÇÅ =
    Ext_Œ¥ g‚ÇÅ g‚ÇÇ i W w‚ÇÇ ‚â´ ((Ext (i + 1)).flip.obj W).map (of_hom Œ±‚ÇÉ).op :=
begin
  delta Ext_Œ¥,
  simp only [category.assoc],
  sorry
end

-- move me
lemma _root_.category_theory.unop_neg (C : Type*) [category C] [preadditive C]
  {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
  (-f).unop = -(f.unop) :=
rfl

lemma Ext_five_term_exact_seq'
  (n : ‚Ñ§)
  [enough_projectives A]
  (W : bounded_homotopy_category A)
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Z)]
  (w : ‚àÄ i, short_exact (f.f i) (g.f i)) :
  let E := Œª n, ((Ext n).flip.obj W) in
  exact_seq Ab.{v} $
    [ (E n).map (of_hom g).op
    , (E n).map (of_hom f).op
    , Ext_Œ¥ f g n W w
    , (E (n+1)).map (of_hom g).op ] :=
begin
  refine (Ext_five_term_exact_seq f g n W w).pair.unop.cons _,
  refine exact.cons _ (exact.exact_seq _),
  { rw [Ext_Œ¥, functor.right_op_map, quiver.hom.unop_op, ‚Üê shift_iso_conj f n W,
      exact_iso_comp, exact_comp_hom_inv_comp_iff],
    have := (Ext_five_term_exact_seq f g (n+1) W w).unop.pair,
    erw [functor.map_neg, category_theory.unop_neg, abelian.exact_neg_left_iff] at this,
    exact this },
  { rw [Ext_Œ¥, exact_iso_comp],
    exact ((Ext_five_term_exact_seq f g (n+1) W w).drop 1).pair.unop, }
end

end bounded_homotopy_category

namespace bounded_derived_category

variables [enough_projectives A]
variables {X Y Z : bounded_derived_category A} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
open homological_complex

def cone (f : X ‚ü∂ Y) : bounded_derived_category A :=
(localization_functor _).obj $
{ val := homotopy_category.cone f.val.out,
  bdd := begin
    obtain ‚ü®a,ha‚ü© := homotopy_category.is_bounded_above.cond X.val.val,
    obtain ‚ü®b,hb‚ü© := homotopy_category.is_bounded_above.cond Y.val.val,
    constructor, use (max a b + 1),
    intros t ht,
    apply is_zero_biprod,
    { apply ha, refine le_trans (le_trans _ ht) _,
      refine le_trans (le_max_left a b) _,
      all_goals { linarith } },
    { apply hb,
      refine le_trans _ ht, refine le_trans (le_max_right a b) _,
      linarith }
  end }

-- UGH
end bounded_derived_category

-- move me
instance single_is_bounded_above (X : A) :
  homotopy_category.is_bounded_above {as := (homological_complex.single A (complex_shape.up ‚Ñ§) 0).obj X} :=
begin
  refine ‚ü®‚ü®1, _‚ü©‚ü©,
  intros i hi,
  dsimp,
  rw if_neg,
  { exact is_zero_zero _ },
  { rintro rfl, exact zero_lt_one.not_le hi }
end

-- move me
instance quotient_single_is_bounded_above (X : A) :
  ((homotopy_category.quotient A (complex_shape.up ‚Ñ§)).obj
    ((homological_complex.single A (complex_shape.up ‚Ñ§) 0).obj X)).is_bounded_above :=
single_is_bounded_above X

def Ext'_Œ¥ [enough_projectives A]
  {X Y Z : A} (W : A) {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}
  (h : short_exact f g) (n : ‚Ñ§) :
  ((Ext' n).flip.obj W).obj (opposite.op $ X) ‚ü∂
  ((Ext' (n+1)).flip.obj W).obj (opposite.op $ Z) :=
begin
  refine @bounded_homotopy_category.Ext_Œ¥ _ _ _ _ _ _
    ((homological_complex.single _ _ _).map f)
    ((homological_complex.single _ _ _).map g)
    n _ _
    (quotient_single_is_bounded_above _)
    (quotient_single_is_bounded_above _)
    (quotient_single_is_bounded_above _) _,
  intro i, dsimp, by_cases hi : i = 0,
  { subst i, dsimp, simp only [eq_self_iff_true, category.comp_id, category.id_comp, if_true, h] },
  { rw [dif_neg hi, dif_neg hi, if_neg hi, if_neg hi, if_neg hi],
    refine ‚ü®exact_of_zero _ _‚ü©, }
end

lemma Ext'_Œ¥_natural [enough_projectives A]
  {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : A}
  (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ X‚ÇÉ)
  (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Y‚ÇÉ)
  (Œ±‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (Œ±‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (Œ±‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
  (sq‚ÇÅ : f‚ÇÅ ‚â´ Œ±‚ÇÇ = Œ±‚ÇÅ ‚â´ g‚ÇÅ) (sq‚ÇÇ : f‚ÇÇ ‚â´ Œ±‚ÇÉ = Œ±‚ÇÇ ‚â´ g‚ÇÇ)
  (Z : A) (hf : short_exact f‚ÇÅ f‚ÇÇ) (hg : short_exact g‚ÇÅ g‚ÇÇ) (i : ‚Ñ§) :
  ((Ext' i).flip.obj Z).map Œ±‚ÇÅ.op ‚â´ Ext'_Œ¥ Z hf i =
    Ext'_Œ¥ Z hg i ‚â´ ((Ext' (i+1)).flip.obj Z).map Œ±‚ÇÉ.op :=
begin
  delta Ext' Ext'_Œ¥,
  apply bounded_homotopy_category.Ext_Œ¥_natural _ _ _ _ _ _ _
    ((homological_complex.single A (complex_shape.up ‚Ñ§) 0).map Œ±‚ÇÇ),
  all_goals { simp only [‚Üê category_theory.functor.map_comp, sq‚ÇÅ, sq‚ÇÇ, quiver.hom.unop_op] },
end

namespace category_theory
namespace short_exact

lemma Ext'_five_term_exact_seq [enough_projectives A]
  {X Y Z : A} (W : A) {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}
  (h : short_exact f g) (n : ‚Ñ§) :
  let E := Œª n, ((Ext' n).flip.obj W) in
  exact_seq Ab.{v} $
    [ (E n).map g.op
    , (E n).map f.op
    , Ext'_Œ¥ W h n
    , (E (n+1)).map g.op ] :=
begin
  let f' := (homological_complex.single _ (complex_shape.up ‚Ñ§) (0:‚Ñ§)).map f,
  let g' := (homological_complex.single _ (complex_shape.up ‚Ñ§) (0:‚Ñ§)).map g,
  let W' := (bounded_homotopy_category.single _ 0).obj W,
  have Hfg : ‚àÄ (i : ‚Ñ§), short_exact (f'.f i) (g'.f i),
  { intro i, dsimp, by_cases hi : i = 0,
    { subst i, dsimp, simp only [eq_self_iff_true, category.comp_id, category.id_comp, if_true, h] },
    { rw [dif_neg hi, dif_neg hi, if_neg hi, if_neg hi, if_neg hi],
      refine ‚ü®exact_of_zero _ _‚ü©, } },
  convert bounded_homotopy_category.Ext_five_term_exact_seq' f' g' n W' Hfg,
end

end short_exact
end category_theory
