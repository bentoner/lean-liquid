
import for_mathlib.homotopy_category_pretriangulated
import for_mathlib.abelian_category
import for_mathlib.derived.homological
import for_mathlib.derived.lemmas
import category_theory.abelian.projective
import for_mathlib.homology
import for_mathlib.snake_lemma3
import for_mathlib.les_homology
import for_mathlib.exact_seq3
import for_mathlib.triangle_shift
import for_mathlib.homology_iso
import for_mathlib.projective_replacement

noncomputable theory

open category_theory category_theory.limits category_theory.triangulated
open homological_complex

universes v u
variables {A : Type u} [category.{v} A] [abelian A]

namespace bounded_homotopy_category

instance : category (bounded_homotopy_category A) :=
{ hom := Œª X Y, X.val ‚ü∂ Y.val,
  id := Œª X, ùüô X.val,
  comp := Œª X Y Z f g, f ‚â´ g,
  id_comp' := Œª _ _ _, category.id_comp _,
  comp_id' := Œª _ _ _, category.comp_id _,
  assoc' := Œª _ _ _ _ _ _ _, category.assoc _ _ _ }

local attribute [instance] has_zero_object.has_zero

instance (X : bounded_homotopy_category A) : homotopy_category.is_bounded_above X.val := X.bdd

def of (X : homotopy_category A (complex_shape.up ‚Ñ§)) [homotopy_category.is_bounded_above X] :
  bounded_homotopy_category A := ‚ü®X‚ü©

instance : has_zero_object (bounded_homotopy_category A) :=
{ zero :=
  { val := 0,
    bdd := ‚ü®‚ü®0, Œª i _, by apply is_zero_zero ‚ü©‚ü© },
  unique_to := Œª X, has_zero_object.unique_to _,
  unique_from := Œª X, has_zero_object.unique_from _ }

/-
lemma is_bounded_shift (X : bounded_homotopy_category A) (i : ‚Ñ§) :
  ‚àÉ (a : ‚Ñ§), ‚àÄ j, a ‚â§ j ‚Üí is_zero (X.val‚ü¶i‚üß.as.X j) :=
begin
  obtain ‚ü®a,ha‚ü© := X.2,
  use a - i,
  intros j hj,
  apply ha,
  linarith
end
-/

local attribute [instance] endofunctor_monoidal_category
local attribute [reducible] endofunctor_monoidal_category discrete.add_monoidal

instance : has_shift (bounded_homotopy_category A) ‚Ñ§ :=
has_shift_mk _ _
{ F := Œª i,
  { obj := Œª X, ‚ü®X.val‚ü¶(i : ‚Ñ§)‚üß‚ü©,
    map := Œª X Y f, f‚ü¶i‚üß',
    map_id' := Œª X, (category_theory.shift_functor _ _).map_id _,
    map_comp' := Œª X Y Z f g, (category_theory.shift_functor _ _).map_comp _ _ },
  Œµ :=
  { hom :=
    { app := Œª X, (homotopy_category.shift_Œµ _).hom.app X.val,
      naturality' := Œª _ _ _, (homotopy_category.shift_Œµ _).hom.naturality _ },
    inv :=
    { app := Œª X, (homotopy_category.shift_Œµ _).inv.app X.val,
      naturality' := Œª _ _ _, (homotopy_category.shift_Œµ _).inv.naturality _ },
    hom_inv_id' := begin
      ext,
      dsimp,
      erw [‚Üê nat_trans.comp_app, iso.hom_inv_id],
      refl,
    end,
    inv_hom_id' := begin
      ext,
      dsimp,
      erw [‚Üê nat_trans.comp_app, iso.inv_hom_id],
      refl,
    end },
  Œº := Œª m n,
  { hom :=
    { app := Œª X, (homotopy_category.shift_functor_add _ _ _).hom.app X.val,
      naturality' := Œª _ _ _, (homotopy_category.shift_functor_add _ _ _).hom.naturality _ },
    inv :=
    { app := Œª X, (homotopy_category.shift_functor_add _ _ _).inv.app X.val,
      naturality' := Œª _ _ _, (homotopy_category.shift_functor_add _ _ _).inv.naturality _ },
    hom_inv_id' := begin
      ext,
      dsimp,
      erw [‚Üê nat_trans.comp_app, iso.hom_inv_id],
      refl,
    end,
    inv_hom_id' := begin
      ext,
      dsimp,
      erw [‚Üê nat_trans.comp_app, iso.inv_hom_id],
      refl,
    end },
  associativity := Œª m‚ÇÅ m‚ÇÇ m‚ÇÉ X, homotopy_category.has_shift_associativity_aux _ m‚ÇÅ m‚ÇÇ m‚ÇÉ X.val,
  left_unitality := Œª n X, homotopy_category.has_shift_left_unitality_aux _ n X.val,
  right_unitality := Œª n X, homotopy_category.has_shift_right_unitality_aux _ n X.val } .

instance : preadditive (bounded_homotopy_category A) :=
{ hom_group := Œª A B, show add_comm_group (A.val ‚ü∂ B.val), by apply_instance,
  add_comp' := Œª P Q R f g h, preadditive.add_comp _ _ _ _ _ _,
  comp_add' := Œª P Q R f g h, preadditive.comp_add _ _ _ _ _ _ }

instance shift_functor_additive (i : ‚Ñ§) :
  (category_theory.shift_functor (bounded_homotopy_category A) i).additive :=
by constructor

instance : triangulated.pretriangulated (bounded_homotopy_category A) :=
{ distinguished_triangles :=
  { T | triangle.mk (homotopy_category _ _) T.mor‚ÇÅ T.mor‚ÇÇ T.mor‚ÇÉ ‚àà
    dist_triang (homotopy_category A (complex_shape.up ‚Ñ§)) },
  isomorphic_distinguished := begin
    intros T‚ÇÅ hT‚ÇÅ T‚ÇÇ e,
    let S‚ÇÅ : triangle (homotopy_category _ _) := triangle.mk _ T‚ÇÅ.mor‚ÇÅ T‚ÇÅ.mor‚ÇÇ T‚ÇÅ.mor‚ÇÉ,
    let S‚ÇÇ : triangle (homotopy_category _ _) := triangle.mk _ T‚ÇÇ.mor‚ÇÅ T‚ÇÇ.mor‚ÇÇ T‚ÇÇ.mor‚ÇÉ,
    let E : S‚ÇÇ ‚âÖ S‚ÇÅ :=
      triangle.iso.of_components
        ‚ü®e.hom.hom‚ÇÅ,e.inv.hom‚ÇÅ,_,_‚ü©
        ‚ü®e.hom.hom‚ÇÇ,e.inv.hom‚ÇÇ,_,_‚ü©
        ‚ü®e.hom.hom‚ÇÉ,e.inv.hom‚ÇÉ,_,_‚ü©
        _ _ _,
    apply pretriangulated.isomorphic_distinguished _ _ _ E,
    apply hT‚ÇÅ,

    { show (e.hom ‚â´ e.inv).hom‚ÇÅ = _, rw iso.hom_inv_id, refl },
    { show (e.inv ‚â´ e.hom).hom‚ÇÅ = _, rw iso.inv_hom_id, refl },

    { show (e.hom ‚â´ e.inv).hom‚ÇÇ = _, rw iso.hom_inv_id, refl },
    { show (e.inv ‚â´ e.hom).hom‚ÇÇ = _, rw iso.inv_hom_id, refl },

    { show (e.hom ‚â´ e.inv).hom‚ÇÉ = _, rw iso.hom_inv_id, refl },
    { show (e.inv ‚â´ e.hom).hom‚ÇÉ = _, rw iso.inv_hom_id, refl },

    { exact e.hom.comm‚ÇÅ },
    { exact e.hom.comm‚ÇÇ },
    { exact e.hom.comm‚ÇÉ }
  end,
  contractible_distinguished := Œª X, pretriangulated.contractible_distinguished _,
  distinguished_cocone_triangle := begin
    intros X Y f,
    let T := (neg‚ÇÉ_functor (homotopy_category A (complex_shape.up ‚Ñ§))).obj (cone.triangle‚Çï f.out),
    let E := T.obj‚ÇÉ,
    haveI : homotopy_category.is_bounded_above E,
    { obtain ‚ü®a,ha‚ü© := X.2,
      obtain ‚ü®b,hb‚ü© := Y.2,
      use max (a - 1) b,
      intros i hi,
      apply is_zero_biprod,
      { apply ha, suffices : a - 1 ‚â§ i, by linarith, apply le_trans _ hi, apply le_max_left },
      { apply hb, apply le_trans _ hi, apply le_max_right } },
    refine ‚ü®‚ü®E‚ü©, T.mor‚ÇÇ, T.mor‚ÇÉ, _‚ü©,
    { erw homotopy_category.mem_distinguished_iff_exists_iso_cone,
      use [X.val.as, Y.val.as, f.out],
      unfreezingI {
      rcases X with ‚ü®‚ü®X‚ü©,hX‚ü©,
      rcases Y with ‚ü®‚ü®Y‚ü©,hY‚ü©,
      constructor,
      refine triangle.iso.of_components
        (iso.refl _) (iso.refl _) (iso.refl _) _ _ _,
      all_goals { dsimp [T], simp } } }
  end,
  rotate_distinguished_triangle := begin
    intros T,
    split,
    { intros hT,
      apply homotopy_category.rotate_mem_distinguished_triangles _ hT },
    { intros hT,
      erw pretriangulated.rotate_distinguished_triangle,
      exact hT }
  end,
  complete_distinguished_triangle_morphism := begin
    intros T‚ÇÅ T‚ÇÇ hT‚ÇÅ hT‚ÇÇ f g h,
    apply pretriangulated.complete_distinguished_triangle_morphism _ _ hT‚ÇÅ hT‚ÇÇ f g h,
  end }

end bounded_homotopy_category
