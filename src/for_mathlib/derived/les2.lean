import for_mathlib.derived.lemmas
import for_mathlib.derived.les

open category_theory
open category_theory.limits
open category_theory.triangulated

variables {A : Type*} [category A] [abelian A]

namespace homological_complex
variables {X Y Z : cochain_complex A ‚Ñ§} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)

noncomputable theory

local notation `ùí¶` := homotopy_category A (complex_shape.up ‚Ñ§)

-- The 5-lemma with no instances... I think this is more convenient to apply in practice.
lemma _root_.category_theory.abelian.is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso' :
  ‚àÄ {U B C D A' B' C' D' : A} {f : U ‚ü∂ B} {g : B ‚ü∂ C}
  {h : C ‚ü∂ D} {f' : A' ‚ü∂ B'} {g' : B' ‚ü∂ C'} {h' : C' ‚ü∂ D'} {Œ± : U ‚ü∂ A'} {Œ≤ : B ‚ü∂ B'} {Œ≥ : C ‚ü∂ C'}
  {Œ¥ : D ‚ü∂ D'},
    Œ± ‚â´ f' = f ‚â´ Œ≤ ‚Üí
    Œ≤ ‚â´ g' = g ‚â´ Œ≥ ‚Üí
    Œ≥ ‚â´ h' = h ‚â´ Œ¥ ‚Üí
    ‚àÄ {E E' : A} {i : D ‚ü∂ E} {i' : D' ‚ü∂ E'} {Œµ : E ‚ü∂ E'},
      Œ¥ ‚â´ i' = i ‚â´ Œµ ‚Üí
      exact f g ‚Üí exact g h ‚Üí exact h i ‚Üí  exact f' g' ‚Üí
      exact g' h' ‚Üí exact h' i' ‚Üí is_iso Œ± ‚Üí  is_iso Œ≤ ‚Üí
      is_iso Œ¥ ‚Üí is_iso Œµ ‚Üí is_iso Œ≥ :=
begin
  intros U B C D A' B' C' D' f g h f' g' h' Œ± Œ≤ Œ≥ Œ¥ w1 w2 w3 E E' i i' Œµ w4,
  intros hfg hgh hhi hf'g' hg'h' hh'i' hŒ± hŒ≤ hŒ¥ hŒµ, resetI,
  apply abelian.is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso w1 w2 w3 w4 hfg hgh hhi hf'g' hg'h' hh'i',
end

theorem is_iso_homology_functor_map (n : ‚Ñ§) (ses : ‚àÄ (i : ‚Ñ§), short_exact (f.f i) (g.f i)) :
  is_iso ((homology_functor _ _ n).map (cone.œÄ f g (Œª i, (ses i).exact.w))) :=
begin
  let X' : ùí¶ := (homotopy_category.quotient _ _).obj X,
  let Y' : ùí¶ := (homotopy_category.quotient _ _).obj Y,
  let Z' : ùí¶ := (homotopy_category.quotient _ _).obj Z,
  let f' : X' ‚ü∂ Y' := (homotopy_category.quotient _ _).map f,
  let g' : Y' ‚ü∂ Z' := (homotopy_category.quotient _ _).map g,
  let T : triangle (homotopy_category A (complex_shape.up ‚Ñ§)) :=
    (neg‚ÇÉ_functor _).obj (cone.triangle‚Çï f),
  have hT : T ‚àà dist_triang ùí¶,
  { erw homotopy_category.mem_distinguished_iff_exists_iso_cone,
    refine ‚ü®_, _, f, ‚ü®iso.refl _‚ü©‚ü© },
  have E1 := five_term_exact_seq' (homotopy_category.homology_functor A (complex_shape.up ‚Ñ§) n)
    T hT,
  have E2 := six_term_exact_seq f g ses n (n+1) rfl,
  let EE := homology_shift_iso A 1 n,
  --rw zero_add at EE,
  have key := @_root_.category_theory.abelian.is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso' _ _ _
    ((homotopy_category.homology_functor _ _ n).obj T.obj‚ÇÅ)
    ((homotopy_category.homology_functor _ _ n).obj T.obj‚ÇÇ)
    ((homotopy_category.homology_functor _ _ n).obj T.obj‚ÇÉ)
    ((homotopy_category.homology_functor _ _ n).obj (T.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß))
    ((homology_functor _ _ n).obj X)
    ((homology_functor _ _ n).obj Y)
    ((homology_functor _ _ n).obj Z)
    ((homology_functor _ _ (n+1)).obj X)
    ((homotopy_category.homology_functor _ _ n).map T.mor‚ÇÅ)
    ((homotopy_category.homology_functor _ _ n).map T.mor‚ÇÇ)
    ((homotopy_category.homology_functor _ _ n).map T.mor‚ÇÉ)
    ((homology_functor _ _ n).map f)
    ((homology_functor _ _ n).map g)
    (Œ¥ f g ses n (n+1) rfl)
    (ùüô _) (ùüô _)
    ((homology_functor _ _ n).map (cone.œÄ f g _))
    (EE.app _).hom _ _ _
    ((homotopy_category.homology_functor _ _ n).obj (T.obj‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß))
    ((homology_functor _ _ (n+1)).obj Y)
    ((homotopy_category.homology_functor A (complex_shape.up ‚Ñ§) n).map T.rotate.mor‚ÇÉ)
    ((homology_functor A (complex_shape.up ‚Ñ§) (n+1)).map f)
    (-(EE.app _)).hom,
    apply key, any_goals { apply_instance },
  { dsimp [triangle.rotate],
    simp only [functor.map_neg, preadditive.comp_neg, preadditive.neg_comp, neg_neg],
    symmetry,
    apply EE.hom.naturality },
  { exact E1.pair },
  { exact (E1.drop 1).pair },
  { exact (E1.drop 2).pair },
  { exact E2.pair },
  { exact (E2.drop 1).pair },
  { exact (E2.drop 2).pair },
  { simp only [category.id_comp, category.comp_id], refl },
  { rw category.id_comp,
    change _ = (homology_functor _ _ _).map _ ‚â´ _,
    rw ‚Üê functor.map_comp,
    congr' 1, ext i, symmetry, apply biprod.inr_snd_assoc },
  { sorry },
end .

instance is_quasi_iso_map_cone_œÄ (ses : ‚àÄ (i : ‚Ñ§), short_exact (f.f i) (g.f i)) :
  homotopy_category.is_quasi_iso
    ((homotopy_category.quotient _ _).map (cone.œÄ f g (Œª i, (ses i).exact.w))) :=
begin
  constructor, intros i,
  apply is_iso_homology_functor_map,
end

end homological_complex
