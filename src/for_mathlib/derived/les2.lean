import for_mathlib.derived.lemmas
import for_mathlib.derived.les
import for_mathlib.derived.derived_cat

open category_theory
open category_theory.limits
open category_theory.triangulated

universes v u

variables {A : Type u} [category.{v} A] [abelian A]

local notation `ùí¶` := homotopy_category A (complex_shape.up ‚Ñ§)

namespace homological_complex
variables {X Y Z : cochain_complex A ‚Ñ§} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)

noncomputable theory

-- The 5-lemma with no instances... I think this is more convenient to apply in practice.
lemma _root_.category_theory.abelian.is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso' :
  ‚àÄ {U B C D A' B' C' D' : A} {f : U ‚ü∂ B} {g : B ‚ü∂ C}
  {h : C ‚ü∂ D} {f' : A' ‚ü∂ B'} {g' : B' ‚ü∂ C'} {h' : C' ‚ü∂ D'} {Œ± : U ‚ü∂ A'} {Œ≤ : B ‚ü∂ B'} {Œ≥ : C ‚ü∂ C'}
  {Œ¥ : D ‚ü∂ D'},
    Œ± ‚â´ f' = f ‚â´ Œ≤ ‚Üí
    Œ≤ ‚â´ g' = g ‚â´ Œ≥ ‚Üí
    Œ≥ ‚â´ h' = h ‚â´ Œ¥ ‚Üí
    ‚àÄ {E E' : A} {i : D ‚ü∂ E} {i' : D' ‚ü∂ E'} {Œµ : E ‚ü∂ E'},
      Œ¥ ‚â´ i' = i ‚â´ Œµ ‚Üí
      exact f g ‚Üí exact g h ‚Üí exact h i ‚Üí  exact f' g' ‚Üí
      exact g' h' ‚Üí exact h' i' ‚Üí is_iso Œ± ‚Üí  is_iso Œ≤ ‚Üí
      is_iso Œ¥ ‚Üí is_iso Œµ ‚Üí is_iso Œ≥ :=
begin
  intros U B C D A' B' C' D' f g h f' g' h' Œ± Œ≤ Œ≥ Œ¥ w1 w2 w3 E E' i i' Œµ w4,
  intros hfg hgh hhi hf'g' hg'h' hh'i' hŒ± hŒ≤ hŒ¥ hŒµ, resetI,
  apply abelian.is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso
    w1 w2 w3 w4 hfg hgh hhi hf'g' hg'h' hh'i',
end

namespace is_iso_cone_setup

-- This follows from the fact that homology is a homological functor.
lemma is_zero_homology_cone_id (n : ‚Ñ§) :
  is_zero ((cone (ùüô X)).homology n) :=
begin
  let T : triangle (homotopy_category A (complex_shape.up ‚Ñ§)) :=
    (neg‚ÇÉ_functor _).obj (cone.triangle‚Çï (ùüô X)),
  have hT : T ‚àà dist_triang ùí¶,
  { erw homotopy_category.mem_distinguished_iff_exists_iso_cone,
    refine ‚ü®_, _, ùüô X, ‚ü®iso.refl _‚ü©‚ü© },
  have E := five_term_exact_seq' (homotopy_category.homology_functor A
    (complex_shape.up ‚Ñ§) n) T hT,
  dsimp [T] at E,
  apply is_zero_of_exact_seq_of_is_iso_of_is_iso _ _ _ _ E,
end

def cone_id_to_cone :
  cone (ùüô X) ‚ü∂ cone f :=
{ f := Œª i, biprod.lift biprod.fst (biprod.snd ‚â´ f.f _),
  comm' := begin
    -- This proof is a bit slow...
    rintros i j ‚ü®rfl‚ü©,
    apply category_theory.limits.biprod.hom_ext',
    apply category_theory.limits.biprod.hom_ext,
    { simp, dsimp [cone, cone.d], simp },
    { simp, dsimp [cone, cone.d], simp },
    { apply category_theory.limits.biprod.hom_ext,
      simp, dsimp [cone, cone.d], simp, dsimp [cone, cone.d], simp, },
  end } .

def kernel_cone_œÄ_iso (w) (n : ‚Ñ§) :
  limits.kernel ((cone.œÄ f g w).f n) ‚âÖ
  biprod (X.X (n+1)) (limits.kernel (g.f n)) :=
{ hom := biprod.lift
    (limits.kernel.Œπ _ ‚â´ biprod.fst)
    (limits.kernel.lift _ (limits.kernel.Œπ _ ‚â´ biprod.snd) begin
      simp,
      let t := _, change _ ‚â´ t = _,
      have ht : t = (cone.œÄ f g w).f n,
      { ext, dsimp [cone.œÄ], simp, dsimp [cone.œÄ], simp },
      rw [ht, limits.kernel.condition],
    end),
  inv := biprod.desc
    (limits.kernel.lift _ biprod.inl begin
      dsimp [cone.œÄ], simp,
    end)
    (limits.kernel.lift _ (limits.kernel.Œπ _ ‚â´ biprod.inr) begin
      simp,
    end),
  hom_inv_id' := begin
    ext, dsimp, simp, dsimp, simp,
  end,
  inv_hom_id' := begin
    ext, dsimp, simp, dsimp, simp, dsimp, simp, dsimp, simp,
  end }

def cokernel_cone_id_to_cone_iso (n) :
  cokernel ((cone_id_to_cone f).f n) ‚âÖ cokernel (f.f n) :=
{ hom := cokernel.desc _
    (biprod.desc 0 (cokernel.œÄ _))
    begin
      dsimp [cone_id_to_cone], ext, simp, simp,
    end,
  inv := cokernel.desc _
    (biprod.inr ‚â´ cokernel.œÄ _)
    begin
      rw ‚Üê category.assoc,
      let t := _, change t ‚â´ _ = _,
      have ht : t = biprod.inr ‚â´ (cone_id_to_cone f).f n,
      { ext, dsimp [cone_id_to_cone], simp, simp,
        dsimp [cone_id_to_cone], simp },
      simp [ht],
    end,
  hom_inv_id' := begin
    ext, dsimp, simp, dsimp [cone_id_to_cone], simp,
    let t := _, let s := _, change _ = t ‚â´ cokernel.œÄ s,
    have ht : t = biprod.inl ‚â´ s,
    { ext, simp, simp, },
    rw ht, simp,
    simp,
  end,
  inv_hom_id' := begin
    ext, dsimp, simp,
  end }

-- `0 ‚Üí C(ùüô X) ‚Üí C(f) ‚Üí Z ‚Üí 0` is a SES of complexes.
lemma cone_id_to_cone_short_exact (ses : ‚àÄ i : ‚Ñ§, short_exact (f.f i) (g.f i))
  (n : ‚Ñ§) : short_exact ((cone_id_to_cone f).f n)
  ((cone.œÄ f g (Œª i, (ses i).exact.w)).f _) :=
{ mono := begin
    constructor, intros Z i j h,
    dsimp [cone_id_to_cone] at h,
    apply biprod.hom_ext,
    { apply_fun (Œª e, e ‚â´ biprod.fst) at h,
      simpa using h },
    { apply_fun (Œª e, e ‚â´ biprod.snd) at h,
      simp at h, simp_rw [‚Üê category.assoc] at h,
      haveI : mono (f.f n) := (ses n).mono,
      rwa cancel_mono at h }
  end,
  epi := begin
    constructor, intros W i j h,
    dsimp [cone_id_to_cone] at h,
    simp only [category.assoc] at h,
    rw cancel_epi at h,
    haveI : epi (g.f n) := (ses n).epi,
    rwa cancel_epi at h,
  end,
  exact := begin
    rw abelian.exact_iff, split,
    { dsimp [cone_id_to_cone], ext, simp,
      erw biprod.lift_snd_assoc,
      simp [(ses n).exact.w] },
    { rw ‚Üê cancel_epi (kernel_cone_œÄ_iso f g _ _).inv,
      swap, apply_instance,
      rw ‚Üê cancel_mono (cokernel_cone_id_to_cone_iso f n).hom,
      dsimp [kernel_cone_œÄ_iso, cokernel_cone_id_to_cone_iso],
      ext, simp,
      simp,
      have := (ses n).exact, rw abelian.exact_iff at this,
      exact this.2,
    }
  end }

/-
Now combine both results above to see that the map
`H^i(C(f)) ‚Üí H^i(Z)`
is an isomorphism, using the LES for short exact sequences of complexes.
-/

lemma is_iso_homology_map_cone_œÄ (ses : ‚àÄ i : ‚Ñ§, short_exact (f.f i) (g.f i))
  (n : ‚Ñ§) :
  is_iso ((homology_functor _ _ n).map (cone.œÄ f g (Œª i, (ses i).exact.w))) :=
begin
  have E := six_term_exact_seq (cone_id_to_cone f)
    (cone.œÄ f g (Œª i, (ses i).exact.w)) (cone_id_to_cone_short_exact _ _ _),
  apply is_iso_of_exact_of_is_zero_of_is_zero _ _ _ _ _
    ((E n (n+1) rfl).extract 0 3),
  apply is_zero_homology_cone_id,
  apply is_zero_homology_cone_id,
end

end is_iso_cone_setup

/-
-- Why is this SO SLOW?!
lemma is_iso_homology_functor_map_aux (n : ‚Ñ§) (ses : ‚àÄ i : ‚Ñ§, short_exact (f.f i) (g.f i)) :
  (homology_functor A (complex_shape.up ‚Ñ§) n).map (cone.œÄ f g (Œª i, (ses i).exact.w)) ‚â´
    Œ¥ f g ses n (n + 1) rfl =
  (homotopy_category.homology_functor A (complex_shape.up ‚Ñ§) n).map
    ((neg‚ÇÉ_functor (homotopy_category A (complex_shape.up ‚Ñ§))).obj
      (cone.triangle‚Çï f)).mor‚ÇÉ ‚â´ ((homology_shift_iso A 1 n).app
    ((neg‚ÇÉ_functor (homotopy_category A (complex_shape.up ‚Ñ§))).obj
      (cone.triangle‚Çï f)).obj‚ÇÅ.as).hom :=
begin
  admit
end

theorem is_iso_homology_functor_map (n : ‚Ñ§) (ses : ‚àÄ (i : ‚Ñ§), short_exact (f.f i) (g.f i)) :
  is_iso ((homology_functor _ _ n).map (cone.œÄ f g (Œª i, (ses i).exact.w))) :=
begin
  let X' : ùí¶ := (homotopy_category.quotient _ _).obj X,
  let Y' : ùí¶ := (homotopy_category.quotient _ _).obj Y,
  let Z' : ùí¶ := (homotopy_category.quotient _ _).obj Z,
  let f' : X' ‚ü∂ Y' := (homotopy_category.quotient _ _).map f,
  let g' : Y' ‚ü∂ Z' := (homotopy_category.quotient _ _).map g,
  let T : triangle (homotopy_category A (complex_shape.up ‚Ñ§)) :=
    (neg‚ÇÉ_functor _).obj (cone.triangle‚Çï f),
  have hT : T ‚àà dist_triang ùí¶,
  { erw homotopy_category.mem_distinguished_iff_exists_iso_cone,
    refine ‚ü®_, _, f, ‚ü®iso.refl _‚ü©‚ü© },
  have E1 := five_term_exact_seq' (homotopy_category.homology_functor A (complex_shape.up ‚Ñ§) n)
    T hT,
  have E2 := six_term_exact_seq f g ses n (n+1) rfl,
  let EE := homology_shift_iso A 1 n,
  --rw zero_add at EE,
  have key := @_root_.category_theory.abelian.is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso' _ _ _
    ((homotopy_category.homology_functor _ _ n).obj T.obj‚ÇÅ)
    ((homotopy_category.homology_functor _ _ n).obj T.obj‚ÇÇ)
    ((homotopy_category.homology_functor _ _ n).obj T.obj‚ÇÉ)
    ((homotopy_category.homology_functor _ _ n).obj (T.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß))
    ((homology_functor _ _ n).obj X)
    ((homology_functor _ _ n).obj Y)
    ((homology_functor _ _ n).obj Z)
    ((homology_functor _ _ (n+1)).obj X)
    ((homotopy_category.homology_functor _ _ n).map T.mor‚ÇÅ)
    ((homotopy_category.homology_functor _ _ n).map T.mor‚ÇÇ)
    ((homotopy_category.homology_functor _ _ n).map T.mor‚ÇÉ)
    ((homology_functor _ _ n).map f)
    ((homology_functor _ _ n).map g)
    (Œ¥ f g ses n (n+1) rfl)
    (ùüô _) (ùüô _)
    ((homology_functor _ _ n).map (cone.œÄ f g _))
    (EE.app _).hom _ _ _
    ((homotopy_category.homology_functor _ _ n).obj (T.obj‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß))
    ((homology_functor _ _ (n+1)).obj Y)
    ((homotopy_category.homology_functor A (complex_shape.up ‚Ñ§) n).map T.rotate.mor‚ÇÉ)
    ((homology_functor A (complex_shape.up ‚Ñ§) (n+1)).map f)
    (-(EE.app _)).hom,
    apply key, any_goals { apply_instance },
  { dsimp [triangle.rotate],
    simp only [functor.map_neg, preadditive.comp_neg, preadditive.neg_comp, neg_neg],
    symmetry,
    apply EE.hom.naturality },
  { exact E1.pair },
  { exact (E1.drop 1).pair },
  { exact (E1.drop 2).pair },
  { exact E2.pair },
  { exact (E2.drop 1).pair },
  { exact (E2.drop 2).pair },
  { simp only [category.id_comp, category.comp_id], refl },
  { rw category.id_comp,
    change _ = (homology_functor _ _ _).map _ ‚â´ _,
    rw ‚Üê functor.map_comp,
    congr' 1, ext i, symmetry, apply biprod.inr_snd_assoc },
  { apply is_iso_homology_functor_map_aux },
end .
-/

instance is_quasi_iso_map_cone_œÄ (ses : ‚àÄ (i : ‚Ñ§), short_exact (f.f i) (g.f i)) :
  homotopy_category.is_quasi_iso
    ((homotopy_category.quotient _ _).map (cone.œÄ f g (Œª i, (ses i).exact.w))) :=
begin
  constructor, intros i,
  apply is_iso_cone_setup.is_iso_homology_map_cone_œÄ,
  --apply is_iso_homology_functor_map,
end

end homological_complex

namespace homotopy_category

variables {X Y Z : cochain_complex A ‚Ñ§} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
open homological_complex

def cone := (homotopy_category.quotient _ _).obj (cone f)

def cone.œÄ (w) : cone f ‚ü∂ (homotopy_category.quotient _ _).obj Z :=
(homotopy_category.quotient _ _).map (cone.œÄ f g w)

instance is_quasi_iso_cone_œÄ
  (w : ‚àÄ i, short_exact (f.f i) (g.f i)) : is_quasi_iso (cone.œÄ f g _) :=
homological_complex.is_quasi_iso_map_cone_œÄ _ _ w

end homotopy_category

namespace homological_complex

end homological_complex

namespace bounded_homotopy_category

variables {X Y Z : cochain_complex A ‚Ñ§} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
open homological_complex

def cone
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y)]
  (f : X ‚ü∂ Y) :
  bounded_homotopy_category A :=
{ val := homotopy_category.cone f,
  bdd := begin
    obtain ‚ü®a,ha‚ü© :=
      homotopy_category.is_bounded_above.cond ((homotopy_category.quotient _ _).obj X),
    obtain ‚ü®b,hb‚ü© :=
      homotopy_category.is_bounded_above.cond ((homotopy_category.quotient _ _).obj Y),
    constructor, use (max a b + 1),
    intros t ht,
    apply is_zero_biprod,
    { apply ha, refine le_trans (le_trans _ ht) _,
      refine le_trans (le_max_left a b) _,
      all_goals { linarith } },
    { apply hb,
      refine le_trans _ ht, refine le_trans (le_max_right a b) _,
      linarith }
  end }

def cone.œÄ
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Z)]
  (w) : cone f ‚ü∂ of' Z :=
homotopy_category.cone.œÄ f g w

instance is_quasi_iso_cone_œÄ
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Z)]
  (w : ‚àÄ i, short_exact (f.f i) (g.f i)) :
  homotopy_category.is_quasi_iso (cone.œÄ f g _) :=
homological_complex.is_quasi_iso_map_cone_œÄ _ _ w

def cone_triangle
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y)] :
  triangle (bounded_homotopy_category A) :=
{ obj‚ÇÅ := of' X,
  obj‚ÇÇ := of' Y,
  obj‚ÇÉ := cone f,
  mor‚ÇÅ := of_hom f,
  mor‚ÇÇ := (cone.triangle‚Çï f).mor‚ÇÇ,
  mor‚ÇÉ := -(cone.triangle‚Çï f).mor‚ÇÉ, }

lemma dist_cone_triangle
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y)] :
  cone_triangle f ‚àà dist_triang (bounded_homotopy_category A) :=
homotopy_category.cone_triangle‚Çï_mem_distinguished_triangles _ _ f

instance is_iso_Ext_map_cone_œÄ
  (n : ‚Ñ§)
  [enough_projectives A]
  (W : bounded_homotopy_category A)
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Z)]
  (w : ‚àÄ i, short_exact (f.f i) (g.f i)) :
  is_iso (((Ext n).flip.obj W).right_op.map (cone.œÄ f g (Œª i, (w i).exact.w))) :=
begin
  dsimp [functor.right_op],
  apply_with category_theory.is_iso_op { instances := ff },
  apply bounded_homotopy_category.is_iso_Ext_flip_obj_map_of_is_quasi_iso,
end

def connecting_hom'
  (n : ‚Ñ§)
  [enough_projectives A]
  (W : bounded_homotopy_category A)
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Z)]
  (w : ‚àÄ i, short_exact (f.f i) (g.f i)) :
  ((Ext n).flip.obj W).right_op.obj (of' Z) ‚ü∂
  ((Ext n).flip.obj W).right_op.obj ((of' X)‚ü¶(1 : ‚Ñ§)‚üß) :=
inv (((Ext n).flip.obj W).right_op.map ((cone.œÄ f g (Œª i, (w i).exact.w)))) ‚â´
((Ext n).flip.obj W).right_op.map (cone_triangle f).mor‚ÇÉ

def Ext_five_term_exact_seq
  (n : ‚Ñ§)
  [enough_projectives A]
  (W : bounded_homotopy_category A)
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj X)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Y)]
  [homotopy_category.is_bounded_above ((homotopy_category.quotient _ _).obj Z)]
  (w : ‚àÄ i, short_exact (f.f i) (g.f i)) :
  let E := ((Ext n).flip.obj W).right_op in
  exact_seq Ab.{v}·µí·µñ $
    [ E.map (of_hom f)
    , E.map (of_hom g)
    , connecting_hom' f g n W w
    , E.map (-(of_hom f)‚ü¶(1 : ‚Ñ§)‚üß')] :=
begin
  intros E,
  have hg : of_hom g = (cone_triangle f).mor‚ÇÇ ‚â´ (cone.œÄ f g (Œª i, (w i).exact.w)),
  { dsimp [of_hom, cone_triangle, cone.œÄ, homotopy_category.cone.œÄ],
    erw [‚Üê functor.map_comp], congr' 1,
    ext ii,
    dsimp [cone.in], rw biprod.inr_snd_assoc },
  let e := (E.map ((cone.œÄ f g (Œª i, (w i).exact.w)))),
  let ee := as_iso e,
  have firsttwo := homological_functor.cond E (cone_triangle f) (dist_cone_triangle _),
  apply exact_seq.cons,
  { rw [hg, functor.map_comp],
    rw exact_comp_iso,
    apply firsttwo },
  apply exact_seq.cons,
  { have next_two :=
      homological_functor.cond E (cone_triangle f).rotate _,
    dsimp only [connecting_hom'], rw [hg, functor.map_comp],
    change exact (_ ‚â´ ee.hom) (ee.inv ‚â´ _),
    rw category_theory.exact_comp_hom_inv_comp_iff,
    exact next_two,
    apply pretriangulated.rot_of_dist_triangle, apply dist_cone_triangle },
  rw ‚Üê exact_iff_exact_seq,
  { dsimp only [connecting_hom'],
    rw exact_iso_comp,
    apply homological_functor.cond E (cone_triangle f).rotate.rotate,
    apply pretriangulated.rot_of_dist_triangle,
    apply pretriangulated.rot_of_dist_triangle,
    apply dist_cone_triangle },
end
.

-- Do we not have this?!
-- TODO: Move this!
def shift_of_eq {C : Type u} [category.{v} C] [has_shift C ‚Ñ§] (i j : ‚Ñ§) (h : i = j) (X : C) :
  X‚ü¶i‚üß ‚âÖ X‚ü¶j‚üß :=
by { rw h }

@[simps]
def shift_iso_aux {C : Type u} [category.{v} C] [preadditive C] [has_shift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (category_theory.shift_functor C n).additive]
  (n m : ‚Ñ§) (X Y : C) :
  (X‚ü¶n‚üß ‚ü∂ Y‚ü¶m + n‚üß) ‚âÉ+ (X ‚ü∂ Y‚ü¶m‚üß) :=
{ to_fun := Œª f,
    (shift_shift_neg X n).inv ‚â´ (f ‚â´ (shift_add Y m n).hom)‚ü¶-n‚üß' ‚â´ (shift_shift_neg _ n).hom,
  inv_fun := Œª f, f‚ü¶n‚üß' ‚â´ (shift_add _ _ _).inv,
  left_inv := Œª f, begin
    dsimp only,
    simp only [category_theory.functor.map_comp, category.assoc, category.comp_id, category.id_comp,
      shift_shift_neg_inv_shift, shift_shift_neg_hom_shift, shift_neg_shift',
      iso.inv_hom_id, iso.inv_hom_id_assoc, iso.hom_inv_id],
  end,
  right_inv := Œª f, by simp only [category.assoc, iso.inv_hom_id, iso.inv_hom_id_assoc,
    category.comp_id, shift_shift_neg'],
  map_add' := Œª x y, by
    simp only [(category_theory.shift_functor C (-n)).map_add, preadditive.comp_add,
      preadditive.add_comp, preadditive.comp_add_assoc, preadditive.add_comp_assoc] }


end bounded_homotopy_category
