import for_mathlib.derived.derived_cat
import for_mathlib.derived.example

open category_theory category_theory.triangulated category_theory.limits

namespace category_theory

variables {ùìê : Type*} [category ùìê] [abelian ùìê]

-- move me
lemma exact_seq.is_iso_of_zero_of_zero {A B C D : ùìê} {f : A ‚ü∂ B} {g : B ‚ü∂ C} {h : C ‚ü∂ D}
  {L : list (arrow ùìê)} (H : exact_seq ùìê (f :: g :: h :: L)) (hf : f = 0) (hh : h = 0) :
  is_iso g :=
begin
  subst f, subst h,
  have : mono g, { rw [H.pair.mono_iff_eq_zero], },
  haveI : epi g, { rw [(H.drop 1).pair.epi_iff_eq_zero] },
  exact is_iso_of_mono_of_epi g,
end

end category_theory

variables (A : Type*) [category A] [abelian A] [enough_projectives A]

namespace bounded_derived_category

@[simps]
def forget : bounded_derived_category A ‚•§ bounded_homotopy_category A :=
{ obj := Œª X, X.val,
  map := Œª _ _ f, f.val,
  map_id' := Œª _ , rfl,
  map_comp' := Œª _ _ _ _ _, rfl }

instance Ext_additive_fst (i : ‚Ñ§) (X : bounded_derived_category A) :
  (((Ext A i).flip.obj X).right_op).additive :=
{ map_add' := begin
    intros Y Z f g, dsimp,
    conv_rhs { rw ‚Üê op_add }, congr' 1, ext e,
    dsimp, rw preadditive.add_comp,
  end }

instance Ext_homological_fst (i : ‚Ñ§) (X : bounded_derived_category A) :
  homological_functor ((Ext A i).flip.obj X).right_op :=
category_theory.triangulated.preadditive_yoneda_op_homological (X‚ü¶i‚üß)

end bounded_derived_category

namespace homological_complex

variables {A}
variables {X Y Z : cochain_complex A ‚Ñ§} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)

noncomputable
def cone.œÄ (w : ‚àÄ i, f.f i ‚â´ g.f i = 0) :
  cone f ‚ü∂ Z :=
{ f := Œª i, biprod.snd ‚â´ g.f i,
  comm' := Œª i j hij, begin
    dsimp at hij, subst j, dsimp [cone.d], rw [if_pos rfl, biprod.lift_snd_assoc],
    ext,
    { simp only [exact.w_assoc, zero_comp, category.assoc, biprod.inl_desc_assoc,
        category.id_comp, w], },
    { simp only [category.assoc, biprod.inr_snd_assoc, biprod.inr_desc_assoc, g.comm], }
  end }

--generalize
@[simps]
noncomputable def kernel : cochain_complex A ‚Ñ§ :=
{ X := Œª i, kernel (f.f i),
  d := Œª i j, kernel.map (f.f i) (f.f j) (X.d i j) (Y.d i j) (f.comm i j),
  shape' := Œª i j hij, by { ext, simp only [kernel.lift_Œπ, zero_comp, X.shape i j hij, comp_zero] },
  d_comp_d' := Œª i j k hij hjk, begin
    ext,
    simp only [category.assoc, kernel.lift_Œπ, kernel.lift_Œπ_assoc, zero_comp, comp_zero, d_comp_d],
  end }

noncomputable def kernel.Œπ : kernel f ‚ü∂ X :=
{ f := Œª i, kernel.Œπ _,
  comm' := Œª i j hij, by simp only [kernel_d, kernel.lift_Œπ] }

open_locale pseudoelement

def cone.œÄ_quasi_iso (w : ‚àÄ i, short_exact (f.f i) (g.f i)) :
  quasi_iso (cone.œÄ f g (Œª i, (w i).exact.w)) :=
{ is_iso := Œª i, begin
    let œÄ := cone.œÄ f g (Œª i, (w i).exact.w),
    have aux : ‚àÄ n, short_exact ((kernel.Œπ œÄ).f n) (œÄ.f n),
    { sorry },
    suffices : ‚àÄ n, is_zero (homology (kernel œÄ) n),
    { exact (six_term_exact_seq (kernel.Œπ œÄ) œÄ aux i (i+1) rfl).is_iso_of_zero_of_zero
        ((this _).eq_of_src _ _) ((this _).eq_of_tgt _ _), },
    intro n,
    refine is_zero_of_iso_of_zero _
      (homology_iso (kernel œÄ) (n-1) n (n+1) (sub_add_cancel _ _) rfl).symm,
    apply is_zero_homology_of_exact,
    rw [abelian.exact_iff, d_comp_d, eq_self_iff_true, true_and],
    apply abelian.pseudoelement.zero_morphism_ext,
    intro a,
    sorry
  end }

end homological_complex
