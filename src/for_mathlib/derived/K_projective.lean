import for_mathlib.homotopy_category_pretriangulated
import for_mathlib.abelian_category
import for_mathlib.derived.homological
import category_theory.abelian.projective
import for_mathlib.homology
import for_mathlib.snake_lemma3
import for_mathlib.les_homology
import for_mathlib.exact_seq3
import for_mathlib.triangle_shift
import for_mathlib.homology_iso
import for_mathlib.projective_replacement
-- import for_mathlib.arrow_preadditive

open category_theory category_theory.limits category_theory.triangulated
open homological_complex

namespace homotopy_category
universes v u
variables {A : Type u} [category.{v} A] [abelian A]

local notation `ùí¶` := homotopy_category A (complex_shape.up ‚Ñ§)
local notation `HH` := homotopy_category.homology_functor A (complex_shape.up ‚Ñ§) 0

class is_acyclic (X : ùí¶) : Prop :=
(cond [] : ‚àÄ i, is_zero ((homotopy_category.homology_functor _ _ i).obj X))

lemma is_acyclic_of_iso {X Y : ùí¶} (e : X ‚âÖ Y) [is_acyclic X] : is_acyclic Y :=
begin
  constructor,
  intros i,
  let e' : (homology_functor A (complex_shape.up ‚Ñ§) i).obj X ‚âÖ
    (homology_functor A (complex_shape.up ‚Ñ§) i).obj Y :=
    functor.map_iso _ e,
  apply is_zero_of_iso_of_zero _ e',
  apply is_acyclic.cond X i,
end

class is_K_projective (X : ùí¶) : Prop :=
(cond : ‚àÄ (Y : ùí¶) [is_acyclic Y] (f : X ‚ü∂ Y), f = 0)

class is_quasi_iso {X Y : ùí¶} (f : X ‚ü∂ Y) : Prop :=
(cond : ‚àÄ i, is_iso ((homotopy_category.homology_functor _ _ i).map f))

-- Move this
instance homology_functor_additive : functor.additive HH := functor.additive.mk $
begin
  rintros X Y ‚ü®f‚ü© ‚ü®g‚ü©,
  dsimp [homotopy_category.homology_functor],
  erw ‚Üê (_root_.homology_functor _ _ _).map_add,
  refl,
  apply_instance,
end

lemma _root_.category_theory.cochain_complex.exact_cone_in_cone_out
  (X Y : cochain_complex A ‚Ñ§) (f : X ‚ü∂ Y) :
  exact ((_root_.homology_functor _ _ 0).map (cone.in f))
    ((_root_.homology_functor _ _ 0).map (cone.out f)) :=
begin
  refine (homological_complex.six_term_exact_seq (cone.in f) (cone.out f) _ 0 1 rfl).pair,
  intro n,
  apply (cone.termwise_split _ _).short_exact,
end

/-
lemma _root_.category_theory.cochain_complex.exact_to_cone_in
  (X Y : cochain_complex A ‚Ñ§) (f : X ‚ü∂ Y) :
  exact ((_root_.homology_functor _ _ 0).map f)
    ((_root_.homology_functor _ _ 0).map (cone.in f)) :=
begin
  sorry
end
-/

section

local attribute [instance] abelian.pseudoelement.hom_to_fun
  abelian.pseudoelement.has_zero abelian.pseudoelement.setoid

lemma _root_.category_theory.abelian.exact_of_neg_right (X Y Z : A) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  [h : exact f g] : exact f (-g) :=
begin
  apply abelian.pseudoelement.exact_of_pseudo_exact,
  split,
  intros a,
  rw ‚Üê abelian.pseudoelement.comp_apply,
  simp,
  intros b hb,
  apply abelian.pseudoelement.pseudo_exact_of_exact.2 b (_ : g b = 0),
  apply_instance,
  rcases b,
  apply abelian.pseudoelement.apply_eq_zero_of_comp_eq_zero g b.hom,
  erw abelian.pseudoelement.pseudo_zero_iff at hb,
  simpa using hb,
end

end

instance homology_functor_homological : homological_functor HH :=
begin
  apply homological_of_rotate,
  intros T hT,
  erw mem_distinguished_iff_exists_iso_cone at hT,
  obtain ‚ü®X,Y,f,‚ü®E‚ü©‚ü© := hT,
  let E' : T.rotate ‚âÖ
    ((neg‚ÇÉ_functor (homotopy_category A (complex_shape.up ‚Ñ§))).obj (cone.triangle‚Çï f)).rotate :=
    ‚ü®E.hom.rotate, E.inv.rotate, _, _‚ü©,
  rotate,
  { ext; dsimp,
    { change (E.hom ‚â´ E.inv).hom‚ÇÇ = _, rw iso.hom_inv_id, refl },
    { change (E.hom ‚â´ E.inv).hom‚ÇÉ = _, rw iso.hom_inv_id, refl },
    { simp only [‚Üê functor.map_comp],
      change (category_theory.shift_functor ùí¶ (1 : ‚Ñ§)).map ((E.hom ‚â´ E.inv).hom‚ÇÅ) = _,
      rw iso.hom_inv_id, refl } },
  { ext; dsimp,
    { change (E.inv ‚â´ E.hom).hom‚ÇÇ = _, rw iso.inv_hom_id, refl },
    { change (E.inv ‚â´ E.hom).hom‚ÇÉ = _, rw iso.inv_hom_id, refl },
    { simp only [‚Üê functor.map_comp],
      change (category_theory.shift_functor ùí¶ (1 : ‚Ñ§)).map ((E.inv ‚â´ E.hom).hom‚ÇÅ) = _,
      rw iso.inv_hom_id, refl } },
  apply homological_of_exists_aux _ _ _ E'.inv,
  apply_instance,
  dsimp,
  simp only [functor.map_neg],
  apply_with category_theory.abelian.exact_of_neg_right { instances := ff },
  apply _root_.category_theory.cochain_complex.exact_cone_in_cone_out,
end .

variable (A)

noncomputable
def homology_shift_iso (i j : ‚Ñ§) :
  category_theory.shift_functor (homotopy_category A (complex_shape.up ‚Ñ§)) i ‚ãô
    homology_functor A (complex_shape.up ‚Ñ§) j ‚âÖ homology_functor A (complex_shape.up ‚Ñ§) (j+i) :=
nat_iso.of_components (Œª (X : ùí¶), homology_shift_obj_iso X.as i j : _)
begin
  intros X Y f,
  rw ‚Üê quotient_map_out f,
  dsimp,
  erw homotopy_category.shift_functor_map_quotient,
  rw ‚Üê homology_functor_map_factors,
  erw (homology_shift_iso A i j).hom.naturality,
  erw ‚Üê homology_functor_map_factors,
  refl
end

noncomputable
def homology_zero_shift_iso (i : ‚Ñ§) :
  category_theory.shift_functor (homotopy_category A (complex_shape.up ‚Ñ§)) i ‚ãô
    homology_functor A (complex_shape.up ‚Ñ§) 0 ‚âÖ homology_functor A (complex_shape.up ‚Ñ§) i :=
homology_shift_iso _ _ _ ‚â™‚â´ (eq_to_iso (by rw zero_add))

variable {A}

lemma is_acyclic_iff (X : ùí¶) :
  (‚àÄ (i : ‚Ñ§), is_zero ((homotopy_category.homology_functor _ _ 0).obj (X‚ü¶i‚üß))) ‚Üî
  is_acyclic X :=
begin
  split,
  { intros h,
    constructor,
    intros i,
    apply is_zero_of_iso_of_zero (h i),
    apply (homology_zero_shift_iso A i).app _ },
  { introsI h i,
    apply is_zero_of_iso_of_zero (is_acyclic.cond _ i),
    apply ((homology_zero_shift_iso A _).app _).symm,
    assumption },
end

lemma is_quasi_iso_iff {X Y : ùí¶} (f : X ‚ü∂ Y) :
  (‚àÄ (i : ‚Ñ§), is_iso ((homotopy_category.homology_functor _ _ 0).map (f‚ü¶i‚üß'))) ‚Üî
  is_quasi_iso f :=
begin
  split,
  { intros h,
    constructor,
    intros i,
    specialize h i,
    have := (homology_zero_shift_iso A i).hom.naturality f,
    rw ‚Üê is_iso.inv_comp_eq at this,
    rw ‚Üê this,
    apply_with is_iso.comp_is_iso { instances := ff },
    apply_instance,
    apply_with is_iso.comp_is_iso { instances := ff },
    exact h,
    apply_instance },
  { introsI h i,
    have := (homology_zero_shift_iso A i).hom.naturality f,
    rw ‚Üê is_iso.eq_comp_inv at this,
    erw this,
    apply_with is_iso.comp_is_iso { instances := ff },
    apply_with is_iso.comp_is_iso { instances := ff },
    apply_instance,
    apply is_quasi_iso.cond,
    apply_instance }
end

/--
If `A ‚Üí B ‚Üí C ‚Üí A[1]` is a distinguished triangle, and `A ‚Üí B` is a quasi-isomorphism,
then `C` is acyclic.
-/
lemma is_acyclic_of_dist_triang_of_is_quasi_iso (T : triangle ùí¶) (hT : T ‚àà dist_triang ùí¶)
  [h : is_quasi_iso T.mor‚ÇÅ] : is_acyclic T.obj‚ÇÉ :=
begin
  let H := homology_functor A (complex_shape.up ‚Ñ§) 0,
  rw ‚Üê is_acyclic_iff,
  intros i,
  let S : triangle ùí¶ := T‚ü¶i‚üß,
  have hS : S ‚àà dist_triang ùí¶,
  { apply pretriangulated.shift_of_dist_triangle, assumption },
  change is_zero (H.obj (S.obj‚ÇÉ)),
  let E : exact_seq A [H.map S.mor‚ÇÅ, H.map S.mor‚ÇÇ, H.map S.mor‚ÇÉ, H.map (S.rotate.mor‚ÇÉ)],
  { apply exact_seq.cons,
    apply homological_functor.cond H _ hS,
    apply exact_seq.cons,
    apply homological_functor.cond H S.rotate,
    apply rotate_mem_distinguished_triangles _ hS,
    rw ‚Üê exact_iff_exact_seq,
    apply homological_functor.cond H S.rotate.rotate,
    apply rotate_mem_distinguished_triangles,
    apply rotate_mem_distinguished_triangles,
    exact hS },
  haveI : is_iso (H.map S.mor‚ÇÅ),
  { have hh := h,
    rw ‚Üê is_quasi_iso_iff at h,
    apply h },
  haveI : is_iso (H.map (S.rotate.mor‚ÇÉ)),
  { dsimp [triangle.rotate],
    rw functor.map_neg,
    let f := _, show is_iso (- f),
    suffices : is_iso f,
    { resetI, use (-(inv f)), split, simp, simp },
    let EE : (category_theory.shift_functor ùí¶ i ‚ãô category_theory.shift_functor ùí¶ (1 : ‚Ñ§)) ‚ãô H ‚âÖ
      homology_functor _ _ (i + 1),
    { refine iso_whisker_right _ _ ‚â™‚â´ homology_zero_shift_iso _ (i + 1),
      refine (shift_functor_add _ _ _).symm },
    suffices : is_iso ((homology_functor _ _ (i+1)).map T.mor‚ÇÅ),
    { have hhh := EE.hom.naturality T.mor‚ÇÅ,
      rw ‚Üê is_iso.eq_comp_inv at hhh,
      dsimp only [functor.comp_map] at hhh,
      dsimp [f],
      rw hhh,
      apply_with is_iso.comp_is_iso { instances := ff },
      apply_with is_iso.comp_is_iso { instances := ff },
      all_goals { apply_instance <|> assumption } },
    apply is_quasi_iso.cond },
  apply is_zero_of_exact_seq_of_is_iso_of_is_iso _ _ _ _ E,
end

lemma is_acyclic_shift (T : ùí¶) [h : is_acyclic T] (i : ‚Ñ§) : is_acyclic (T‚ü¶i‚üß) :=
begin
  rw ‚Üê is_acyclic_iff,
  intros j,
  let H := homology_functor A (complex_shape.up ‚Ñ§) 0,
  let e : H.obj (T‚ü¶i‚üß‚ü¶j‚üß) ‚âÖ (homology_functor A (complex_shape.up ‚Ñ§) (i+j)).obj T :=
    _ ‚â™‚â´ (homology_zero_shift_iso _ (i+j)).app T,
  swap,
  { let e := (iso_whisker_right (shift_functor_add _ i j).symm H).app T,
    refine _ ‚â™‚â´ e,
    refine iso.refl _ },
  apply is_zero_of_iso_of_zero _ e.symm,
  apply is_acyclic.cond,
end

lemma hom_K_projective_bijective {X Y : ùí¶} (P : ùí¶) [is_K_projective P]
  (f : X ‚ü∂ Y) [hf : is_quasi_iso f] : function.bijective (Œª e : P ‚ü∂ X, e ‚â´ f) :=
begin
  /-
  Steps:
  1. Complete `f` to a dist triang `X ‚Üí Y ‚Üí Z ‚Üí X[1]`.
  2. Use LES assoc. to `Hom(P,-)`, proved in `for_mathlib/derived/homological.lean`.
  3. Use lemma above + def of K-projective to see that `Hom(P,Z) = 0`.
  -/
  obtain ‚ü®Z,g,h,hT‚ü© := pretriangulated.distinguished_cocone_triangle _ _ f,
  let T := triangle.mk _ f g h,
  change T ‚àà _ at hT,
  let H : ùí¶ ‚•§ Ab := preadditive_yoneda.flip.obj (opposite.op P),
  have EE : exact_seq Ab [arrow.mk (H.map T.inv_rotate.mor‚ÇÅ), arrow.mk (H.map f), H.map g],
  { apply exact_seq.cons,
    apply homological_functor.cond H T.inv_rotate,
    apply inv_rotate_mem_distinguished_triangles,
    assumption,
    rw ‚Üê exact_iff_exact_seq,
    apply homological_functor.cond H T hT },
  split,
  { intros e‚ÇÅ e‚ÇÇ hh,
    let ee := (EE.extract 0 2).pair,
    rw AddCommGroup.exact_iff at ee,
    dsimp at hh,
    rw [‚Üê sub_eq_zero, ‚Üê preadditive.sub_comp] at hh,
    change _ ‚àà (H.map f).ker at hh,
    rw ‚Üê ee at hh,
    obtain ‚ü®g,hg‚ü© := hh,
    let g' : P ‚ü∂ _ := g,
    haveI : is_acyclic T.inv_rotate.obj‚ÇÅ,
    { change is_acyclic ((T.obj‚ÇÉ)‚ü¶(-1 : ‚Ñ§)‚üß),
      apply_with is_acyclic_shift { instances := ff },
      haveI : is_quasi_iso T.mor‚ÇÅ := hf,
      apply is_acyclic_of_dist_triang_of_is_quasi_iso,
      exact hT },
    have : g' = 0,
    { apply is_K_projective.cond },
    change g' ‚â´ _ = _ at hg,
    rw [this, zero_comp] at hg,
    rw ‚Üê sub_eq_zero,
    exact hg.symm },
  { intros q,
    have : q ‚â´ g = 0,
    { haveI : is_acyclic Z,
      { change is_acyclic T.obj‚ÇÉ,
        apply_with is_acyclic_of_dist_triang_of_is_quasi_iso { instances := ff },
        assumption,
        exact hf },
      apply is_K_projective.cond },
    let ee := (EE.extract 1 3).pair,
    rw AddCommGroup.exact_iff at ee,
    change _ ‚àà (H.map g).ker at this,
    rwa ‚Üê ee at this }
end

variable [enough_projectives A]
noncomputable theory

lemma exists_K_projective_replacement_of_bounded (X : ùí¶)
  (H : ‚àÉ a, ‚àÄ i, a ‚â§ i ‚Üí is_zero (X.as.X i)) :
  ‚àÉ (P : ùí¶) [is_K_projective P] (f : P ‚ü∂ X), is_quasi_iso f :=
begin
  obtain ‚ü®a, H‚ü© := H,
  use projective.replacement X.as a H,
  split,
  { constructor,
    intros Y hY f,
    convert eq_of_homotopy _ _ (projective.null_homotopic_of_projective_to_acyclic f.out a
      (projective.replacement_is_projective X.as a H)
      (projective.replacement_is_bounded X.as a H)
      hY.1),
    simp },
  { use (quotient _ _).map (projective.replacement.hom X.as a H),
    constructor,
    intro i,
    erw ‚Üê homology_functor_map_factors,
    apply_instance }
end

-- Main theorem about existence of K-projective replacements.
-- Perhaps all we need is this for bounded complexes, in which case we should
-- add an additional typeclass parameter here.
theorem exists_K_projective_replacement (X : ùí¶) :
  ‚àÉ (P : ùí¶) [is_K_projective P] (f : P ‚ü∂ X), is_quasi_iso f := sorry

def replace (X : ùí¶) : ùí¶ := (exists_K_projective_replacement X).some

instance (X : ùí¶) : is_K_projective X.replace :=
(exists_K_projective_replacement X).some_spec.some

def œÄ (X : ùí¶) : X.replace ‚ü∂ X :=
(exists_K_projective_replacement X).some_spec.some_spec.some

instance (X : ùí¶) : is_quasi_iso X.œÄ :=
(exists_K_projective_replacement X).some_spec.some_spec.some_spec

def lift {P X Y : ùí¶} [is_K_projective P] (f : P ‚ü∂ Y) (g : X ‚ü∂ Y) [is_quasi_iso g] :
  P ‚ü∂ X :=
((hom_K_projective_bijective P g).2 f).some

@[simp, reassoc]
lemma lift_lifts {P X Y : ùí¶} [is_K_projective P] (f : P ‚ü∂ Y) (g : X ‚ü∂ Y) [is_quasi_iso g] :
  lift f g ‚â´ g = f :=
((hom_K_projective_bijective P g).2 f).some_spec

lemma lift_unique {P X Y : ùí¶} [is_K_projective P] (f : P ‚ü∂ Y) (g : X ‚ü∂ Y) [is_quasi_iso g]
  (e : P ‚ü∂ X) (h : e ‚â´ g = f) : e = lift f g :=
begin
  apply (hom_K_projective_bijective P g).1,
  simpa,
end

lemma lift_ext {P X Y : ùí¶} [is_K_projective P] (g : X ‚ü∂ Y) [is_quasi_iso g]
  (a b : P ‚ü∂ X) (h : a ‚â´ g = b ‚â´ g) : a = b :=
(hom_K_projective_bijective P g).1 h

@[simps]
def Ext0 : ùí¶·µí·µñ ‚•§ ùí¶ ‚•§ Ab :=
{ obj := Œª X, preadditive_yoneda.flip.obj (opposite.op $ X.unop.replace),
  map := Œª X‚ÇÅ X‚ÇÇ f, preadditive_yoneda.flip.map (lift (X‚ÇÇ.unop.œÄ ‚â´ f.unop) X‚ÇÅ.unop.œÄ).op,
  map_id' := begin
    intros X,
    ext Y e,
    dsimp [preadditive_yoneda, preadditive_yoneda_obj],
    change _ ‚â´ e = e,
    simp only [category.comp_id, id_apply],
    convert category.id_comp _,
    symmetry,
    apply lift_unique,
    simp,
  end,
  map_comp' := begin
    intros X‚ÇÅ X‚ÇÇ X‚ÇÉ f g,
    ext Y e,
    dsimp,
    simp only [comp_apply, linear_map.to_add_monoid_hom_coe,
      preadditive_yoneda_obj_map_apply, quiver.hom.unop_op],
    change _ ‚â´ e = _ ‚â´ _ ‚â´ e,
    conv_rhs { rw ‚Üê category.assoc },
    congr' 1,
    symmetry,
    apply lift_unique,
    simp,
  end } .

def Ext (i : ‚Ñ§) : ùí¶·µí·µñ ‚•§ ùí¶ ‚•§ Ab :=
Ext0 ‚ãô (whiskering_left _ _ _).obj (shift_functor _ i)

end homotopy_category
