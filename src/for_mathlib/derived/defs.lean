import for_mathlib.homotopy_category_pretriangulated
import for_mathlib.abelian_category
import category_theory.abelian.projective

noncomputable theory

open category_theory category_theory.limits category_theory.triangulated
open homological_complex

universes v u
variables {A : Type u} [category.{v} A] [abelian A]

namespace homotopy_category

variables {Œπ : Type*} {c : complex_shape Œπ}

local notation `ùí¶` := homotopy_category A c

/-- Say `c` is a complex shape on an index type `Œπ`. An object of `homotopy_category A c`
is acyclic if the homology of this object is 0 at all indices `i : Œπ`. -/
class is_acyclic (X : ùí¶) : Prop :=
(cond [] : ‚àÄ i, is_zero ((homotopy_category.homology_functor _ _ i).obj X))

lemma is_acyclic_of_iso {X Y : ùí¶} (e : X ‚âÖ Y) [is_acyclic X] : is_acyclic Y :=
begin
  constructor,
  intros i,
  let e' : (homology_functor A c i).obj X ‚âÖ (homology_functor A c i).obj Y :=
    functor.map_iso _ e,
  apply is_zero_of_iso_of_zero _ e',
  apply is_acyclic.cond X i,
end

/-- An object of `homotopy_category A c` is "K-projective" if the only map from
that object to any acyclic object is the zero map. -/
class is_K_projective (X : ùí¶) : Prop :=
(cond [] : ‚àÄ (Y : ùí¶) [is_acyclic Y] (f : X ‚ü∂ Y), f = 0)

/-- A morphism in the homotopy category is a quasi-isomorphism if it
induces isomorphisms on all homology groups. -/
class is_quasi_iso {X Y : ùí¶} (f : X ‚ü∂ Y) : Prop :=
(cond [] : ‚àÄ i, is_iso ((homotopy_category.homology_functor _ _ i).map f))

end homotopy_category

namespace homotopy_category

local notation `ùí¶` := homotopy_category A (complex_shape.up ‚Ñ§)
local notation `HH` := homotopy_category.homology_functor A (complex_shape.up ‚Ñ§) 0

/-- An object `(C‚Å±)` of `homotopy_category A ‚Ñ§‚Üë` is bounded_by `n : ‚Ñï` if the all the objects
`C‚Å±` for `i ‚â• n` in the complex are zero -/
def bounded_by (X : ùí¶) (n : ‚Ñ§) : Prop :=
‚àÄ i, n ‚â§ i ‚Üí is_zero (X.as.X i)

class is_bounded_above (X : ùí¶) : Prop  :=
(cond [] : ‚àÉ a : ‚Ñ§, X.bounded_by a)

class is_uniformly_bounded_above {Œ± : Type*} (X : Œ± ‚Üí ùí¶) : Prop :=
(cond [] : ‚àÉ n : ‚Ñ§, ‚àÄ a, (X a).bounded_by n)

instance is_bounded_above_of_is_uniformly_bounded_above {Œ± : Type*} (X : Œ± ‚Üí ùí¶)
  [is_uniformly_bounded_above X] (a) : is_bounded_above (X a) :=
begin
  obtain ‚ü®n,hn‚ü© := is_uniformly_bounded_above.cond X,
  exact ‚ü®‚ü®n, hn a‚ü©‚ü©,
end

end homotopy_category

variables (A)

/-- The category `bounded_homotopy_category A` has objects the complexes indexed by `‚Ñ§‚Üë`
which are bounded above, i.e. the objects in the complex are equal to zero for sufficiently
large indices. Morphisms are homotopy classes of maps. -/
structure bounded_homotopy_category :=
(val : homotopy_category A (complex_shape.up ‚Ñ§))
[bdd : homotopy_category.is_bounded_above val]
