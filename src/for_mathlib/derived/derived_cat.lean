import for_mathlib.derived.K_projective

open category_theory

variables (A : Type*) [category A] [abelian A] [enough_projectives A]

structure bounded_derived_category :=
(val : bounded_homotopy_category A)
[proj : homotopy_category.is_K_projective val.val]

variable {A}
@[ext]
structure bounded_derived_category_hom (X Y : bounded_derived_category A) :=
(val : X.val ‚ü∂ Y.val)

namespace bounded_derived_category

instance (X : bounded_derived_category A) : homotopy_category.is_K_projective X.val.val := X.proj

@[simps]
instance : category (bounded_derived_category A) :=
{ hom := Œª X Y, bounded_derived_category_hom X Y,
  id := Œª X, ‚ü®ùüô X.val‚ü©,
  comp := Œª X Y Z f g, ‚ü®f.val ‚â´ g.val‚ü©,
  id_comp' := Œª X Y f, by { ext1, apply category.id_comp _ },
  comp_id' := Œª X Y f, by { ext1, apply category.comp_id _ },
  assoc' := Œª X Y Z W f g h, by { ext1, apply category.assoc _ _ _ } }

variable (A)
def forget : bounded_derived_category A ‚•§ bounded_homotopy_category A :=
{ obj := Œª X, X.val,
  map := Œª X Y f, f.val, }

variable {A}

@[simp] lemma forget_map_mk {X Y : bounded_derived_category A} (f : X.val ‚ü∂ Y.val) :
  (forget A).map { val := f } = f :=
rfl

instance : faithful (forget A) := {}

instance : full (forget A) :=
{ preimage := Œª X Y f, ‚ü®f‚ü©, }

variable {A}
@[simps]
def of (X : bounded_homotopy_category A) [homotopy_category.is_K_projective X.val] :
  bounded_derived_category A := { val := X }

@[simp] lemma forget_obj_of {X : bounded_homotopy_category A} [homotopy_category.is_K_projective X.val] :
  (forget A).obj (of X) = X :=
rfl

@[simps]
def mk_iso {X Y : bounded_derived_category A} (i : (forget A).obj X ‚âÖ (forget A).obj Y) :
  X ‚âÖ Y :=
{ hom := ‚ü®i.hom‚ü©,
  inv := ‚ü®i.inv‚ü©,
  hom_inv_id' := by { ext1, simp },
  inv_hom_id' := by { ext1, simp } }

variable (A)
@[simps]
noncomputable def localization_functor :
  bounded_homotopy_category A ‚•§ bounded_derived_category A :=
{ obj := Œª X, of $ X.replace,
  map := Œª X Y f, ‚ü®bounded_homotopy_category.lift (X.œÄ ‚â´ f) Y.œÄ‚ü©,
  map_id' := begin
    intros X, symmetry, ext1, apply bounded_homotopy_category.lift_unique,
    dsimp, simp only [category.id_comp, category.comp_id],
  end,
  map_comp' := begin
    intros X Y Z f g,
    symmetry, ext1, apply bounded_homotopy_category.lift_unique,
    dsimp, simp only [category.assoc, bounded_homotopy_category.lift_lifts,
      bounded_homotopy_category.lift_lifts_assoc],
  end }

open homotopy_category

lemma is_iso_localization_functor_map_of_is_quasi_iso
  (X Y : bounded_homotopy_category A) (f : X ‚ü∂ Y)
  [is_quasi_iso f] : is_iso ((localization_functor _).map f) :=
begin
  use bounded_homotopy_category.lift Y.œÄ (X.œÄ ‚â´ f),
  split,
  { ext1, dsimp,
    apply bounded_homotopy_category.lift_ext (X.œÄ ‚â´ f),
    simp only [category.assoc, bounded_homotopy_category.lift_lifts, category.comp_id,
      category.id_comp],
    apply_instance },
  { ext1, dsimp,
    apply bounded_homotopy_category.lift_ext Y.œÄ,
    simp only [category.assoc, bounded_homotopy_category.lift_lifts, category.comp_id,
      category.id_comp],
    apply_instance }
end

open_locale zero_object
open category_theory.limits

-- MOVE THIS
lemma zero_is_K_projective {X : bounded_homotopy_category A} (hX : is_zero X) :
  is_K_projective X.val :=
begin
  constructor,
  introsI Y _ f, apply (bounded_homotopy_category.zero_val hX).eq_of_src f
end

protected noncomputable
def zero : bounded_derived_category A :=
{ val := bounded_homotopy_category.zero,
  proj := zero_is_K_projective _ $ bounded_homotopy_category.is_zero_zero }

protected lemma is_zero_zero : limits.is_zero (bounded_derived_category.zero A) :=
{ unique_to := Œª Y, nonempty.intro $ unique.mk ‚ü®‚ü®0‚ü©‚ü© $ Œª a,
    by { ext1, cases a, apply bounded_homotopy_category.is_zero_zero.eq_of_src },
  unique_from := Œª Y, nonempty.intro $ unique.mk ‚ü®‚ü®0‚ü©‚ü© $ Œª a,
    by { ext1, cases a, apply bounded_homotopy_category.is_zero_zero.eq_of_tgt } }

instance has_zero_object : limits.has_zero_object (bounded_derived_category A) :=
‚ü®‚ü®bounded_derived_category.zero A, bounded_derived_category.is_zero_zero A‚ü©‚ü©

@[simps]
def has_shift_functor (i : ‚Ñ§) : bounded_derived_category A ‚•§ bounded_derived_category A:=
{ obj := Œª X,
  { val := X.val‚ü¶i‚üß,
    proj := by { dsimp, apply_instance } },
  map := Œª X Y f, ‚ü®f.val‚ü¶i‚üß'‚ü©,
  map_id' := Œª X, by { ext1, dsimp, apply category_theory.functor.map_id },
  map_comp' := Œª X Y Z f g, by { ext1, dsimp, apply category_theory.functor.map_comp } }

@[simps] def has_shift_functor_forget (m : ‚Ñ§) :
  has_shift_functor A m ‚ãô forget A ‚âÖ forget A ‚ãô shift_functor (bounded_homotopy_category A) m :=
begin
  fapply nat_iso.of_components,
  { exact Œª X, bounded_homotopy_category.mk_iso (by refl), },
  { intros,
    erw [category.id_comp, category.comp_id],
    refl, },
end

noncomputable instance : has_shift (bounded_derived_category A) ‚Ñ§ :=
has_shift_of_fully_faithful (forget A) (has_shift_functor A) (has_shift_functor_forget A)

@[simp]
lemma shift_functor_val (m : ‚Ñ§) {X Y : bounded_derived_category A} (f : X ‚ü∂ Y) :
  ((shift_functor (bounded_derived_category A) m).map f).val =
    (shift_functor (bounded_homotopy_category A) m).map f.val :=
rfl

@[simps]
noncomputable
def shift_functor_forget (m : ‚Ñ§) :
  shift_functor (bounded_derived_category A) m ‚ãô forget A ‚âÖ
    forget A ‚ãô shift_functor (bounded_homotopy_category A) m :=
has_shift_of_fully_faithful_comm
  (forget A) (shift_functor (bounded_derived_category A)) (has_shift_functor_forget A) m

@[simps]
noncomputable
def shift_functor_localization_functor (m : ‚Ñ§) :
  shift_functor (bounded_homotopy_category A) m ‚ãô localization_functor A ‚âÖ
    localization_functor A ‚ãô shift_functor (bounded_derived_category A) m :=
begin
  fapply nat_iso.of_components,
  { intros,
    apply mk_iso,
    refine _ ‚â™‚â´ ((shift_functor_forget A m).app _).symm,
    dsimp,
    exact
    { hom := bounded_homotopy_category.lift ((shift_functor (bounded_homotopy_category A) m).obj X).œÄ
        ((shift_functor (bounded_homotopy_category A) m).map X.œÄ),
      inv := bounded_homotopy_category.lift ((shift_functor (bounded_homotopy_category A) m).map X.œÄ)
        ((shift_functor (bounded_homotopy_category A) m).obj X).œÄ, }, },
  { intros, ext, dsimp,
    simp only [bounded_homotopy_category.lift_comp_lift_self_assoc, category_theory.category.assoc],
    erw [category.comp_id, category.id_comp],
    simp [bounded_homotopy_category.shift_functor_map_lift], },
end

-- TODO replace this by pulling back a preadditive instance along `forget`?
@[simps]
instance preadditive : preadditive (bounded_derived_category A) :=
{ hom_group := Œª P Q,
  { add := Œª f g, ‚ü®f.val + g.val‚ü©,
    add_assoc := by { intros, ext, apply add_assoc },
    zero := ‚ü®0‚ü©,
    zero_add := by { intros, ext, apply zero_add },
    add_zero := by { intros, ext, apply add_zero },
    nsmul := Œª n f, ‚ü®n ‚Ä¢ f.val‚ü©,
    nsmul_zero' := by { intros f, ext, refine add_comm_monoid.nsmul_zero' f.val, },
    nsmul_succ' := by { intros n f, ext, exact add_comm_monoid.nsmul_succ' _ f.val },
    neg := Œª f, ‚ü®-f.val‚ü©,
    sub := Œª f g, ‚ü®f.val - g.val‚ü©,
    sub_eq_add_neg := by { intros, ext, apply sub_eq_add_neg },
    zsmul := Œª n f, ‚ü®n ‚Ä¢ f.val‚ü©,
    zsmul_zero' := by { intros f, ext, apply add_comm_group.zsmul_zero' f.val },
    zsmul_succ' := by { intros n f, ext, apply add_comm_group.zsmul_succ' _ f.val },
    zsmul_neg' := by { intros n f, ext, apply add_comm_group.zsmul_neg' _ f.val },
    add_left_neg := by { intros, ext, apply add_left_neg },
    add_comm := by { intros, ext, apply add_comm } },
  add_comp' :=
    by { intros P Q R f‚ÇÅ f‚ÇÇ g, ext, apply preadditive.add_comp _ _ _ f‚ÇÅ.val f‚ÇÇ.val g.val },
  comp_add' :=
    by { intros P Q R f g‚ÇÅ g‚ÇÇ, ext, apply preadditive.comp_add _ _ _ f.val g‚ÇÅ.val g‚ÇÇ.val } }

instance additive (n : ‚Ñ§) : (shift_functor (bounded_derived_category A) n).additive :=
{ map_add' := begin
    intros P Q f g,
    ext1,
    dsimp,
    erw ‚Üê (shift_functor (bounded_homotopy_category A) n).map_add,
  end }

variable (A)
@[simps]
noncomputable def forget_triangulated_functor_struct :
  triangulated.pretriangulated.triangulated_functor_struct
    (bounded_derived_category A) (bounded_homotopy_category A) :=
{ to_functor := forget A,
  comm_shift := nat_iso.of_components (Œª X, by refl) (by tidy), }

variable {A}
@[simps]
def lift {C : Type*} [category C] (F : bounded_homotopy_category A ‚•§ C) :
  bounded_derived_category A ‚•§ C :=
{ obj := Œª X, F.obj X.val,
  map := Œª X Y f, F.map f.val,
  map_id' := Œª X, F.map_id _,
  map_comp' := Œª X Y Z f g, F.map_comp _ _ }

noncomputable
def localize_lift {C : Type*} [category C]
  (F : bounded_homotopy_category A ‚•§ C)
  [‚àÄ (X Y : bounded_homotopy_category A) (f : X ‚ü∂ Y)
    [h : is_quasi_iso f], is_iso (F.map f)] :
  localization_functor A ‚ãô lift F ‚âÖ F :=
nat_iso.of_components
(Œª X, as_iso $ F.map X.œÄ)
begin
  intros X Y f,
  dsimp,
  simp only [‚Üê F.map_comp],
  congr' 1,
  rw bounded_homotopy_category.lift_lifts,
end

@[simp, reassoc] lemma œÄ_lift_id_œÄ (X : bounded_derived_category A) :
  X.val.œÄ ‚â´ bounded_homotopy_category.lift (ùüô X.val) X.val.œÄ = ùüô X.val.replace :=
begin
  refine bounded_homotopy_category.lift_ext X.val.œÄ _ _ _,
  rw [category.assoc, bounded_homotopy_category.lift_lifts, category.id_comp, category.comp_id],
end

@[simps]
noncomputable
def localization_iso (X : bounded_derived_category A) :
  (localization_functor A).obj X.val ‚âÖ X :=
{ hom := ‚ü®X.val.œÄ‚ü©,
  inv := ‚ü®bounded_homotopy_category.lift (ùüô _) X.val.œÄ‚ü©, }

noncomputable
def lift_unique {C : Type*} [category C]
  (F : bounded_homotopy_category A ‚•§ C)
  [‚àÄ (X Y : bounded_homotopy_category A) (f : X ‚ü∂ Y)
    [h : is_quasi_iso f], is_iso (F.map f)]
  (G : bounded_derived_category A ‚•§ C)
  (e : F ‚âÖ localization_functor A ‚ãô G) :
  lift F ‚âÖ G :=
nat_iso.of_components
(Œª X, e.app X.val ‚â™‚â´ G.map_iso (localization_iso _))
begin
  intros X Y f,
  simp only [lift_map, iso.trans_hom, iso.app_hom, functor.map_iso_hom, nat_trans.naturality_assoc,
    functor.comp_map, category.assoc, nat_iso.cancel_nat_iso_hom_left],
  rw [‚Üê functor.map_comp, ‚Üê functor.map_comp],
  congr' 1,
  ext,
  simp only [category_theory.category_comp_val, localization_functor_map_val,
    localization_iso_hom_val, bounded_homotopy_category.lift_lifts],
end

open category_theory.triangulated

variable {A}
@[simps obj‚ÇÅ obj‚ÇÇ obj‚ÇÉ mor‚ÇÅ mor‚ÇÇ mor‚ÇÉ]
noncomputable
def replace_triangle (S : triangle (bounded_homotopy_category A)) :
  triangle (bounded_derived_category A) :=
{ obj‚ÇÅ := of $ S.obj‚ÇÅ.replace,
  obj‚ÇÇ := of $ S.obj‚ÇÇ.replace,
  obj‚ÇÉ := of $ S.obj‚ÇÉ.replace,
  mor‚ÇÅ := ‚ü®bounded_homotopy_category.lift (S.obj‚ÇÅ.œÄ ‚â´ S.mor‚ÇÅ) S.obj‚ÇÇ.œÄ‚ü©,
  mor‚ÇÇ := ‚ü®bounded_homotopy_category.lift (S.obj‚ÇÇ.œÄ ‚â´ S.mor‚ÇÇ) S.obj‚ÇÉ.œÄ‚ü©,
  mor‚ÇÉ := begin
    haveI : is_quasi_iso
      ((shift_functor (bounded_homotopy_category A) (1 : ‚Ñ§)).map S.obj‚ÇÅ.œÄ) :=
    by { change is_quasi_iso ((S.obj‚ÇÅ.œÄ)‚ü¶(1 : ‚Ñ§)‚üß'), by apply_instance }, -- WAT?
    exact ‚ü®bounded_homotopy_category.lift (S.obj‚ÇÉ.œÄ ‚â´ S.mor‚ÇÉ) (S.obj‚ÇÅ.œÄ‚ü¶(1 : ‚Ñ§)‚üß')‚ü©,
  end }

@[simps]
noncomputable
def replace_triangle_map {S T : triangle (bounded_homotopy_category A)} (f : S ‚ü∂ T) :
  replace_triangle S ‚ü∂ replace_triangle T :=
{ hom‚ÇÅ := ‚ü®bounded_homotopy_category.lift (S.obj‚ÇÅ.œÄ ‚â´ f.hom‚ÇÅ) T.obj‚ÇÅ.œÄ‚ü©,
  hom‚ÇÇ := ‚ü®bounded_homotopy_category.lift (S.obj‚ÇÇ.œÄ ‚â´ f.hom‚ÇÇ) T.obj‚ÇÇ.œÄ‚ü©,
  hom‚ÇÉ := ‚ü®bounded_homotopy_category.lift (S.obj‚ÇÉ.œÄ ‚â´ f.hom‚ÇÉ) T.obj‚ÇÉ.œÄ‚ü©,
  comm‚ÇÅ' := by { ext, dsimp, simp only [triangle_morphism.comm‚ÇÅ, category.assoc,
    bounded_homotopy_category.lift_comp_lift_comp], },
  comm‚ÇÇ' := by { ext, dsimp, simp only [triangle_morphism.comm‚ÇÇ, category.assoc,
    bounded_homotopy_category.lift_comp_lift_comp], },
  comm‚ÇÉ' := begin
    ext, dsimp,
    rw [bounded_homotopy_category.shift_functor_map_lift, category_theory.functor.map_comp,
      bounded_homotopy_category.lift_comp_lift_comp, bounded_homotopy_category.lift_comp_lift_comp,
      category.assoc, triangle_morphism.comm‚ÇÉ, category.assoc],
  end, }

.

lemma replace_triangle_map_id (X : triangle (bounded_homotopy_category A)) :
  replace_triangle_map (ùüô X) = ùüô (replace_triangle X) :=
by tidy

lemma replace_triangle_map_comp {X Y Z : triangle (bounded_homotopy_category A)}
  (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  replace_triangle_map (f ‚â´ g) = replace_triangle_map f ‚â´ replace_triangle_map g :=
by ext; tidy

noncomputable
def replace_triangle' : triangle (bounded_homotopy_category A) ‚•§ triangle (bounded_derived_category A) :=
{ obj := replace_triangle,
  map := Œª S T f, replace_triangle_map f,
  map_id' := replace_triangle_map_id,
  map_comp' := Œª X Y Z f g, replace_triangle_map_comp f g, }

attribute [simps obj_obj‚ÇÅ obj_obj‚ÇÇ obj_obj‚ÇÉ obj_mor‚ÇÅ obj_mor‚ÇÇ obj_mor‚ÇÉ] replace_triangle'
attribute [simps map_hom‚ÇÅ map_hom‚ÇÇ map_hom‚ÇÉ] replace_triangle'

noncomputable
def replace_triangle_rotate (S : triangle (bounded_homotopy_category A)) :
  (replace_triangle S).rotate ‚âÖ replace_triangle S.rotate :=
begin
  fapply triangle.iso.of_components,
  exact iso.refl _,
  exact iso.refl _,
  exact ((shift_functor_localization_functor A 1).app S.obj‚ÇÅ).symm,
  { ext, dsimp, simp, },
  { ext, dsimp, erw [category.id_comp, category.id_comp], simp, },
  { ext, dsimp,
    simp only [bounded_homotopy_category.lift_neg, bounded_homotopy_category.lift_comp_lift_comp,
      preadditive.comp_neg, preadditive.neg_comp, neg_inj, category.assoc,
      category_theory.functor.map_id],
   erw [category.id_comp, category.comp_id],
   simp [bounded_homotopy_category.shift_functor_map_lift], },
end

@[simps]
noncomputable def forget_replace_triangle (S : triangle (bounded_homotopy_category A)) :
  (forget_triangulated_functor_struct A).map_triangle.obj (replace_triangle S) ‚âÖ
    bounded_homotopy_category.replace_triangle S :=
begin
  fapply triangle.iso.of_components,
  apply iso.refl _,
  apply iso.refl _,
  apply iso.refl _,
  all_goals { dsimp, simp, },
end

variable (A)

def pretriangulated_distinguished_triangles :=
 { T |
    ‚àÉ (S : triangle (bounded_homotopy_category A))
      (hS : S ‚àà dist_triang (bounded_homotopy_category A))
      (f : T ‚âÖ replace_triangle S), true }

variable {A}

lemma isomorphic_distinguished (T‚ÇÅ : triangle (bounded_derived_category A))
  (m : T‚ÇÅ ‚àà pretriangulated_distinguished_triangles A)
  (T‚ÇÇ : triangle (bounded_derived_category A)) (i : T‚ÇÇ ‚âÖ T‚ÇÅ) :
  T‚ÇÇ ‚àà pretriangulated_distinguished_triangles A :=
begin
  obtain ‚ü®S‚ÇÅ, hS‚ÇÅ, f‚ÇÅ, hf‚ÇÅ‚ü© := m,
  exact ‚ü®S‚ÇÅ, hS‚ÇÅ, i ‚â™‚â´ f‚ÇÅ, trivial‚ü©,
end

lemma forget_replace_triangle_distinguished (S : triangle (bounded_homotopy_category A))
  (m : S ‚àà dist_triang (bounded_homotopy_category A)) :
  (forget_triangulated_functor_struct A).map_triangle.obj (replace_triangle S) ‚àà dist_triang (bounded_homotopy_category A) :=
pretriangulated.isomorphic_distinguished
  _ (bounded_homotopy_category.distinguished_replace_triangle S m)
  _ (forget_replace_triangle S)

lemma forget_distinguished_of_distinguished
  {T : triangle (bounded_derived_category A)} (m : T ‚àà pretriangulated_distinguished_triangles A) :
  (forget_triangulated_functor_struct A).map_triangle.obj T ‚àà dist_triang (bounded_homotopy_category A) :=
begin
  obtain ‚ü®S, hS, f, -‚ü© := m,
  exact pretriangulated.isomorphic_distinguished _ (forget_replace_triangle_distinguished _ hS)
    _ ((forget_triangulated_functor_struct A).map_triangle.map_iso f),
end

lemma pretriangulated_contractible_distinguished (X : bounded_derived_category A) :
  contractible_triangle (bounded_derived_category A) X ‚àà
    pretriangulated_distinguished_triangles A :=
begin
  refine ‚ü®contractible_triangle _ X.val, pretriangulated.contractible_distinguished _, ‚ü®_, trivial‚ü©‚ü©,
  symmetry,
  fapply triangle.iso.of_components,
  exact localization_iso X,
  exact localization_iso X,
  refine _ ‚â™‚â´ localization_iso 0,
  { dsimp,
    refine (localization_functor _).map_iso _,
    refine ‚ü®0,0,_,_‚ü©,
    simp only [eq_iff_true_of_subsingleton],
    simp only [zero_comp, auto_param_eq],
    erw ‚Üê (forget A).map_id,
    simp only [id_zero, functor.map_zero] },
  { ext,
    dsimp,
    simp only [bounded_homotopy_category.lift_lifts] },
  { ext,
    dsimp,
    simp only [bounded_homotopy_category.lift_lifts, category.assoc, comp_zero] },
  { ext,
    dsimp,
    simp only [bounded_homotopy_category.lift_lifts, comp_zero] },
end

@[simp]
lemma shift_functor_map_val (m : ‚Ñ§) {X Y : bounded_derived_category A} (f : X ‚ü∂ Y) :
  ((shift_functor (bounded_derived_category A) m).map f).val =
    (shift_functor (bounded_homotopy_category A) m).map f.val :=
rfl

lemma pretriangulated_distinguished_cocone_triangle
  {X Y : bounded_derived_category A}
  (f : X ‚ü∂ Y) :
  ‚àÉ (Z : bounded_derived_category A) (g : Y ‚ü∂ Z)
    (h : Z ‚ü∂ (shift_functor (bounded_derived_category A) 1).obj X),
    triangle.mk (bounded_derived_category A) f g h ‚àà
      pretriangulated_distinguished_triangles A :=
begin
  obtain ‚ü®Z, g, h, m‚ü© := pretriangulated.distinguished_cocone_triangle _ _ f.val,
  use (localization_functor A).obj Z,
  use (localization_iso Y).inv ‚â´ (localization_functor A).map g,
  refine ‚ü®(localization_functor A).map (h ‚â´ eq_to_hom (by refl)) ‚â´ (localization_iso _).hom, _‚ü©,
  refine ‚ü®_, m, ‚ü®_, trivial‚ü©‚ü©,
  symmetry,
  fapply triangle.iso.of_components,
  { exact localization_iso _, },
  { exact localization_iso _, },
  { exact iso.refl _, },
  { ext, dsimp, simp only [bounded_homotopy_category.lift_lifts], },
  { ext, dsimp,
    simp only [category.comp_id, bounded_derived_category.œÄ_lift_id_œÄ_assoc], },
  { ext, dsimp,
    simp only [category.comp_id, category.id_comp, bounded_homotopy_category.lift_lifts], },
end

lemma rotate_distinguished_triangle (T : triangle (bounded_derived_category A)) :
  T ‚àà pretriangulated_distinguished_triangles A ‚Üî
    T.rotate ‚àà pretriangulated_distinguished_triangles A :=
begin
  split,
  { rintro ‚ü®S, hS, f, -‚ü©,
    use S.rotate,
    refine ‚ü®pretriangulated.rot_of_dist_triangle _ _ hS, _, trivial‚ü©,
    exact (rotate _).map_iso f ‚â™‚â´ replace_triangle_rotate _, },
  { rintro ‚ü®S, hS, f, -‚ü©,
    use S.inv_rotate,
    refine ‚ü®pretriangulated.inv_rot_of_dist_triangle _ _ hS, _, trivial‚ü©,

    apply (iso_equiv_of_fully_faithful (rotate (bounded_derived_category A))).inv_fun,
    refine f ‚â™‚â´ _ ‚â™‚â´ (replace_triangle_rotate _).symm,
    apply replace_triangle'.map_iso,
    exact (triangle_rotation _).counit_iso.symm.app S, },
end

lemma complete_distinguished_triangle_morphism (T‚ÇÅ T‚ÇÇ : triangle (bounded_derived_category A))
    (m‚ÇÅ : T‚ÇÅ ‚àà pretriangulated_distinguished_triangles A)
    (m‚ÇÇ : T‚ÇÇ ‚àà pretriangulated_distinguished_triangles A)
    (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ)
    (comm : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ) :
      (‚àÉ (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ), T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ ‚àß
        T‚ÇÅ.mor‚ÇÉ ‚â´ (shift_functor (bounded_derived_category A) 1).map a = c ‚â´ T‚ÇÇ.mor‚ÇÉ) :=
begin
  -- We work formally, just using the fact this is true in the bounded homotopy category,
  -- without needing to care why.
  obtain ‚ü®c', h1, h2‚ü© := pretriangulated.complete_distinguished_triangle_morphism
    ((forget_triangulated_functor_struct A).map_triangle.obj T‚ÇÅ)
    ((forget_triangulated_functor_struct A).map_triangle.obj T‚ÇÇ)
    (forget_distinguished_of_distinguished m‚ÇÅ)
    (forget_distinguished_of_distinguished m‚ÇÇ) ((forget A).map a) ((forget A).map b)
    (congr_arg bounded_derived_category_hom.val comm),
  use c',
  dsimp at h1 h2,
  split,
  { apply (forget A).map_injective,
    simpa only [(forget A).map_comp] using h1, },
  { apply (forget A).map_injective,
    simp only [category_theory.category.comp_id] at h2,
    simp only [(forget A).map_comp],
    exact h2, },
end

variable (A)

instance pretriangulated : triangulated.pretriangulated (bounded_derived_category A) :=
{ distinguished_triangles := pretriangulated_distinguished_triangles A,
  isomorphic_distinguished := isomorphic_distinguished,
  contractible_distinguished := pretriangulated_contractible_distinguished,
  distinguished_cocone_triangle := Œª X Y f, pretriangulated_distinguished_cocone_triangle f,
  rotate_distinguished_triangle := rotate_distinguished_triangle,
  complete_distinguished_triangle_morphism := complete_distinguished_triangle_morphism, }

variable (A)
noncomputable
def Ext (n : ‚Ñ§) : (bounded_derived_category A)·µí·µñ ‚•§ bounded_derived_category A ‚•§ Ab :=
functor.flip $ shift_functor _ n ‚ãô preadditive_yoneda

@[simp]
lemma Ext_obj_obj (n : ‚Ñ§) (X : (bounded_derived_category A)·µí·µñ) (Y : bounded_derived_category A) :
  ((Ext A n).obj X).obj Y = AddCommGroup.of (X.unop ‚ü∂ Y‚ü¶n‚üß) := rfl

@[simp]
lemma Ext_map_app_apply (n : ‚Ñ§) {X Y : (bounded_derived_category A)·µí·µñ}
  (f : X ‚ü∂ Y) (Z : bounded_derived_category A) (e : ((Ext A n).obj X).obj Z) :
  ((Ext A n).map f).app Z e = f.unop ‚â´ e := rfl

@[simp]
lemma Ext_obj_map (n : ‚Ñ§) (X : (bounded_derived_category A)·µí·µñ) {Y Z : bounded_derived_category A}
  (f : Y ‚ü∂ Z) (e : ((Ext A n).obj X).obj Y) : ((Ext A n).obj X).map f e =
  e ‚â´ f‚ü¶n‚üß' := rfl

end bounded_derived_category

/-
0 ‚Üí A ‚Üí B ‚Üí C ‚Üí 0

A -f‚Üí B ‚Üí Cone(f) ‚Üí A[1]

Canonical Cone(f) ‚Üí C quasi iso

-/
