import for_mathlib.derived.K_projective

open category_theory
variables (A : Type*) [category A] [abelian A] [enough_projectives A]

structure bounded_derived_category :=
(val : bounded_homotopy_category A)
[proj : homotopy_category.is_K_projective val.val]

variable {A}
@[ext]
structure bounded_derived_category_hom (X Y : bounded_derived_category A) :=
(val : X.val ‚ü∂ Y.val)

namespace bounded_derived_category

instance (X : bounded_derived_category A) : homotopy_category.is_K_projective X.val.val := X.proj

@[simps]
instance : category (bounded_derived_category A) :=
{ hom := Œª X Y, bounded_derived_category_hom X Y,
  id := Œª X, ‚ü®ùüô X.val‚ü©,
  comp := Œª X Y Z f g, ‚ü®f.val ‚â´ g.val‚ü©,
  id_comp' := Œª X Y f, by { ext1, apply category.id_comp _ },
  comp_id' := Œª X Y f, by { ext1, apply category.comp_id _ },
  assoc' := Œª X Y Z W f g h, by { ext1, apply category.assoc _ _ _ } }

variable {A}
@[simps]
def of (X : bounded_homotopy_category A) [homotopy_category.is_K_projective X.val] :
  bounded_derived_category A := { val := X }

variable (A)
@[simps]
noncomputable def localization_functor :
  bounded_homotopy_category A ‚•§ bounded_derived_category A :=
{ obj := Œª X, of $ X.replace,
  map := Œª X Y f, ‚ü®bounded_homotopy_category.lift (X.œÄ ‚â´ f) Y.œÄ‚ü©,
  map_id' := begin
    intros X, symmetry, ext1, apply bounded_homotopy_category.lift_unique,
    dsimp, simp only [category.id_comp, category.comp_id],
  end,
  map_comp' := begin
    intros X Y Z f g,
    symmetry, ext1, apply bounded_homotopy_category.lift_unique,
    dsimp, simp only [category.assoc, bounded_homotopy_category.lift_lifts,
      bounded_homotopy_category.lift_lifts_assoc],
  end }

open homotopy_category

lemma is_iso_localization_functor_map_of_is_quasi_iso
  (X Y : bounded_homotopy_category A) (f : X ‚ü∂ Y)
  [is_quasi_iso f] : is_iso ((localization_functor _).map f) :=
begin
  use bounded_homotopy_category.lift Y.œÄ (X.œÄ ‚â´ f),
  split,
  { ext1, dsimp,
    apply bounded_homotopy_category.lift_ext (X.œÄ ‚â´ f),
    simp only [category.assoc, bounded_homotopy_category.lift_lifts, category.comp_id,
      category.id_comp],
    apply_instance },
  { ext1, dsimp,
    apply bounded_homotopy_category.lift_ext Y.œÄ,
    simp only [category.assoc, bounded_homotopy_category.lift_lifts, category.comp_id,
      category.id_comp],
    apply_instance }
end

local attribute [instance] limits.has_zero_object.has_zero

-- MOVE THIS
instance zero_is_K_projective : is_K_projective (0 : bounded_homotopy_category A).val :=
begin
  constructor,
  introsI Y _ f, ext,
end

noncomputable
instance has_zero_object : limits.has_zero_object (bounded_derived_category A) :=
{ zero := of 0,
  unique_to := Œª X,
  { default := ‚ü®0‚ü©,
    uniq := Œª a, by { ext1, cases a, dsimp at *, apply limits.has_zero_object.from_zero_ext } },
  unique_from := Œª X,
  { default := ‚ü®0‚ü©,
    uniq := Œª a, by { ext1, cases a, dsimp at *, apply limits.has_zero_object.to_zero_ext } } }

noncomputable
instance has_shift : has_shift (bounded_derived_category A) ‚Ñ§ := has_shift_mk _ _ $
{ F := Œª i,
  { obj := Œª X,
    { val := X.val‚ü¶i‚üß,
      proj := by { dsimp, apply_instance } },
    map := Œª X Y f, ‚ü®f.val‚ü¶i‚üß'‚ü©,
    map_id' := Œª X, by { ext1, dsimp, apply category_theory.functor.map_id },
    map_comp' := Œª X Y Z f g, by { ext1, dsimp, apply category_theory.functor.map_comp } },
  Œµ :=
  { hom :=
    { app := Œª X, ‚ü®(shift_zero _ _).inv‚ü©,
      naturality' := sorry },
    inv :=
    { app := Œª X, ‚ü®(shift_zero _ _).hom‚ü©,
      naturality' := sorry },
    hom_inv_id' := sorry,
    inv_hom_id' := sorry },
  Œº := Œª m n,
  { hom :=
    { app := Œª X, ‚ü®(shift_add _ _ _).inv‚ü©,
      naturality' := sorry },
    inv :=
    { app := Œª X, ‚ü®(shift_add _ _ _).hom‚ü©,
      naturality' := sorry },
    hom_inv_id' := sorry,
    inv_hom_id' := sorry },
  associativity := sorry,
  left_unitality := sorry,
  right_unitality := sorry }

@[simps]
instance preadditive : preadditive (bounded_derived_category A) :=
{ hom_group := Œª P Q,
  { add := Œª f g, ‚ü®f.val + g.val‚ü©,
    add_assoc := by { intros, ext, apply add_assoc },
    zero := ‚ü®0‚ü©,
    zero_add := by { intros, ext, apply zero_add },
    add_zero := by { intros, ext, apply add_zero },
    nsmul := Œª n f, ‚ü®n ‚Ä¢ f.val‚ü©,
    nsmul_zero' := by { intros f, ext, refine add_comm_monoid.nsmul_zero' f.val, },
    nsmul_succ' := by { intros n f, ext, exact add_comm_monoid.nsmul_succ' _ f.val },
    neg := Œª f, ‚ü®-f.val‚ü©,
    sub := Œª f g, ‚ü®f.val - g.val‚ü©,
    sub_eq_add_neg := by { intros, ext, apply sub_eq_add_neg },
    zsmul := Œª n f, ‚ü®n ‚Ä¢ f.val‚ü©,
    zsmul_zero' := by { intros f, ext, apply add_comm_group.zsmul_zero' f.val },
    zsmul_succ' := by { intros n f, ext, apply add_comm_group.zsmul_succ' _ f.val },
    zsmul_neg' := by { intros n f, ext, apply add_comm_group.zsmul_neg' _ f.val },
    add_left_neg := by { intros, ext, apply add_left_neg },
    add_comm := by { intros, ext, apply add_comm } },
  add_comp' :=
    by { intros P Q R f‚ÇÅ f‚ÇÇ g, ext, apply preadditive.add_comp _ _ _ f‚ÇÅ.val f‚ÇÇ.val g.val },
  comp_add' :=
    by { intros P Q R f g‚ÇÅ g‚ÇÇ, ext, apply preadditive.comp_add _ _ _ f.val g‚ÇÅ.val g‚ÇÇ.val } }

instance additive (n : ‚Ñ§) : (shift_functor (bounded_derived_category A) n).additive :=
{ map_add' := begin
    intros P Q f g,
    ext1,
    dsimp,
    erw ‚Üê (shift_functor (bounded_homotopy_category A) n).map_add,
    refl,
  end }

open category_theory.triangulated

variable {A}
noncomputable
def replace_triangle (S : triangle (bounded_homotopy_category A)) :
  triangle (bounded_derived_category A) :=
{ obj‚ÇÅ := of $ S.obj‚ÇÅ.replace,
  obj‚ÇÇ := of $ S.obj‚ÇÇ.replace,
  obj‚ÇÉ := of $ S.obj‚ÇÉ.replace,
  mor‚ÇÅ := ‚ü®bounded_homotopy_category.lift (S.obj‚ÇÅ.œÄ ‚â´ S.mor‚ÇÅ) S.obj‚ÇÇ.œÄ‚ü©,
  mor‚ÇÇ := ‚ü®bounded_homotopy_category.lift (S.obj‚ÇÇ.œÄ ‚â´ S.mor‚ÇÇ) S.obj‚ÇÉ.œÄ‚ü©,
  mor‚ÇÉ := begin
    haveI : is_quasi_iso
      ((shift_functor (bounded_homotopy_category A) (1 : ‚Ñ§)).map S.obj‚ÇÅ.œÄ) :=
    by { change is_quasi_iso ((S.obj‚ÇÅ.œÄ)‚ü¶(1 : ‚Ñ§)‚üß'), by apply_instance }, -- WAT?
    exact ‚ü®bounded_homotopy_category.lift (S.obj‚ÇÉ.œÄ ‚â´ S.mor‚ÇÉ) (S.obj‚ÇÅ.œÄ‚ü¶(1 : ‚Ñ§)‚üß')‚ü©,
  end }

variable (A)
instance pretriangulated : triangulated.pretriangulated (bounded_derived_category A) :=
{ distinguished_triangles := { T |
    ‚àÉ (S : triangle (bounded_homotopy_category A))
      (hS : S ‚àà dist_triang (bounded_homotopy_category A))
      (f : T ‚ü∂ replace_triangle S), is_iso f },
  isomorphic_distinguished := begin
    rintro T‚ÇÅ ‚ü®S‚ÇÅ, hS‚ÇÅ, f‚ÇÅ, hf‚ÇÅ‚ü© T‚ÇÇ i, resetI,
    refine ‚ü®S‚ÇÅ, hS‚ÇÅ, i.hom ‚â´ f‚ÇÅ, infer_instance‚ü©,
  end,
  contractible_distinguished := begin
    intro X,
    refine ‚ü®contractible_triangle _ X.val, pretriangulated.contractible_distinguished _, _‚ü©,
    sorry,
  end,
  distinguished_cocone_triangle := sorry,
  rotate_distinguished_triangle := sorry,
  complete_distinguished_triangle_morphism := sorry }

variable {A}
@[simps]
def lift {C : Type*} [category C] (F : bounded_homotopy_category A ‚•§ C) :
  bounded_derived_category A ‚•§ C :=
{ obj := Œª X, F.obj X.val,
  map := Œª X Y f, F.map f.val,
  map_id' := Œª X, F.map_id _,
  map_comp' := Œª X Y Z f g, F.map_comp _ _ }

noncomputable
def localize_lift {C : Type*} [category C]
  (F : bounded_homotopy_category A ‚•§ C)
  [‚àÄ (X Y : bounded_homotopy_category A) (f : X ‚ü∂ Y)
    [h : is_quasi_iso f], is_iso (F.map f)] :
  localization_functor A ‚ãô lift F ‚âÖ F :=
nat_iso.of_components
(Œª X, as_iso $ F.map X.œÄ)
begin
  intros X Y f,
  dsimp,
  simp only [‚Üê F.map_comp],
  congr' 1,
  rw bounded_homotopy_category.lift_lifts,
end

@[simps]
noncomputable
def localization_iso (X : bounded_derived_category A) :
  (localization_functor A).obj X.val ‚âÖ X :=
{ hom := ‚ü®X.val.œÄ‚ü©,
  inv := ‚ü®bounded_homotopy_category.lift (ùüô _) X.val.œÄ‚ü©,
  hom_inv_id' := begin
    ext, dsimp, refine bounded_homotopy_category.lift_ext X.val.œÄ _ _ _,
    rw [category.assoc, bounded_homotopy_category.lift_lifts, category.id_comp, category.comp_id],
  end,
  inv_hom_id' := by { ext, dsimp, rw bounded_homotopy_category.lift_lifts } }

noncomputable
def lift_unique {C : Type*} [category C]
  (F : bounded_homotopy_category A ‚•§ C)
  [‚àÄ (X Y : bounded_homotopy_category A) (f : X ‚ü∂ Y)
    [h : is_quasi_iso f], is_iso (F.map f)]
  (G : bounded_derived_category A ‚•§ C)
  (e : F ‚âÖ localization_functor A ‚ãô G) :
  lift F ‚âÖ G :=
nat_iso.of_components
(Œª X, e.app X.val ‚â™‚â´ G.map_iso (localization_iso _))
begin
  intros X Y f,
  simp only [lift_map, iso.trans_hom, iso.app_hom, functor.map_iso_hom, nat_trans.naturality_assoc,
    functor.comp_map, category.assoc, nat_iso.cancel_nat_iso_hom_left],
  rw [‚Üê functor.map_comp, ‚Üê functor.map_comp],
  congr' 1,
  ext,
  simp only [category_theory.category_comp_val, localization_functor_map_val,
    localization_iso_hom_val, bounded_homotopy_category.lift_lifts],
end

end bounded_derived_category
