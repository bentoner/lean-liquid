import for_mathlib.bicartesian3

noncomputable theory

universe u

open category_theory category_theory.limits


section part1

-- jmc: feel free to generalize to arbitrary abelian cats
variables {A B C D : Ab.{u}} {f : A ‚ü∂ B} {g : B ‚ü∂ C} {h : C ‚ü∂ D}
variables {Œ± : A ‚ü∂ A} {Œ≤ : B ‚ü∂ B} {Œ≥ : C ‚ü∂ C} {Œ¥ : D ‚ü∂ D}

-- jmc: my apologies for the `Œ± = -ùüô _` assumption below...
-- it might be worthwile to first prove an aux-lemma with `= ùüô _` and then negate all maps

-- SELFCONTAINED
lemma bicartesian_of_id_of_end_of_end_of_id
  (H : exact_seq Ab.{u} [f, g, h])
  (sq1 : commsq f Œ± Œ≤ f) (sq2 : commsq g Œ≤ Œ≥ g) (sq3 : commsq h Œ≥ Œ¥ h)
  (hŒ± : Œ± = -ùüô _) (hŒ¥ : Œ¥ = -ùüô _) :
  sq2.bicartesian :=
begin
  have aux : _ := _,
  rw commsq.bicartesian_iff_isos _ _ aux aux sq2.kernel sq2 sq2.cokernel,
  swap,
  { apply exact.cons, { exact exact_kernel_Œπ },
    apply exact.exact_seq, { apply abelian.exact_cokernel } },
  sorry
  -- use (important!) the fact that we have a `kernel.map` (resp. `cokernel.map`)
  -- arising between two identical exact sequences
end

end part1

section part2

-- jmc: this part does not depend on the first section,
-- it's the same file because two lemmas have the same theme

-- jmc: feel free to generalize to arbitrary abelian cats
variables {A‚ÇÅ‚ÇÅ A‚ÇÅ‚ÇÇ A‚ÇÅ‚ÇÉ A‚ÇÅ‚ÇÑ A‚ÇÅ‚ÇÖ : Ab.{u}}
variables {A‚ÇÇ‚ÇÅ A‚ÇÇ‚ÇÇ A‚ÇÇ‚ÇÉ A‚ÇÇ‚ÇÑ A‚ÇÇ‚ÇÖ : Ab.{u}}
-- horizontal maps are `f`s and vertical maps are `g`s
variables {f‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ ‚ü∂ A‚ÇÅ‚ÇÇ} {f‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÇ ‚ü∂ A‚ÇÅ‚ÇÉ} {f‚ÇÅ‚ÇÉ : A‚ÇÅ‚ÇÉ ‚ü∂ A‚ÇÅ‚ÇÑ} {f‚ÇÅ‚ÇÑ : A‚ÇÅ‚ÇÑ ‚ü∂ A‚ÇÅ‚ÇÖ}
variables {g‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ ‚ü∂ A‚ÇÇ‚ÇÅ} {g‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÇ ‚ü∂ A‚ÇÇ‚ÇÇ} {g‚ÇÅ‚ÇÉ : A‚ÇÅ‚ÇÉ ‚ü∂ A‚ÇÇ‚ÇÉ} {g‚ÇÅ‚ÇÑ : A‚ÇÅ‚ÇÑ ‚ü∂ A‚ÇÇ‚ÇÑ} {g‚ÇÅ‚ÇÖ : A‚ÇÅ‚ÇÖ ‚ü∂ A‚ÇÇ‚ÇÖ}
variables {f‚ÇÇ‚ÇÅ : A‚ÇÇ‚ÇÅ ‚ü∂ A‚ÇÇ‚ÇÇ} {f‚ÇÇ‚ÇÇ : A‚ÇÇ‚ÇÇ ‚ü∂ A‚ÇÇ‚ÇÉ} {f‚ÇÇ‚ÇÉ : A‚ÇÇ‚ÇÉ ‚ü∂ A‚ÇÇ‚ÇÑ} {f‚ÇÇ‚ÇÑ : A‚ÇÇ‚ÇÑ ‚ü∂ A‚ÇÇ‚ÇÖ}

-- SELFCONTAINED
lemma iso_of_bicartesian_of_bicartesian
  (h_ex‚ÇÅ : exact_seq Ab.{u} [f‚ÇÅ‚ÇÅ, f‚ÇÅ‚ÇÇ, f‚ÇÅ‚ÇÉ, f‚ÇÅ‚ÇÑ])
  (h_ex‚ÇÇ : exact_seq Ab.{u} [f‚ÇÇ‚ÇÅ, f‚ÇÇ‚ÇÇ, f‚ÇÇ‚ÇÉ, f‚ÇÇ‚ÇÑ])
  (sq1 : commsq f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ) (sq2 : commsq f‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÉ f‚ÇÇ‚ÇÇ)
  (sq3 : commsq f‚ÇÅ‚ÇÉ g‚ÇÅ‚ÇÉ g‚ÇÅ‚ÇÑ f‚ÇÇ‚ÇÉ) (sq4 : commsq f‚ÇÅ‚ÇÑ g‚ÇÅ‚ÇÑ g‚ÇÅ‚ÇÖ f‚ÇÇ‚ÇÑ)
  (H1 : sq1.bicartesian) (H4 : sq4.bicartesian) :
  is_iso f‚ÇÅ‚ÇÉ :=
sorry

-- SELFCONTAINED
lemma iso_of_zero_of_bicartesian
  (h_ex‚ÇÅ : exact_seq Ab.{u} [f‚ÇÅ‚ÇÇ, f‚ÇÅ‚ÇÉ, f‚ÇÅ‚ÇÑ])
  (h_ex‚ÇÇ : exact_seq Ab.{u} [f‚ÇÇ‚ÇÇ, f‚ÇÇ‚ÇÉ, f‚ÇÇ‚ÇÑ])
  (hz‚ÇÅ : is_zero A‚ÇÅ‚ÇÇ) (hz‚ÇÇ : is_zero A‚ÇÇ‚ÇÇ)
  (sq2 : commsq f‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÉ f‚ÇÇ‚ÇÇ) (sq3 : commsq f‚ÇÅ‚ÇÉ g‚ÇÅ‚ÇÉ g‚ÇÅ‚ÇÑ f‚ÇÇ‚ÇÉ)
  (sq4 : commsq f‚ÇÅ‚ÇÑ g‚ÇÅ‚ÇÑ g‚ÇÅ‚ÇÖ f‚ÇÇ‚ÇÑ) (H4 : sq4.bicartesian) :
  is_iso f‚ÇÅ‚ÇÉ :=
-- apply `iso_of_bicartesian_of_bicartesian` and provide a zero square on the left
sorry

end part2
