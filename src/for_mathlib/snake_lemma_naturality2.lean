import for_mathlib.snake_lemma3
import for_mathlib.les_homology
import for_mathlib.snake_lemma_naturality

noncomputable theory

open category_theory category_theory.limits

variables {C ùìê : Type*} [category C] [category ùìê] [abelian ùìê]

namespace homological_complex

variables {Œπ : Type*} {c : complex_shape Œπ}

local notation x `‚ü∂[`D`]` y := D.map (snake_diagram.hom x y)

def cast_horizontal (i : fin 4) (j : fin 2) : snake_diagram := (i,j.cast_succ)
def cast_vertical (i : fin 3) (j : fin 3) : snake_diagram := (i.cast_succ,j)
def succ_horizontal (i : fin 4) (j : fin 2) : snake_diagram := (i, j.succ)
def succ_vertical (i : fin 3) (j : fin 3) : snake_diagram := (i.succ,j)
def to_succ_horizontal (i : fin 4) (j : fin 2) :
  cast_horizontal i j ‚ü∂ succ_horizontal i j := sorry
def to_succ_vertical ( i : fin 3) (j : fin 3) :
  cast_vertical i j ‚ü∂ succ_vertical i j := sorry

lemma snake_diagram_induction
  {motive : Œ† ‚¶Éi j : snake_diagram‚¶Ñ (f : i ‚ü∂ j), Prop}
  (id : ‚àÄ i : snake_diagram, motive (ùüô i))
  (comp : ‚àÄ (i j k : snake_diagram) (f : i ‚ü∂ j) (g : j ‚ü∂ k),
    motive f ‚Üí motive g ‚Üí motive (f ‚â´ g))
  (succ_horizontal : ‚àÄ (i : fin 4) (j : fin 2),
    motive (to_succ_horizontal i j))
  (succ_vertical : ‚àÄ (i : fin 3) (j : fin 3),
    motive (to_succ_vertical i j)) ‚¶Éi j : snake_diagram‚¶Ñ (f : i ‚ü∂ j) : motive f := sorry

-- TODO: Make a general construction, similar to `snake_diagram.mk_functor`
def mk_snake_diagram_nat_trans
  {X Y Z : C ‚•§ homological_complex ùìê c} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  (H : ‚àÄ c i, short_exact ((f.app c).f i) ((g.app c).f i))
  {c‚ÇÅ c‚ÇÇ : C} (œÜ : c‚ÇÅ ‚ü∂ c‚ÇÇ) (i j : Œπ) (hij : c.rel i j) :
  (snake (f.app c‚ÇÅ) (g.app c‚ÇÅ) (H _) i j hij).snake_diagram ‚ü∂
  (snake (f.app c‚ÇÇ) (g.app c‚ÇÇ) (H _) i j hij).snake_diagram :=
{ app := Œª e,
  match e with
  | ‚ü®‚ü®0,_‚ü©,‚ü®0,_‚ü©‚ü© := (homology_functor _ _ i).map (X.map œÜ)
  | ‚ü®‚ü®0,_‚ü©,‚ü®1,_‚ü©‚ü© := (homology_functor _ _ i).map (Y.map œÜ)
  | ‚ü®‚ü®0,_‚ü©,‚ü®2,_‚ü©‚ü© := (homology_functor _ _ i).map (Z.map œÜ)
  | ‚ü®‚ü®1,_‚ü©,‚ü®0,_‚ü©‚ü© := (mod_boundaries_functor _).map (X.map œÜ)
  | ‚ü®‚ü®1,_‚ü©,‚ü®1,_‚ü©‚ü© := (mod_boundaries_functor _).map (Y.map œÜ)
  | ‚ü®‚ü®1,_‚ü©,‚ü®2,_‚ü©‚ü© := (mod_boundaries_functor _).map (Z.map œÜ)
  | ‚ü®‚ü®2,_‚ü©,‚ü®0,_‚ü©‚ü© := (cycles_functor _ _ _).map (X.map œÜ)
  | ‚ü®‚ü®2,_‚ü©,‚ü®1,_‚ü©‚ü© := (cycles_functor _ _ _).map (Y.map œÜ)
  | ‚ü®‚ü®2,_‚ü©,‚ü®2,_‚ü©‚ü© := (cycles_functor _ _ _).map (Z.map œÜ)
  | ‚ü®‚ü®3,_‚ü©,‚ü®0,_‚ü©‚ü© := (homology_functor _ _ j).map (X.map œÜ)
  | ‚ü®‚ü®3,_‚ü©,‚ü®1,_‚ü©‚ü© := (homology_functor _ _ j).map (Y.map œÜ)
  | ‚ü®‚ü®3,_‚ü©,‚ü®2,_‚ü©‚ü© := (homology_functor _ _ j).map (Z.map œÜ)
  | _ := 0 -- impossible case
  end,
  naturality' := begin
    apply snake_diagram_induction,
    { simp },
    { intros i j k f g h1 h2, dsimp,
      simp only [functor.map_comp, category.assoc, h2, reassoc_of h1] },
    { sorry },
    { sorry }
  end }

lemma Œ¥_natural {X Y Z : C ‚•§ homological_complex ùìê c} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  (H : ‚àÄ c i, short_exact ((f.app c).f i) ((g.app c).f i))
  {c‚ÇÅ c‚ÇÇ : C} (œÜ : c‚ÇÅ ‚ü∂ c‚ÇÇ) (i j : Œπ) (hij : c.rel i j) :
  Œ¥ (f.app c‚ÇÅ) (g.app c‚ÇÅ) (H _) i j hij ‚â´ (homology_functor _ _ j).map (X.map œÜ) =
    (homology_functor _ _ i).map (Z.map œÜ) ‚â´ Œ¥ (f.app c‚ÇÇ) (g.app c‚ÇÇ) (H _) i j hij :=
begin
  let Œ∑ := mk_snake_diagram_nat_trans f g H œÜ i j hij,
  apply (snake_lemma.Œ¥_natural Œ∑ _ _).symm,

  /-
  delta Œ¥ snake.Œ¥,
  have h1 : snake_diagram.hom (1,0) (2,1) =
    snake_diagram.hom (1,0) (1,1) ‚â´ snake_diagram.hom (1,1) (2,1) := snake_diagram.hom_ext _ _,
  generalize_proofs _ _ _ _ _ _ S‚ÇÅ hS‚ÇÅ S‚ÇÇ hS‚ÇÇ,
  rw [‚Üê cancel_epi hS‚ÇÅ.to_kernel', ‚Üê cancel_mono hS‚ÇÇ.cokernel_to'],
  have aux1 : (homology_functor ùìê c j).map (X.map œÜ) ‚â´ hS‚ÇÇ.cokernel_to' = hS‚ÇÅ.cokernel_to' ‚â´
      (cokernel.map _ _
        ((mod_boundaries_functor i).map (X.map œÜ))
        ((cycles_functor _ _ j).map (Y.map œÜ)) _),
  swap 3,
  { dsimp only [snake.snake_diagram],
    simp only [h1, category_theory.functor.map_comp, category.assoc, ‚Üê nat_trans.naturality,
      snake_diagram.mk_functor_map_f1, snake_diagram.mk_functor_map_b1,
      ‚Üê mod_boundaries_functor_map],
    simp only [‚Üê category_theory.functor.map_comp_assoc, ‚Üê nat_trans.naturality], },
  { delta is_snake_input.cokernel_to',
    sorry },
  sorry
  -- simp only [category.assoc],
  -- delta is_snake_input.to_kernel' is_snake_input.cokernel_to',
  -/
end

end homological_complex
