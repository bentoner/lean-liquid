import .Profinite
import category_theory.Fintype
import topology.locally_constant.basic

universes v u

open category_theory
open category_theory.limits

noncomputable theory

namespace Profinite

structure clopen_cover (X : Profinite) :=
(sets : set (set X))
--(finite : sets.finite) -- follows from compactness, see fintype instance below
(clopen : ‚àÄ U : sets, is_clopen (U : set X))
(nonempty : ‚àÄ U : sets, (U : set X).nonempty)
(disjoint : ‚àÄ U V : sets, (U ‚äì V : set X).nonempty ‚Üí U = V)
(cover' : ‚ãÉ‚ÇÄ sets = ‚ä§)

variables {X Y : Profinite.{u}}

namespace clopen_cover

instance : has_coe_to_sort X.clopen_cover := ‚ü®Type*, Œª I, I.sets‚ü©

lemma cover (I : X.clopen_cover) : (‚ãÉ (i : I), (i : set X)) = ‚ä§ :=
by simpa [set.sUnion_eq_Union] using I.cover'

instance {I : X.clopen_cover} : fintype I :=
begin
  have h : _root_.is_compact (‚ä§ : set X) := compact_univ,
  rw compact_iff_finite_subcover at h,
  specialize h (Œª i : I, i) (Œª i, (I.clopen _).1) I.cover.symm.subset,
  let S := classical.some h,
  let hS := classical.some_spec h,
  refine ‚ü®S,_‚ü©,
  intros U,
  rcases I.nonempty U with ‚ü®x,hx‚ü©,
  specialize hS (by tauto : x ‚àà ‚ä§),
  rcases hS with ‚ü®V,‚ü®W,rfl‚ü©,W,‚ü®(h1 : _ ‚àà S),rfl‚ü©,h2‚ü©,
  dsimp at h2,
  suffices : U = W, by rwa this,
  apply I.disjoint,
  refine ‚ü®x,hx,h2‚ü©,
end

instance : inhabited X.clopen_cover :=
begin
  by_cases _root_.nonempty X,
  { refine ‚ü®‚ü®{‚ä§},_,_,_,_‚ü©‚ü©,
    { rintros ‚ü®U,hU‚ü©, refine ‚ü®_,_‚ü©,
      any_goals {dsimp,
        simp only [set.mem_singleton_iff, set.top_eq_univ] at hU,
        rw hU },
      exact is_open_univ,
      exact is_closed_univ },
    { rintros ‚ü®U,hU‚ü©,
      simp only [set.mem_singleton_iff, set.top_eq_univ] at hU,
      simp only [hU],
      cases h with x,
      refine ‚ü®x,by tauto‚ü© },
    { rintros ‚ü®U,hU‚ü© ‚ü®V,hV‚ü© -,
      simp only [set.mem_singleton_iff, set.top_eq_univ] at hU hV,
      ext1,
      simp [hV,hU] },
    { simp } },
  refine ‚ü®‚ü®‚àÖ,_,_,_,_‚ü©‚ü©,
  any_goals { rintros ‚ü®_,h‚ü©, refine false.elim h },
  simp,
  symmetry,
  rw set.eq_empty_iff_forall_not_mem,
  intros x c,
  refine h ‚ü®x‚ü©,
end

instance {I : X.clopen_cover} : topological_space I := ‚ä•

instance : preorder X.clopen_cover :=
{ le := Œª I J, ‚àÄ U : I, ‚àÉ V : J, (U : set X) ‚â§ V,
  le_refl := Œª I U, ‚ü®U,le_refl _‚ü©,
  le_trans := begin
    intros I J K h1 h2 U,
    obtain ‚ü®V,hV‚ü© := h1 U,
    obtain ‚ü®W,hW‚ü© := h2 V,
    exact ‚ü®W, le_trans hV hW‚ü©
  end }

def map_aux_obj (f : X ‚ü∂ Y) : Y.clopen_cover ‚Üí X.clopen_cover := Œª I,
{ sets := { U | (‚àÉ V : I, f‚Åª¬π' V = U) ‚àß (U : set X).nonempty },
  clopen := begin
    rintro ‚ü®U,‚ü®V,rfl‚ü©,h‚ü©,
    refine ‚ü®is_open.preimage f.2 (I.clopen _).1, is_closed.preimage f.2 (I.clopen _).2‚ü©,
  end,
  nonempty := Œª U, U.2.2,
  disjoint := begin
    rintro ‚ü®U,‚ü®U,rfl‚ü©,hU‚ü© ‚ü®V,‚ü®V,rfl‚ü©,hV‚ü© ‚ü®x,hx1,hx2‚ü©,
    simp only [set.mem_preimage, subtype.coe_mk] at hx1 hx2,
    simp [I.disjoint U V ‚ü®f x, hx1, hx2‚ü©],
  end,
  cover' := begin
    have h := I.cover',
    erw set.eq_univ_iff_forall at *,
    intros x,
    rcases h (f x) with ‚ü®V,hV,hx‚ü©,
    exact ‚ü®f ‚Åª¬π' V,‚ü®‚ü®‚ü®V,hV‚ü©,rfl‚ü©,‚ü®x,hx‚ü©‚ü©,hx‚ü©,
  end }.

def map (f : X ‚ü∂ Y) : Y.clopen_cover ‚•§ X.clopen_cover :=
{ obj := map_aux_obj _,
  map := Œª I J g, hom_of_le $ begin
    rintro ‚ü®U,‚ü®U,rfl‚ü©,h‚ü©,
    replace g := le_of_hom g U,
    rcases g with ‚ü®V,hV‚ü©,
    use f ‚Åª¬π' V,
    { exact ‚ü®‚ü®V,rfl‚ü©, set.nonempty.mono (set.preimage_mono hV) h‚ü© },
    { exact set.preimage_mono hV, },
  end }

def of_clopen (U : set X) (h1 : U.nonempty) (h2 : U·∂ú.nonempty) (h : is_clopen U) :
  X.clopen_cover :=
{ sets := {U, U·∂ú},
  clopen := begin
    rintros ‚ü®V,hV|hV‚ü©,
    { dsimp,
      rwa hV },
    { dsimp,
      simp only [set.mem_singleton_iff] at hV,
      rw hV,
      refine ‚ü®_,_‚ü©,
      { rw is_open_compl_iff, exact h.2 },
      { rw is_closed_compl_iff, exact h.1} }
  end,
  nonempty := begin
    rintros ‚ü®V,hV|hV‚ü©,
    { simpa [hV] },
    { simp only [set.mem_singleton_iff] at hV,
      simpa [hV] },
  end,
  disjoint := begin
    rintro ‚ü®A,hA|hA‚ü© ‚ü®B,hB|hB‚ü© ‚ü®x,hx‚ü©; ext1; dsimp,
    any_goals { simp only [set.mem_singleton_iff] at hA hB },
    any_goals { rw [hA,hB] },
    { dsimp at hx,
      rw [hA, hB] at hx,
      exact false.elim (hx.2 hx.1) },
    { dsimp at hx,
      rw [hA, hB] at hx,
      exact false.elim (hx.1 hx.2) },
  end,
  cover' := begin
    erw set.eq_univ_iff_forall,
    intros x,
    by_cases x ‚àà (U : set X),
    exact ‚ü®U,or.inl rfl, h‚ü©,
    exact ‚ü®U·∂ú, or.inr rfl, h‚ü©,
  end}.

def of_clopen.term {U : set X} {h1 : U.nonempty} {h2 : U·∂ú.nonempty} {h : is_clopen U} :
  of_clopen U h1 h2 h := ‚ü®U, or.inl rfl‚ü©

def common_refinement (I J : X.clopen_cover) : X.clopen_cover :=
{ sets := { U | U.nonempty ‚àß ‚àÉ (A : I) (B : J), U = A ‚à© B },
  clopen := begin
    rintro ‚ü®U,hU,‚ü®A,B,rfl‚ü©‚ü©,
    exact ‚ü®is_open_inter (I.clopen A).1 (J.clopen B).1,
      is_closed_inter (I.clopen A).2 (J.clopen B).2‚ü©,
  end,
  nonempty := Œª U, U.2.1,
  disjoint := begin
    rintros ‚ü®U,hU,‚ü®A,B,rfl‚ü©‚ü© ‚ü®V,hV,‚ü®C,D,rfl‚ü©‚ü© ‚ü®x,‚ü®h1,h2‚ü©,h3,h4‚ü©,
    ext1,
    dsimp,
    erw I.disjoint A C ‚ü®x,h1,h3‚ü©,
    erw J.disjoint B D ‚ü®x,h2,h4‚ü©,
  end,
  cover' := begin
    have hI := I.cover,
    have hJ := J.cover,
    erw set.eq_univ_iff_forall at *,
    intros x,
    rcases hI x with ‚ü®A,‚ü®A,rfl‚ü©,hxA‚ü©,
    rcases hJ x with ‚ü®B,‚ü®B,rfl‚ü©,hxB‚ü©,
    dsimp at *,
    refine ‚ü®A ‚à© B,‚ü®‚ü®x,hxA,hxB‚ü©, ‚ü®A, B, rfl‚ü©‚ü©,hxA,hxB‚ü©,
  end }

def common_refinement.fst {I J : X.clopen_cover} : common_refinement I J ‚ü∂ I :=
hom_of_le $
begin
  rintros ‚ü®U,‚ü®h1,‚ü®A,B,rfl‚ü©‚ü©‚ü©,
  exact ‚ü®A,set.inter_subset_left _ _‚ü©,
end

def common_refinement.snd {I J : X.clopen_cover} : common_refinement I J ‚ü∂ J :=
hom_of_le $
begin
  rintros ‚ü®U,‚ü®h1,‚ü®A,B,rfl‚ü©‚ü©‚ü©,
  exact ‚ü®B,set.inter_subset_right _ _‚ü©,
end

end clopen_cover

def refines {I J : X.clopen_cover} (f : I ‚ü∂ J) (U : I) : J := classical.some (le_of_hom f U)

lemma refines_spec {I J : X.clopen_cover} (f : I ‚ü∂ J) (U : I) : (U : set X) ‚â§ refines f U :=
  classical.some_spec (le_of_hom f U)

lemma refines_unique {I J : X.clopen_cover} (f : I ‚ü∂ J) (U : I) (V : J) :
  (U : set X) ‚â§ V ‚Üí V = refines f U :=
Œª h, J.disjoint _ _ (set.nonempty.mono (set.subset_inter h (refines_spec _ _)) (I.nonempty U))

@[simp]
lemma refines_id (I : X.clopen_cover) (U : I) : refines (ùüô I) U = U :=
(refines_unique (ùüô _) U U $ le_refl _).symm

@[simp]
lemma refines_comp {I J K : X.clopen_cover} (f : I ‚ü∂ J) (g : J ‚ü∂ K) (U : I) :
  refines (f ‚â´ g) U = refines g (refines f U) := eq.symm $
refines_unique _ _ _ $ le_trans (refines_spec f U) (refines_spec _ _)

def diagram : X.clopen_cover ‚•§ Profinite :=
{ obj := Œª I, ‚ü®‚ü®I‚ü©‚ü©,
  map := Œª I J f, ‚ü®Œª U, refines f U, continuous_of_discrete_topology‚ü© }

lemma mem (x : X) (I : X.clopen_cover) : ‚àÉ! U : I, x ‚àà (U : set X) :=
begin
  have : x ‚àà ‚ãÉ‚ÇÄ I.sets, by simp [I.cover'],
  rcases this with ‚ü®U,hU,hx‚ü©,
  exact ‚ü®‚ü®U,hU‚ü©,hx, Œª V hV, I.disjoint _ _ ‚ü®x,hV,hx‚ü©‚ü©,
end

def proj_fun (I : X.clopen_cover) : X ‚Üí diagram.obj I := Œª x, classical.some $ mem x I

@[simp]
lemma proj_fun_spec (I : X.clopen_cover) (x : X) (U : I) :
  proj_fun I x = U ‚Üî x ‚àà (U : set X) :=
begin
  cases classical.some_spec (mem x I) with h1 h2,
  refine ‚ü®_,Œª h, (h2 _ h).symm‚ü©,
  intro h,
  dsimp at h2,
  specialize h2 U,
  change x ‚àà (proj_fun I x).1 at h1,
  rwa h at h1
end

lemma proj_fun_preimage (I : X.clopen_cover) (U : set I) :
  proj_fun I ‚Åª¬π' U = ‚ãÉ (i : I) (hi : i ‚àà U), (i : set X) :=
begin
  erw [‚Üê U.bUnion_of_singleton, set.preimage_Union],
  congr' 1,
  tidy,
end

def proj_map (I : X.clopen_cover) : locally_constant X I :=
{ to_fun := proj_fun I,
  is_locally_constant := begin
    intros U,
    rw [proj_fun_preimage],
    apply is_open_bUnion,
    rintros i hi,
    exact (I.clopen i).1,
  end }

def proj (I : X.clopen_cover) : X ‚ü∂ ‚ü®‚ü®I‚ü©‚ü© := ‚ü®proj_map I, (proj_map I).continuous‚ü©

@[simp]
lemma proj_comp_map {I J : X.clopen_cover} (f : I ‚ü∂ J) :
  proj I ‚â´ diagram.map f = proj J :=
begin
  ext1 x,
  change diagram.map f (proj_fun _ _) = proj_fun _ _,
  symmetry,
  rw proj_fun_spec,
  apply refines_spec,
  erw ‚Üê proj_fun_spec,
end

theorem eq_of_proj_eq (x y : X) : (‚àÄ I : X.clopen_cover, proj I x = proj I y) ‚Üí x = y :=
begin
  intros h,
  suffices : x ‚àà ({y} : set X), by simpa using this,
  have : totally_disconnected_space X, by apply_instance,
  rw totally_disconnected_space_iff_connected_component_singleton at this,
  rw [‚Üê this, connected_component_eq_Inter_clopen],
  rintros U ‚ü®‚ü®U,hU1,hU2‚ü©,rfl‚ü©,
  dsimp,
  by_cases ht : U = ‚ä§,
  { rw ht, tauto },
  have : U·∂ú.nonempty, by rwa set.nonempty_compl,
  let J := clopen_cover.of_clopen U ‚ü®y,hU2‚ü© this hU1,
  specialize h J,
  suffices : proj J y = clopen_cover.of_clopen.term,
  { erw [proj_fun_spec, this] at h, assumption },
  erw proj_fun_spec,
  assumption,
end

theorem exists_of_compat (is : Œ† (I : X.clopen_cover), I)
  (compat : ‚àÄ (I J : X.clopen_cover) (f : I ‚ü∂ J), refines f (is _) = is _) :
  ‚àÉ x : X, ‚àÄ I, proj I x = is _ :=
begin
  have := @is_compact.nonempty_Inter_of_directed_nonempty_compact_closed X _ X.clopen_cover _
    (Œª I, is I) _ _ _ _,
  rcases this with ‚ü®x,hx‚ü©,
  refine ‚ü®x,Œª I, _‚ü©,
  erw proj_fun_spec,
  apply hx,
  refine ‚ü®I,rfl‚ü©,
  { intros I J,
    dsimp,
    let K := I.common_refinement J,
    let f : K ‚ü∂ I := clopen_cover.common_refinement.fst,
    let g : K ‚ü∂ J := clopen_cover.common_refinement.snd,
    have hf := refines_spec f,
    have hg := refines_spec g,
    refine ‚ü®K, _, _‚ü©,
    erw ‚Üê compat _ _ f,
    apply hf,
    erw ‚Üê compat _ _ g,
    apply hg },
  { intros I, apply I.nonempty },
  { intros I,
    apply is_closed.compact,
    exact (I.clopen _).2 },
  { intros I,
    exact (I.clopen _).2 },
end

def cone (X : Profinite) : limits.cone (diagram : X.clopen_cover ‚•§ _) := ‚ü®X,‚ü®proj‚ü©‚ü©

lemma lift_injective : function.injective ((is_limit_limit_cone _).lift X.cone) :=
begin
  intros x y he,
  apply eq_of_proj_eq,
  intros I,
  apply_fun (limit_cone _).œÄ.app I at he,
  change ((is_limit_limit_cone _).lift X.cone ‚â´ (limit_cone _).œÄ.app I) x =
    ((is_limit_limit_cone _).lift X.cone ‚â´ (limit_cone _).œÄ.app I) y at he,
  simpa using he,
end

lemma lift_surjective : function.surjective ((is_limit_limit_cone _).lift X.cone) :=
begin
  intros a,
  have := exists_of_compat (Œª I, (limit_cone _).œÄ.app I a) _,
  rcases a with ‚ü®a,ha‚ü©,
  rcases this with ‚ü®x,hx‚ü©,
  use x,
  ext1,
  ext1 I,
  dsimp [is_limit_limit_cone],
  apply hx,
  intros I J f,
  rcases a with ‚ü®a,ha‚ü©,
  dsimp [limit_cone],
  dsimp at ha,
  change (diagram.map f) (a I) = _,
  rw ha,
end

lemma lift_closed : is_closed_map ((is_limit_limit_cone _).lift X.cone) :=
begin
  intros U hU,
  apply is_compact.is_closed,
  apply is_compact.image _ ((is_limit_limit_cone _).lift X.cone).2,
  apply is_closed.compact hU,
end

def lift_equiv : X.cone.X ‚âÉ (limit_cone (diagram : X.clopen_cover ‚•§ _)).X :=
equiv.of_bijective ((is_limit_limit_cone _).lift X.cone) ‚ü®lift_injective , lift_surjective‚ü©

def lift_iso : X.cone.X ‚âÖ (limit_cone (diagram : X.clopen_cover ‚•§ _)).X :=
{ hom := (is_limit_limit_cone _).lift X.cone,
  inv :=
  { to_fun := lift_equiv.symm,
    continuous_to_fun := begin
      rw continuous_iff_is_closed,
      intros S hS,
      convert ‚Üê lift_closed S hS,
      erw equiv.image_eq_preimage lift_equiv,
    end },
  hom_inv_id' := begin
    ext1 x,
    change (lift_equiv.symm (lift_equiv x)) = x,
    simp,
  end,
  inv_hom_id' := begin
    ext1 x,
    change (lift_equiv (lift_equiv.symm x)) = x,
    simp,
  end }

end Profinite
