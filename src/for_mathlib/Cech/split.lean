import category_theory.preadditive
import algebraic_topology.cech_nerve
import for_mathlib.simplicial.complex
import for_mathlib.simplicial.augmented
import for_mathlib.arrow.split
import for_mathlib.fin

namespace category_theory

universes v u

namespace arrow

noncomputable theory
open_locale simplicial
open category_theory.limits

variables {C : Type u} [category.{v} C] (f : arrow C) [split f]
variables [‚àÄ n : ‚Ñï, has_wide_pullback f.right (Œª i : ulift (fin (n+1)), f.left) (Œª i, f.hom)]

/-- The splittings of the Cech nerve associated to a split arrow. -/
def cech_splitting (n : ‚Ñï) : f.cech_nerve _[n] ‚ü∂ f.cech_nerve _[n+1] :=
wide_pullback.lift (wide_pullback.base _)
(Œª i, if h : i.down = 0 then wide_pullback.base _ ‚â´ split.œÉ else wide_pullback.œÄ _ ‚ü®i.down.pred h‚ü©)
begin
  rintro ‚ü®j‚ü©,
  split_ifs,
  tidy,
end

@[simp]
lemma face_zero_œÄ (n : ‚Ñï) (i : fin (n+1)) :
  (f.cech_nerve.Œ¥ 0 : f.cech_nerve _[n+1] ‚ü∂ _) ‚â´ wide_pullback.œÄ _ ‚ü®i‚ü© =
  wide_pullback.œÄ _ ‚ü®i.succ‚ü© :=
begin
  change wide_pullback.lift _ _ _ ‚â´ _ = _,
  simpa,
end

@[simp]
lemma cech_splitting_face_zero (n : ‚Ñï) :
  f.cech_splitting n ‚â´ f.cech_nerve.Œ¥ 0 = ùüô _ :=
begin
  ext ‚ü®j‚ü©,
  dsimp [cech_splitting, simplicial_object.Œ¥],
  simp only [category.id_comp, category.assoc, wide_pullback.lift_œÄ],
  split_ifs,
  { exfalso,
    exact fin.succ_ne_zero _ h },
  { congr,
    dsimp [simplicial_object.Œ¥, simplex_category.Œ¥],
    simp },
  { dsimp [simplicial_object.Œ¥, cech_splitting],
    simp },
end

@[simp]
lemma face_œÄ (n : ‚Ñï) (i : fin (n+1)) (j : fin (n+2)) :
  (f.cech_nerve.Œ¥ j : f.cech_nerve _[n+1] ‚ü∂ _) ‚â´ wide_pullback.œÄ _ ‚ü®i‚ü© =
  wide_pullback.œÄ _ ‚ü®j.succ_above i‚ü© :=
begin
  change wide_pullback.lift _ _ _ ‚â´ _ = _,
  simpa,
end

@[simp]
lemma cech_splitting_face (n : ‚Ñï) (j : fin (n+3)) (hj : j ‚â† 0) :
  f.cech_splitting (n+1) ‚â´ f.cech_nerve.Œ¥ j =
  f.cech_nerve.Œ¥ (j.pred hj) ‚â´ f.cech_splitting n :=
begin
  ext ‚ü®k‚ü©,
  swap,
  { dsimp [cech_splitting, simplicial_object.Œ¥],
    simp },
  { dsimp [cech_splitting, simplicial_object.Œ¥],
    simp only [category.assoc, limits.wide_pullback.lift_œÄ],
    split_ifs with h1 h2,
    { simp },
    { refine false.elim (h2 _),
      change j.succ_above k = 0 at h1,
      change k = 0,
      rwa ‚Üê fin.succ_above_eq_zero_iff _ _ hj },
    { refine false.elim (h1 _),
      erw h,
      change j.succ_above 0 = 0,
      rw fin.succ_above_eq_zero_iff _ _ hj },
    { simp only [category_theory.limits.wide_pullback.lift_œÄ],
      congr,
      change (j.succ_above k).pred h1 = (j.pred hj).succ_above (k.pred h),
      change j.succ_above k ‚â† 0 at h1,
      change k ‚â† 0 at h,
      rw fin.succ_above_pred } }
end

end arrow

namespace arrow

section contracting_homotopy

open category_theory.limits opposite

-- Note: Universe restrictions! I hope this doesn't pose any issues later...
variables {P N : Type u} [category.{v} P] [category.{v} N] [preadditive N] (M : P·µí·µñ ‚•§ N)
variables (f : arrow P) [arrow.split f]
variables [‚àÄ n : ‚Ñï, has_wide_pullback f.right (Œª i : ulift (fin (n+1)), f.left) (Œª i, f.hom)]

@[simps]
def conerve : cosimplicial_object.augmented N :=
{ left := M.obj (op f.right),
  right := f.cech_nerve.right_op ‚ãô M,
  hom :=
  { app := Œª m, M.map (f.augmented_cech_nerve.hom.app (op m)).op,
    naturality' := begin
      -- opposites are annoying.
      intros m n f,
      dsimp,
      simp only [‚Üê M.map_comp, ‚Üê M.map_id],
      congr' 1,
      simp only [‚Üê op_comp, ‚Üê op_id],
      congr' 1,
      simp,
    end } }

def contracting_homotopy : Œ† (n : ‚Ñï),
  (f.conerve M).to_cocomplex.X (n+1) ‚ü∂ (f.conerve M).to_cocomplex.X n
| 0 := M.map $ quiver.hom.op $
         wide_pullback.lift
           (ùüô f.right)
           (Œª i : ulift (fin (0+1)), (split.œÉ : f.right ‚ü∂ f.left))
           (by simp)
| (n+1) := M.map (f.cech_splitting n).op

end contracting_homotopy

end arrow

end category_theory
