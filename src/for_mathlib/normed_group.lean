import topology.algebra.normed_group
import topology.sequences

open_locale big_operators topological_space uniformity
open finset filter

variables {G : Type*} [semi_normed_group G]
          {H : Type*} [semi_normed_group H]

universe u


lemma controlled_sum_of_mem_closure {s : add_subgroup G} {g : G}
  (hg : g ‚àà closure (s : set G)) {b : ‚Ñï ‚Üí ‚Ñù} (b_pos : ‚àÄ n, 0 < b n) :
  ‚àÉ v : ‚Ñï ‚Üí G, tendsto (Œª n, ‚àë i in range (n+1), v i) at_top (ùìù g) ‚àß
               (‚àÄ n, v n ‚àà s) ‚àß
               ‚à•v 0 - g‚à• < b 0 ‚àß ‚àÄ n > 0, ‚à•v n‚à• < b n :=
begin
  obtain ‚ü®u : ‚Ñï ‚Üí G, u_in : ‚àÄ n, u n ‚àà s, lim_u : tendsto u at_top (ùìù g)‚ü© :=
    mem_closure_iff_seq_limit.mp hg,
  obtain ‚ü®n‚ÇÄ, hn‚ÇÄ‚ü© : ‚àÉ n‚ÇÄ, ‚àÄ n ‚â• n‚ÇÄ, ‚à•u n - g‚à• < b 0,
  { have : {x | ‚à•x - g‚à• < b 0} ‚àà ùìù g,
    { simp_rw ‚Üê dist_eq_norm,
      exact metric.ball_mem_nhds _ (b_pos _) },
    exact tendsto_at_top'.mp lim_u _ this },
  set z : ‚Ñï ‚Üí G := Œª n, u (n + n‚ÇÄ),
  have lim_z : tendsto z at_top (ùìù g) := lim_u.comp (tendsto_add_at_top_nat n‚ÇÄ),
  have mem_ùì§ : ‚àÄ n, {p : G √ó G | ‚à•p.1 - p.2‚à• < b (n + 1)} ‚àà ùì§ G :=
  Œª n, by simpa [‚Üê dist_eq_norm] using metric.dist_mem_uniformity (b_pos $ n+1),
  obtain ‚ü®œÜ : ‚Ñï ‚Üí ‚Ñï, œÜ_extr : strict_mono œÜ,
          hœÜ : ‚àÄ n, ‚à•z (œÜ $ n + 1) - z (œÜ n)‚à• < b (n + 1)‚ü© :=
    lim_z.cauchy_seq.subseq_mem mem_ùì§,
  set w : ‚Ñï ‚Üí G := z ‚àò œÜ,
  have hw : tendsto w at_top (ùìù g),
    from lim_z.comp (strict_mono_tendsto_at_top œÜ_extr),
  -- *TODO* in mathlib, move strict_mono_tendsto_at_top into the strict_mono namespace
  set v : ‚Ñï ‚Üí G := Œª i, if i = 0 then w 0 else w i - w (i - 1),
  refine ‚ü®v, tendsto.congr (finset.eq_sum_range_sub' w) hw , _,
          hn‚ÇÄ _ (n‚ÇÄ.le_add_left _), _‚ü©,
  { rintro ‚ü®‚ü©,
    { change w 0 ‚àà s,
      apply u_in },
    { apply s.sub_mem ; apply u_in }, },
  { intros l hl,
    obtain ‚ü®k, rfl‚ü© : ‚àÉ k, l = k+1, exact nat.exists_eq_succ_of_ne_zero (ne_of_gt hl),
    apply hœÜ },
end

lemma controlled_sum_of_mem_closure_range {j : G ‚Üí+ H} {h : H}
  (Hh : h ‚àà (closure $ (j.range : set H))) {b : ‚Ñï ‚Üí ‚Ñù}
  (b_pos : ‚àÄ n, 0 < b n) :
  ‚àÉ g : ‚Ñï ‚Üí G, tendsto (Œª n, ‚àë i in range (n+1), j (g i)) at_top (ùìù h) ‚àß
               ‚à•j (g 0) - h‚à• < b 0 ‚àß ‚àÄ n > 0, ‚à•j (g n)‚à• < b n :=
begin
  rcases controlled_sum_of_mem_closure Hh b_pos with ‚ü®v, sum_v, v_in, hv‚ÇÄ, hv_pos‚ü©,
  choose g hg using v_in,
  change ‚àÄ (n : ‚Ñï), j (g n) = v n at hg,
  refine ‚ü®g, by simpa [‚Üê hg] using sum_v, by simpa [hg 0] using hv‚ÇÄ, Œª n hn,
          by simpa [hg] using hv_pos n hn‚ü©
end
