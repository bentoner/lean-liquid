import category_theory.triangulated.pretriangulated
import for_mathlib.homological_complex_shift

noncomputable theory

open category_theory
open category_theory.preadditive
open category_theory.limits

universes v u

namespace category_theory.triangulated
open category_theory.category

variables (C : Type u) [category.{v} C] [preadditive C]
variables [has_shift C ‚Ñ§]

local attribute [instance, reducible] endofunctor_monoidal_category

namespace triangle

@[simps]
def triangle_shift_obj (T : triangle C) (i : ‚Ñ§) : triangle C :=
triangle.mk C
  (i.neg_one_pow ‚Ä¢ ((shift_functor _ i).map T.mor‚ÇÅ))
  (i.neg_one_pow ‚Ä¢ (((shift_functor _ i).map T.mor‚ÇÇ)))
  (i.neg_one_pow ‚Ä¢ ((shift_functor C i).map T.mor‚ÇÉ ‚â´ (shift_comm _ _ _).hom))

@[simps]
def triangle_shift_map {T‚ÇÅ T‚ÇÇ : triangle C} (f : T‚ÇÅ ‚ü∂ T‚ÇÇ) (i : ‚Ñ§) :
  triangle_shift_obj C T‚ÇÅ i ‚ü∂ triangle_shift_obj C T‚ÇÇ i :=
{ hom‚ÇÅ := (shift_functor _ i).map f.hom‚ÇÅ,
  hom‚ÇÇ := (shift_functor _ i).map f.hom‚ÇÇ,
  hom‚ÇÉ := (shift_functor _ i).map f.hom‚ÇÉ,
  comm‚ÇÅ' := by { dsimp, simp only [functor.map_zsmul,
    preadditive.zsmul_comp, preadditive.comp_zsmul, ‚Üê functor.map_comp, f.comm‚ÇÅ] },
  comm‚ÇÇ' := by { dsimp, simp only [functor.map_zsmul,
    preadditive.zsmul_comp, preadditive.comp_zsmul, ‚Üê functor.map_comp, f.comm‚ÇÇ] },
  comm‚ÇÉ' := begin
    dsimp,
    simp only [functor.map_zsmul,
      preadditive.zsmul_comp, preadditive.comp_zsmul],
    congr' 1,
    simp only [ shift_comm_hom_comp, assoc, iso.cancel_iso_hom_right_assoc,
      ‚Üê functor.map_comp, f.comm‚ÇÉ],
  end }

@[simps]
def triangle_shift_functor (i : ‚Ñ§) : triangle C ‚•§ triangle C :=
{ obj := Œª T, triangle_shift_obj C T i,
  map := Œª T‚ÇÅ T‚ÇÇ f, triangle_shift_map C f _,
  map_id' := begin
    intros T,
    ext,
    all_goals { dsimp, simp },
  end,
  map_comp' := begin
    intros T‚ÇÅ T‚ÇÇ T‚ÇÉ f g,
    ext,
    all_goals { dsimp, simp },
  end, } .

variable {C}

@[simps]
def iso.of_components {T‚ÇÅ T‚ÇÇ : triangle C}
  (e‚ÇÅ : T‚ÇÅ.obj‚ÇÅ ‚âÖ T‚ÇÇ.obj‚ÇÅ)
  (e‚ÇÇ : T‚ÇÅ.obj‚ÇÇ ‚âÖ T‚ÇÇ.obj‚ÇÇ)
  (e‚ÇÉ : T‚ÇÅ.obj‚ÇÉ ‚âÖ T‚ÇÇ.obj‚ÇÉ) (h‚ÇÅ h‚ÇÇ h‚ÇÉ) : T‚ÇÅ ‚âÖ T‚ÇÇ :=
{ hom :=
  { hom‚ÇÅ := e‚ÇÅ.hom,
    hom‚ÇÇ := e‚ÇÇ.hom,
    hom‚ÇÉ := e‚ÇÉ.hom,
    comm‚ÇÅ' := h‚ÇÅ,
    comm‚ÇÇ' := h‚ÇÇ,
    comm‚ÇÉ' := h‚ÇÉ },
  inv :=
  { hom‚ÇÅ := e‚ÇÅ.inv,
    hom‚ÇÇ := e‚ÇÇ.inv,
    hom‚ÇÉ := e‚ÇÉ.inv,
    comm‚ÇÅ' := by rw [iso.comp_inv_eq, category.assoc, iso.eq_inv_comp, h‚ÇÅ],
    comm‚ÇÇ' := by rw [iso.comp_inv_eq, category.assoc, iso.eq_inv_comp, h‚ÇÇ],
    comm‚ÇÉ' := by rw [‚Üê functor.map_iso_inv, iso.comp_inv_eq, category.assoc, iso.eq_inv_comp,
      functor.map_iso_hom, h‚ÇÉ], },
  hom_inv_id' := by ext; dsimp; simp,
  inv_hom_id' := by ext; dsimp; simp }
.

variable (C)

@[simps]
def triangle_shift_functor_Œµ : ùü≠ (triangulated.triangle C) ‚âÖ triangle_shift_functor C 0 :=
nat_iso.of_components (Œª T,
  iso.of_components
    (shift_zero _ _).symm
    (shift_zero _ _).symm
    (shift_zero _ _).symm
    sorry -- use ((shift_functor_zero _ _).inv.naturality _)
    sorry -- use ((shift_functor_zero _ _).inv.naturality _)
    begin
      dsimp,
      rw one_smul,
      rw ‚Üê nat_trans.naturality_assoc, dsimp [shift_comm],
      simp only [obj_Œµ_app, discrete.functor_map_id, nat_trans.id_app, Œµ_app_obj, assoc, id_comp],
      rw [‚Üê nat_trans.comp_app, ‚Üê nat_trans.comp_app],
      erw [monoidal_functor.Œº_inv_hom_id_assoc, id_comp], refl,
    end)
  begin
    intros T‚ÇÅ T‚ÇÇ f, ext;
    { dsimp only [triangle_morphism.comp_hom‚ÇÅ, iso.of_components_hom_hom‚ÇÅ, triangle_shift_map_hom‚ÇÅ,
        triangle_morphism.comp_hom‚ÇÇ, iso.of_components_hom_hom‚ÇÇ, triangle_shift_map_hom‚ÇÇ,
        triangle_morphism.comp_hom‚ÇÉ, iso.of_components_hom_hom‚ÇÉ, triangle_shift_map_hom‚ÇÉ,
        functor.id_map, triangle_category_comp, iso.symm_hom, iso.app_inv, iso.symm_inv,
        monoidal_functor.Œµ_iso_hom, triangle_shift_functor_map],
      rw ‚Üê nat_trans.naturality _ _, refl },
  end
.

@[simps]
def triangle_shift_functor_Œº (i j : ‚Ñ§) : triangle_shift_functor C i ‚ãô triangle_shift_functor C j ‚âÖ
    triangle_shift_functor C (i + j) :=
nat_iso.of_components (Œª T,
  iso.of_components
    (shift_add _ _ _).symm
    (shift_add _ _ _).symm
    (shift_add _ _ _).symm
    sorry -- use ((shift_functor_add _ _ _).inv.naturality _ )
    sorry -- use ((shift_functor_add _ _ _).inv.naturality _ )
    begin
      /-
      dsimp,
      rw ‚Üê nat_trans.naturality_assoc,
      simp only [functor.map_comp, assoc, obj_Œº_app, functor.comp_map],
      congr' 1,
      rw [‚Üê nat_trans.comp_app, ‚Üê nat_trans.comp_app],
      -/
      sorry
    end)
  begin
    intros T‚ÇÅ T‚ÇÇ f, ext;
    { dsimp only [triangle_morphism.comp_hom‚ÇÅ, iso.of_components_hom_hom‚ÇÅ, triangle_shift_map_hom‚ÇÅ,
        triangle_morphism.comp_hom‚ÇÇ, iso.of_components_hom_hom‚ÇÇ, triangle_shift_map_hom‚ÇÇ,
        triangle_morphism.comp_hom‚ÇÉ, iso.of_components_hom_hom‚ÇÉ, triangle_shift_map_hom‚ÇÉ,
        functor.id_map, triangle_category_comp, iso.symm_hom, iso.app_inv, iso.symm_inv,
        monoidal_functor.Œµ_iso_hom, triangle_shift_functor_map],
      rw ‚Üê nat_trans.naturality _ _, refl },
  end

def triangle_shift_core : shift_mk_core (triangle C) ‚Ñ§ :=
{ F := triangle_shift_functor _,
  Œµ := triangle_shift_functor_Œµ _,
  Œº := Œª i j, triangle_shift_functor_Œº _ _ _,
  associativity := sorry,
  left_unitality := sorry,
  right_unitality := sorry }

instance : has_shift (triangle C) ‚Ñ§ :=
has_shift_mk _ _ $ triangle_shift_core _

@[simp]
lemma shift_obj‚ÇÅ (T : triangle C) (i : ‚Ñ§) : T‚ü¶i‚üß.obj‚ÇÅ = T.obj‚ÇÅ‚ü¶i‚üß := rfl

@[simp]
lemma shift_obj‚ÇÇ (T : triangle C) (i : ‚Ñ§) : T‚ü¶i‚üß.obj‚ÇÇ = T.obj‚ÇÇ‚ü¶i‚üß := rfl

@[simp]
lemma shift_obj‚ÇÉ (T : triangle C) (i : ‚Ñ§) : T‚ü¶i‚üß.obj‚ÇÉ = T.obj‚ÇÉ‚ü¶i‚üß := rfl

@[simp]
lemma shift_mor‚ÇÅ (T : triangle C) (i : ‚Ñ§) : T‚ü¶i‚üß.mor‚ÇÅ = i.neg_one_pow ‚Ä¢ T.mor‚ÇÅ‚ü¶i‚üß' := rfl

@[simp]
lemma shift_mor‚ÇÇ (T : triangle C) (i : ‚Ñ§) : T‚ü¶i‚üß.mor‚ÇÇ = i.neg_one_pow ‚Ä¢ T.mor‚ÇÇ‚ü¶i‚üß' := rfl

@[simp]
lemma shift_mor‚ÇÉ (T : triangle C) (i : ‚Ñ§) :
  T‚ü¶i‚üß.mor‚ÇÉ = i.neg_one_pow ‚Ä¢ (T.mor‚ÇÉ‚ü¶i‚üß' ‚â´ (shift_comm _ _ _).hom) := rfl

@[simp]
lemma shift_hom‚ÇÅ {T‚ÇÅ T‚ÇÇ : triangle C} (f : T‚ÇÅ ‚ü∂ T‚ÇÇ) (i : ‚Ñ§) : f‚ü¶i‚üß'.hom‚ÇÅ = f.hom‚ÇÅ‚ü¶i‚üß' := rfl

@[simp]
lemma shift_hom‚ÇÇ {T‚ÇÅ T‚ÇÇ : triangle C} (f : T‚ÇÅ ‚ü∂ T‚ÇÇ) (i : ‚Ñ§) : f‚ü¶i‚üß'.hom‚ÇÇ = f.hom‚ÇÇ‚ü¶i‚üß' := rfl

@[simp]
lemma shift_hom‚ÇÉ {T‚ÇÅ T‚ÇÇ : triangle C} (f : T‚ÇÅ ‚ü∂ T‚ÇÇ) (i : ‚Ñ§) : f‚ü¶i‚üß'.hom‚ÇÉ = f.hom‚ÇÉ‚ü¶i‚üß' := rfl

end triangle

/-
instance {C : Type*} [category C] [preadditive C] (X Y : C) : has_neg (X ‚âÖ Y) :=
‚ü®Œª f,
{ hom := -f.hom,
  inv := -f.inv,
  hom_inv_id' := by simp only [comp_neg, neg_comp, iso.hom_inv_id, neg_neg],
  inv_hom_id' := by simp only [comp_neg, neg_comp, iso.inv_hom_id, neg_neg] }‚ü©

@[simp] lemma _root_.category_theory.neg_hom
   {C : Type*} [category C] [preadditive C] {X Y : C} (f : X ‚âÖ Y) :
   (-f).hom = -(f.hom) := rfl

@[simp] lemma _root_.category_theory.neg_inv
   {C : Type*} [category C] [preadditive C] {X Y : C} (f : X ‚âÖ Y) :
   (-f).inv = -(f.inv) := rfl
-/

namespace pretriangulated
variables [has_zero_object C] [‚àÄ (i : ‚Ñ§), (shift_functor C i).additive] [pretriangulated C]

lemma shift_of_dist_triangle (T : triangle C) (hT : T ‚àà dist_triang C) (i : ‚Ñ§) :
  T‚ü¶i‚üß ‚àà dist_triang C :=
begin
  induction i using int.induction_on with i IH i IH,
  { exact isomorphic_distinguished T hT _ (shift_zero _ _), },
  { suffices : T‚ü¶(i+1 : ‚Ñ§)‚üß ‚âÖ T‚ü¶(i:‚Ñ§)‚üß.rotate.rotate.rotate,
    { refine isomorphic_distinguished _ _ _ this,
      repeat { refine rot_of_dist_triangle _ _ _ },
      exact IH },
    refine shift_add _ _ _ ‚â™‚â´ _,
    refine triangle.iso.of_components (iso.refl _) (iso.refl _) (iso.refl _) _ _ _,
    { dsimp, simp only [category.id_comp, category.comp_id, comp_neg, neg_one_smul], },
    { dsimp, simp only [category.id_comp, category.comp_id, neg_comp, neg_one_smul], },
    { dsimp, simp only [category.id_comp, category.comp_id, neg_comp, neg_one_smul],
      simp only [functor.map_comp, assoc, category_theory.functor.map_id, comp_id,
        functor.map_zsmul, preadditive.zsmul_comp, preadditive.comp_zsmul],
      congr' 2,
      sorry }, },
  sorry
end

end pretriangulated

end category_theory.triangulated
