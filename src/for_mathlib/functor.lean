import category_theory.functor_category
import category_theory.yoneda

namespace category_theory

namespace functor

universe variables v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

variables {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} {E : Type u‚ÇÉ}
variables [category.{v‚ÇÅ} C] [category.{v‚ÇÇ} D] [category.{v‚ÇÉ} E]

@[simps]
def uncurry (F : C ‚•§ D ‚•§ E) : C √ó D ‚•§ E :=
{ obj := Œª X, (F.obj X.1).obj X.2,
  map := Œª X Y f, (F.obj X.1).map f.2 ‚â´ (F.map f.1).app Y.2 }

@[simps]
def curry (F : C √ó D ‚•§ E) : C ‚•§ D ‚•§ E :=
{ obj := Œª X,
  { obj := Œª Y, F.obj (X, Y),
    map := Œª Y‚ÇÅ Y‚ÇÇ g, F.map (ùüô _, g),
    map_id' := Œª Y, F.map_id _,
    map_comp' := by { intros, rw ‚Üê F.map_comp, dsimp, rw category.comp_id } },
  map := Œª X‚ÇÅ X‚ÇÇ f,
  { app := Œª Y, F.map (f, ùüô _),
    naturality' := by { intros, dsimp, simp only [‚Üê F.map_comp], dsimp,
      simp only [category.comp_id, category.id_comp] } },
  map_id' := Œª X, by { dsimp, ext, dsimp, exact F.map_id _ },
  map_comp' := by { intros, dsimp, ext, dsimp, rw ‚Üê F.map_comp, dsimp, rw category.comp_id } }

end functor

end category_theory
