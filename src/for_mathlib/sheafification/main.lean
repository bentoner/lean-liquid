import category_theory.limits.concrete_category
import for_mathlib.sheafification.plus_sheaf_condition
import for_mathlib.concrete_filtered
import for_mathlib.concrete_multiequalizer

noncomputable theory

namespace category_theory.grothendieck_topology

open category_theory
open category_theory.limits
open opposite

universes w v u
variables {C : Type u} [category.{v} C] {D : Type w}
  [category.{max v u} D] {J : grothendieck_topology C}

variables [has_limits D] [has_colimits D]
variables [concrete_category.{max v u} D]
variables [preserves_limits (forget D)]
variables [‚àÄ (X : C), preserves_colimits_of_shape (J.cover X)·µí·µñ (forget D)]
variables [reflects_isomorphisms (forget D)]

local attribute [instance]
  concrete_category.has_coe_to_sort concrete_category.has_coe_to_fun

namespace plus

def meq {X : C} (P : C·µí·µñ ‚•§ D) (S : J.cover X) :=
{ x : Œ† (I : S.L), P.obj (op I.Y) //
  ‚àÄ (I : S.R), P.map I.g‚ÇÅ.op (x ‚ü®_, I.f‚ÇÅ, I.h‚ÇÅ‚ü©) = P.map I.g‚ÇÇ.op (x ‚ü®_, I.f‚ÇÇ, I.h‚ÇÇ‚ü©) }

namespace meq

instance {X} (P : C·µí·µñ ‚•§ D) (S : J.cover X) : has_coe_to_fun (meq P S)
  (Œª x, Œ† (I : S.L), P.obj (op I.Y)) := ‚ü®Œª x, x.1‚ü©

@[ext]
lemma ext {X} {P : C·µí·µñ ‚•§ D} {S : J.cover X} (x y : meq P S)
  (h : ‚àÄ I : S.L, x I = y I) : x = y := subtype.ext $ funext $ h

lemma condition {X} {P : C·µí·µñ ‚•§ D} {S : J.cover X} (x : meq P S) (I : S.R) :
  P.map I.g‚ÇÅ.op (x ((S.index P).fst_to I)) = P.map I.g‚ÇÇ.op (x ((S.index P).snd_to I)) := x.2 _

lemma condition' {X} {P : C·µí·µñ ‚•§ D} {S : J.cover X} (x : meq P S) (I : S.R) :
  P.map I.g‚ÇÅ.op (x ‚ü®_, I.f‚ÇÅ, I.h‚ÇÅ‚ü©) = P.map I.g‚ÇÇ.op (x ‚ü®_, I.f‚ÇÇ, I.h‚ÇÇ‚ü©) := x.2 _

def refine {X : C} {P : C·µí·µñ ‚•§ D} {S T : J.cover X} (x : meq P T) (e : S ‚ü∂ T) :
  meq P S :=
‚ü®Œª I, x ‚ü®I.Y, I.f, (le_of_hom e) _ I.hf‚ü©,
  Œª I, x.condition' ‚ü®I.Y‚ÇÅ, I.Y‚ÇÇ, I.Z, I.g‚ÇÅ, I.g‚ÇÇ, I.f‚ÇÅ, I.f‚ÇÇ,
    (le_of_hom e) _ I.h‚ÇÅ, (le_of_hom e) _ I.h‚ÇÇ, I.w‚ü©‚ü©

@[simp]
lemma refine_apply {X : C} {P : C·µí·µñ ‚•§ D} {S T : J.cover X} (x : meq P T) (e : S ‚ü∂ T)
  (I : S.L) : x.refine e I = x ‚ü®I.Y, I.f, (le_of_hom e) _ I.hf‚ü© := rfl

def pullback {Y X : C} {P : C·µí·µñ ‚•§ D} {S : J.cover X} (x : meq P S) (f : Y ‚ü∂ X) :
  meq P ((J.pullback f).obj S) :=
‚ü®Œª I, x ‚ü®_,I.f ‚â´ f, I.hf‚ü©, Œª I, x.condition
  ‚ü®I.Y‚ÇÅ, I.Y‚ÇÇ, I.Z, I.g‚ÇÅ, I.g‚ÇÇ, I.f‚ÇÅ ‚â´ f, I.f‚ÇÇ ‚â´ f, I.h‚ÇÅ, I.h‚ÇÇ, by simp [reassoc_of I.w]‚ü© ‚ü©

@[simp]
lemma pullback_apply {Y X : C} {P : C·µí·µñ ‚•§ D} {S : J.cover X} (x : meq P S) (f : Y ‚ü∂ X)
  (I : ((J.pullback f).obj S).L) : x.pullback f I = x ‚ü®_, I.f ‚â´ f, I.hf‚ü© := rfl

@[simp]
lemma pullback_refine {Y X : C} {P : C·µí·µñ ‚•§ D} {S T : J.cover X} (h : S ‚ü∂ T)
  (f : Y ‚ü∂ X) (x : meq P T) : (x.pullback f).refine
  ((J.pullback f).map h) = (refine x h).pullback _ := rfl

def equiv_aux {X : C} (P : C·µí·µñ ‚•§ D) (S : J.cover X) :
  ((S.index P).multicospan ‚ãô (forget D)).sections ‚âÉ meq P S :=
{ to_fun := Œª x, ‚ü®Œª I, x.1 (walking_multicospan.left _), begin
    intros I,
    have a := x.2 (walking_multicospan.hom.fst I),
    have b := x.2 (walking_multicospan.hom.snd I),
    rw ‚Üê b at a,
    exact a,
  end‚ü©,
  inv_fun := Œª x,
  { val := Œª t,
    match t with
    | walking_multicospan.left a := x _
    | walking_multicospan.right b := P.map b.g‚ÇÅ.op (x ‚ü®_, b.f‚ÇÅ, b.h‚ÇÅ‚ü©)
    end,
    property := begin
      rintros (a|b) (a'|b') (f|f|f),
      { change ((S.index P).multicospan.map (ùüô _)) _ = _, simp },
      { refl },
      { dsimp, erw ‚Üê x.condition b', refl },
      { change ((S.index P).multicospan.map (ùüô _)) _ = _, simp },
    end },
  left_inv := begin
    intros x, ext (a|b),
    { refl },
    { change _ = x.val _,
      rw ‚Üê x.2 (walking_multicospan.hom.fst b),
      refl }
  end,
  right_inv := by { intros x, ext i, refl } }

def equiv {X : C} (P : C·µí·µñ ‚•§ D) (S : J.cover X) :
  (multiequalizer (S.index P) : D) ‚âÉ meq P S :=
let h1 := (limit.is_limit (S.index P).multicospan),
    h2 := (is_limit_of_preserves (forget D) h1),
    E := h2.cone_point_unique_up_to_iso (types.limit_cone_is_limit _) in
equiv.trans E.to_equiv (equiv_aux P S)

@[simp]
lemma equiv_apply {X : C} {P : C·µí·µñ ‚•§ D} {S : J.cover X} (x : multiequalizer (S.index P))
  (I : S.L) : equiv P S x I = multiequalizer.Œπ (S.index P) I x := rfl

@[simp]
lemma equiv_symm_eq_apply {X : C} {P : C·µí·µñ ‚•§ D} {S : J.cover X} (x : meq P S) (I : S.L) :
  multiequalizer.Œπ (S.index P) I ((meq.equiv P S).symm x) = x I :=
begin
  let z := (meq.equiv P S).symm x,
  rw ‚Üê equiv_apply,
  simp,
end

def mk {X : C} {P : C·µí·µñ ‚•§ D} (S : J.cover X) (x : P.obj (op X)) : meq P S :=
‚ü®Œª I, P.map I.f.op x, Œª I, by { dsimp, simp only [‚Üê comp_apply, ‚Üê P.map_comp, ‚Üê op_comp, I.w] }‚ü©

lemma mk_apply {X : C} {P : C·µí·µñ ‚•§ D} (S : J.cover X) (x : P.obj (op X)) (I : S.L) :
  mk S x I = P.map I.f.op x := rfl

end meq

def mk {X : C} {P : C·µí·µñ ‚•§ D} {S : J.cover X} (x : meq P S) : (J.plus_obj P).obj (op X) :=
colimit.Œπ (J.diagram P X) (op S) ((meq.equiv P S).symm x)

lemma exists_rep {X : C} {P : C·µí·µñ ‚•§ D} (x : (J.plus_obj P).obj (op X)) :
  ‚àÉ (S : J.cover X) (y : meq P S), x = mk y :=
begin
  obtain ‚ü®S,y,h‚ü© := concrete.colimit_exists_rep (J.diagram P X) x,
  use [S.unop],
  dsimp [diagram] at y,
  use meq.equiv _ _ y,
  rw ‚Üê h,
  dsimp [mk],
  simp,
end

@[simp]
lemma res_mk_eq_mk_pullback {Y X : C} {P : C·µí·µñ ‚•§ D} {S : J.cover X} (x : meq P S) (f : Y ‚ü∂ X) :
  (J.plus_obj P).map f.op (mk x) = mk (x.pullback f) :=
begin
  dsimp [mk],
  simp only [‚Üê comp_apply],
  simp only [comp_apply, colimit.Œπ_pre, Œπ_colim_map_assoc],
  congr' 1,
  apply_fun meq.equiv P _,
  swap, { apply_instance },
  erw equiv.apply_symm_apply,
  ext i,
  simp only [grothendieck_topology.diagram_pullback_app,
    meq.pullback_apply, meq.equiv_apply, ‚Üê comp_apply],
  erw [multiequalizer.lift_Œπ, meq.equiv_symm_eq_apply],
  cases i, refl,
end

lemma to_plus_mk {X : C} {P : C·µí·µñ ‚•§ D} (S : J.cover X) (x : P.obj (op X)) :
  (J.to_plus_app P).app _ x = mk (meq.mk S x) :=
begin
  dsimp [mk],
  let e : S ‚ü∂ ‚ä§ := hom_of_le (semilattice_inf_top.le_top _),
  rw ‚Üê colimit.w _ e.op,
  delta cover.to_multiequalizer,
  simp only [comp_apply],
  congr' 1,
  dsimp [diagram],
  apply concrete.multiequalizer.eq_of_forall_eq _ _ (limit.is_limit _),
  swap, { apply_instance },
  intros i,
  change multiequalizer.Œπ (S.index P) i _ = multiequalizer.Œπ (S.index P) i _,
  simp only [‚Üê comp_apply, category.assoc, multiequalizer.lift_Œπ,
    category.comp_id, meq.equiv_symm_eq_apply],
  refl,
end

lemma to_plus_apply {X : C} {P : C·µí·µñ ‚•§ D} {S : J.cover X} (x : meq P S) (I : S.L) :
  (J.to_plus_app P).app _ (x I) = (J.plus_obj P).map I.f.op (mk x) :=
begin
  dsimp only [to_plus_app],
  delta cover.to_multiequalizer,
  dsimp [mk],
  simp only [‚Üê comp_apply],
  simp only [comp_apply, colimit.Œπ_pre, Œπ_colim_map_assoc],
  dsimp only [functor.op],
  let e : (J.pullback I.f).obj (unop (op S)) ‚ü∂ ‚ä§ := hom_of_le (semilattice_inf_top.le_top _),
  rw ‚Üê colimit.w _ e.op,
  simp only [comp_apply],
  congr' 1,
  apply concrete.multiequalizer.eq_of_forall_eq _ _ (limit.is_limit _),
  swap, { apply_instance },
  intros i,
  change multiequalizer.Œπ (((J.pullback I.f).obj S).index P) i _ =
    multiequalizer.Œπ (((J.pullback I.f).obj S).index P) i _,
  dsimp [diagram],
  simp only [‚Üê comp_apply, category.assoc, multiequalizer.lift_Œπ,
    category.comp_id, meq.equiv_symm_eq_apply],
  dsimp [cover.map_L],
  let RR : S.R :=
  { Y‚ÇÅ := _,
    Y‚ÇÇ := _,
    Z := _,
    g‚ÇÅ := i.f,
    g‚ÇÇ := ùüô _,
    f‚ÇÅ := I.f,
    f‚ÇÇ := i.f ‚â´ I.f,
    h‚ÇÅ := I.hf,
    h‚ÇÇ := sieve.downward_closed _ I.hf _,
    w := by simp },
  have := x.condition' RR,
  cases I,
  erw this,
  dsimp [RR],
  simpa,
end

lemma to_plus_eq_mk {X : C} {P : C·µí·µñ ‚•§ D} (x : P.obj (op X)) :
  (J.to_plus_app P).app _ x = mk (meq.mk ‚ä§ x) :=
begin
  dsimp [mk],
  delta cover.to_multiequalizer,
  simp only [comp_apply],
  congr' 1,
  apply_fun (meq.equiv P ‚ä§),
  swap, { apply_instance },
  simp only [equiv.apply_symm_apply],
  ext i,
  simpa,
end

lemma eq_mk_iff_exists {X : C} {P : C·µí·µñ ‚•§ D} {S T : J.cover X}
  (x : meq P S) (y : meq P T) : mk x = mk y ‚Üî (‚àÉ (W : J.cover X) (h1 : W ‚ü∂ S) (h2 : W ‚ü∂ T),
    x.refine h1 = y.refine h2) :=
begin
  split,
  { intros h,
    dsimp [mk] at h,
    obtain ‚ü®W,h1,h2,hh‚ü© :=
      concrete.colimit_exists_of_eq_of_filtered (J.diagram P X) _ _ _ (colimit.is_colimit _) h,
    use [W.unop, h1.unop, h2.unop],
    ext I,
    apply_fun (multiequalizer.Œπ (W.unop.index P) I) at hh,
    convert hh,
    all_goals {
      dsimp [diagram],
      simp only [‚Üê comp_apply, multiequalizer.lift_Œπ],
      simp only [category.comp_id, meq.equiv_symm_eq_apply],
      cases I, refl } },
  { rintros ‚ü®S,h1,h2,e‚ü©,
    dsimp only [mk],
    apply concrete.colimit_eq_of_exists,
    swap, { apply colimit.is_colimit },
    use [(op S), h1.op, h2.op],
    apply concrete.multiequalizer.eq_of_forall_eq _ _ (limit.is_limit _),
    swap, { apply_instance },
    intros i,
    change (multiequalizer.Œπ (S.index P) _) _ = (multiequalizer.Œπ (S.index P) _) _,
    apply_fun (Œª ee, ee i) at e,
    convert e,
    all_goals {
      dsimp [diagram],
      simp only [‚Üê comp_apply, multiequalizer.lift_Œπ],
      simp,
      cases i, refl } },
end


theorem injective {X : C} (P : C·µí·µñ ‚•§ D) (S : J.cover X)
  (x y : (J.plus_obj P).obj (op X))
  (h : ‚àÄ (I : S.L), (J.plus_obj P).map I.f.op x = (J.plus_obj P).map I.f.op y) :
  x = y :=
begin
  obtain ‚ü®Sx,x,rfl‚ü© := exists_rep x,
  obtain ‚ü®Sy,y,rfl‚ü© := exists_rep y,
  simp only [res_mk_eq_mk_pullback] at h,
  choose W h1 h2 hh using Œª (I : S.L), (eq_mk_iff_exists _ _).mp (h I),
  rw eq_mk_iff_exists,
  let B : J.cover X := ‚ü®sieve.bind S (Œª Y f hf, W ‚ü®_, f, hf‚ü©),
    J.bind_covering S.condition (Œª _ _ _, (W _).condition)‚ü©,
  use B,
  let ex : B ‚ü∂ Sx := hom_of_le begin
    rintros Y f ‚ü®Z,e1,e2,he2,he1,hee‚ü©,
    rw ‚Üê hee,
    apply le_of_hom (h1 ‚ü®_, _, he2‚ü©),
    exact he1,
  end,
  let ey : B ‚ü∂ Sy := hom_of_le begin
    rintros Y f ‚ü®Z,e1,e2,he2,he1,hee‚ü©,
    rw ‚Üê hee,
    apply le_of_hom (h2 ‚ü®_, _, he2‚ü©),
    exact he1,
  end,
  use [ex, ey],
  ext1,
  choose Z e1 e2 he2 he1 hee using I.hf,
  let IS : S.L := ‚ü®Z, e2, he2‚ü©,
  specialize hh IS,
  let IW : (W IS).L := ‚ü®_, e1, he1‚ü©,
  apply_fun (Œª e, e IW) at hh,
  convert hh,
  { dsimp,
    let Rx : Sx.R := ‚ü®I.Y, I.Y, I.Y, ùüô _, ùüô _, I.f, e1 ‚â´ e2, _, _, by simp [hee]‚ü©,
    have := x.condition' Rx,
    dsimp [Rx] at this,
    simpa using this },
  { dsimp,
    let Ry : Sy.R := ‚ü®I.Y, I.Y, I.Y, ùüô _, ùüô _, I.f, e1 ‚â´ e2, _, _, by simp [hee]‚ü©,
    have := y.condition' Ry,
    dsimp [Ry] at this,
    simpa using this },
end

theorem surjective (P : C·µí·µñ ‚•§ D)
  (sep : ‚àÄ (X : C) (S : J.cover X) (x y : P.obj (op X)),
    (‚àÄ I : S.L, P.map I.f.op x = P.map I.f.op y) ‚Üí x = y)
  (X : C) (S : J.cover X)
  (s : meq (J.plus_obj P) S) :
  ‚àÉ t : (J.plus_obj P).obj (op X), meq.mk S t = s :=
begin
  have inj : ‚àÄ (X : C), function.injective ((J.to_plus_app P).app (op X)),
  { intros X x y h,
    simp only [to_plus_eq_mk] at h,
    rw eq_mk_iff_exists at h,
    obtain ‚ü®W,h1,h2,hh‚ü© := h,
    specialize sep X W,
    apply sep,
    intros I,
    apply_fun (Œª e, e I) at hh,
    exact hh },
  choose T t ht using Œª I, exists_rep (s I),
  let B : J.cover X := ‚ü®sieve.bind S (Œª Y f hf, T ‚ü®Y,f,hf‚ü©),
    J.bind_covering S.condition (Œª _ _ _, (T _).condition)‚ü©,
  choose Z e1 e2 he2 he1 hee using Œª I : B.L, I.hf,
  let w : meq P B := ‚ü®Œª I, t ‚ü®Z I, e2 I, he2 I‚ü© ‚ü®I.Y, e1 I, he1 I‚ü©, _‚ü©,
  swap, {
    intros I,
    let I‚ÇÅ : B.L := ‚ü®_, I.f‚ÇÅ, I.h‚ÇÅ‚ü©,
    let I‚ÇÇ : B.L := ‚ü®_, I.f‚ÇÇ, I.h‚ÇÇ‚ü©,
    let IC‚ÇÅ : S.L := ‚ü®_, e2 I‚ÇÅ, he2 I‚ÇÅ‚ü©,
    let IC‚ÇÇ : S.L := ‚ü®_, e2 I‚ÇÇ, he2 I‚ÇÇ‚ü©,
    let ID‚ÇÅ : (T IC‚ÇÅ).L := ‚ü®_, e1 I‚ÇÅ, he1 I‚ÇÅ‚ü©,
    let ID‚ÇÇ : (T IC‚ÇÇ).L := ‚ü®_, e1 I‚ÇÇ, he1 I‚ÇÇ‚ü©,
    change (P.map I.g‚ÇÅ.op) (t IC‚ÇÅ ID‚ÇÅ) = (P.map I.g‚ÇÇ.op) (t IC‚ÇÇ ID‚ÇÇ),
    apply inj,
    rw [‚Üê comp_apply, ‚Üê comp_apply, (J.to_plus_app P).naturality, (J.to_plus_app P).naturality,
      comp_apply, comp_apply],
    rw [@to_plus_apply C _ D _ J _ _ _ _ _ _ _ _ (T IC‚ÇÅ) (t IC‚ÇÅ) ID‚ÇÅ,
      @to_plus_apply C _ D _ J _ _ _ _ _ _ _ _ (T IC‚ÇÇ) (t IC‚ÇÇ) ID‚ÇÇ,
      ‚Üê ht, ‚Üê ht, ‚Üê comp_apply, ‚Üê comp_apply, ‚Üê (J.plus_obj P).map_comp,
      ‚Üê (J.plus_obj P).map_comp, ‚Üê op_comp, ‚Üê op_comp],
    let IR : S.R :=
    { Y‚ÇÅ := _,
      Y‚ÇÇ := _,
      Z := _,
      g‚ÇÅ := I.g‚ÇÅ ‚â´ ID‚ÇÅ.f,
      g‚ÇÇ := I.g‚ÇÇ ‚â´ ID‚ÇÇ.f,
      f‚ÇÅ := e2 I‚ÇÅ,
      f‚ÇÇ := e2 I‚ÇÇ,
      h‚ÇÅ := he2 _,
      h‚ÇÇ := he2 _,
      w := _ },
    swap, { dsimp [ID‚ÇÅ, ID‚ÇÇ], simp_rw [category.assoc, hee], exact I.w },
    exact s.condition' IR },
  use mk w,
  ext I,
  rw ht,
  dsimp only [meq.mk],
  change (J.plus_obj P).map _ _ = _,
  erw [res_mk_eq_mk_pullback],
  apply injective P (T I),
  intros II,
  simp only [res_mk_eq_mk_pullback],
  rw eq_mk_iff_exists,
  use (J.pullback II.f).obj (T I),
  let e0 : (J.pullback II.f).obj (T I) ‚ü∂ (J.pullback II.f).obj ((J.pullback I.f).obj B) :=
    hom_of_le begin
      rintros Y f hf,
      fapply sieve.le_pullback_bind,
      { exact I.hf },
      { cases I,
        exact hf },
    end,
  use [e0, ùüô _],
  ext IV,
  dsimp only [meq.refine_apply],
  dsimp only [meq.pullback_apply],
  dsimp [w],
  let IA : B.L := {Y := IV.Y, f := (IV.f ‚â´ II.f) ‚â´ I.f, hf := _},
  swap, {
    refine ‚ü®I.Y,_,_,I.hf,_,rfl‚ü©,
    apply sieve.downward_closed,
    dsimp,
    convert II.hf,
    cases I, refl },
  let IB : S.L := {Y := Z IA, f := e2 IA, hf := _},
  swap, { apply he2, },
  let IC : (T IB).L := {Y := IV.Y, f := e1 IA, hf := _},
  swap, { apply he1, },
  let ID : (T I).L := {Y := IV.Y, f := IV.f ‚â´ II.f, hf := _},
  swap, { apply sieve.downward_closed, apply II.hf, },
  change t IB IC = t I ID,
  apply inj IV.Y,
  erw @to_plus_apply C _ D _ J _ _ _ _ _ _ _ _ (T I) (t I) ID,
  erw @to_plus_apply C _ D _ J _ _ _ _ _ _ _ _ (T IB) (t IB) IC,
  rw [‚Üê ht, ‚Üê ht],
  dsimp only,
  let IR : S.R :=
  { Y‚ÇÅ := _,
    Y‚ÇÇ := _,
    Z := IV.Y,
    g‚ÇÅ := e1 IA,
    g‚ÇÇ := IV.f ‚â´ II.f,
    f‚ÇÅ := e2 IA,
    f‚ÇÇ := I.f,
    h‚ÇÅ := he2 _,
    h‚ÇÇ := I.hf,
    w := _ },
  swap, { rw hee },
  convert s.condition' IR,
  cases I, refl,
end .

theorem is_sheaf_of_sep (P : C·µí·µñ ‚•§ D)
  (sep : ‚àÄ (X : C) (S : J.cover X) (x y : P.obj (op X)),
    (‚àÄ I : S.L, P.map I.f.op x = P.map I.f.op y) ‚Üí x = y) :
  presheaf.is_sheaf J (J.plus_obj P) :=
begin
  rw presheaf.is_sheaf_iff_multiequalizer,
  intros X S,
  apply is_iso_of_reflects_iso _ (forget D),
  rw is_iso_iff_bijective,
  split,
  { intros x y h,
    apply injective P S _ _,
    intros I,
    apply_fun (meq.equiv _ _) at h,
    apply_fun (Œª e, e I) at h,
    convert h,
    { rw meq.equiv_apply,
      erw [‚Üê comp_apply, multiequalizer.lift_Œπ] },
    { rw meq.equiv_apply,
      erw [‚Üê comp_apply, multiequalizer.lift_Œπ] } },
  { rintros (x : (multiequalizer (S.index _) : D)),
    obtain ‚ü®t,ht‚ü© := surjective P sep X S (meq.equiv _ _ x),
    use t,
    apply_fun meq.equiv _ _,
    swap, { apply_instance },
    swap, { apply_instance },
    swap, { apply_instance },
    swap, { apply_instance },
    rw ‚Üê ht,
    ext i,
    dsimp,
    erw [‚Üê comp_apply, multiequalizer.lift_Œπ],
    refl }
end

end plus
end category_theory.grothendieck_topology
