import category_theory.sites.sheaf_of_types
import category_theory.sites.grothendieck
import category_theory.filtered
import category_theory.limits.shapes.multiequalizer

namespace category_theory.grothendieck_topology

open category_theory
open category_theory.limits
open opposite

universes w v u
variables {C : Type u} [category.{v} C] (J : grothendieck_topology C)
variables {D : Type w} [category.{max v u} D] (P : C·µí·µñ ‚•§ D)

@[derive [preorder]]
def cover (X : C) := { S : sieve X // S ‚àà J X }

namespace cover

variables {J} {X Y : C}

instance : has_coe (J.cover X) (sieve X) := ‚ü®Œª S, S.1‚ü©

instance : has_coe_to_fun (J.cover X) (Œª S, Œ† ‚¶ÉY : C‚¶Ñ (f : Y ‚ü∂ X), Prop) :=
‚ü®Œª S Y f, (S : sieve X) f‚ü©

@[simp]
lemma coe_coe (S : J.cover X) ‚¶ÉY‚¶Ñ (f : Y ‚ü∂ X) : (S : sieve X) f = S f := rfl

lemma condition (S : J.cover X) : (S : sieve X) ‚àà J X := S.2

@[ext]
lemma ext (S T : J.cover X) (h : ‚àÄ ‚¶ÉY : C‚¶Ñ (f : Y ‚ü∂ X), S f ‚Üî T f) : S = T :=
subtype.ext $ sieve.ext h

instance : semilattice_inf_top (J.cover X) :=
{ top := ‚ü®‚ä§, J.top_mem X‚ü©,
  le_antisymm := Œª S T h1 h2, cover.ext _ _ $ Œª Y f, ‚ü®h1 _, h2 _‚ü©,
  le_top := Œª S Y f, by tauto,
  inf := Œª S T, ‚ü®S ‚äì T, J.intersection_covering S.condition T.condition‚ü©,
  inf_le_left := Œª S T Y f hf, hf.1,
  inf_le_right := Œª S T Y f hf, hf.2,
  le_inf := Œª S T Q h1 h2 Y f hf, ‚ü®h1 _ hf, h2 _ hf‚ü©,
  ..(infer_instance : preorder _) }

structure L (S : J.cover X) : Type (max v u) :=
(Y : C)
(f : Y ‚ü∂ X)
(hf : S f)

def map_L {S T : J.cover X} (h : S ‚ü∂ T) : S.L ‚Üí T.L :=
Œª I, ‚ü®I.Y, I.f, le_of_hom h _ I.hf‚ü©

structure R (S : J.cover X) : Type (max v u) :=
(Y‚ÇÅ Y‚ÇÇ Z : C)
(g‚ÇÅ : Z ‚ü∂ Y‚ÇÅ)
(g‚ÇÇ : Z ‚ü∂ Y‚ÇÇ)
(f‚ÇÅ : Y‚ÇÅ ‚ü∂ X)
(f‚ÇÇ : Y‚ÇÇ ‚ü∂ X)
(h‚ÇÅ : S f‚ÇÅ)
(h‚ÇÇ : S f‚ÇÇ)
(w : g‚ÇÅ ‚â´ f‚ÇÅ = g‚ÇÇ ‚â´ f‚ÇÇ)

def map_R {S T : J.cover X} (h : S ‚ü∂ T) : S.R ‚Üí T.R :=
Œª I, ‚ü®I.Y‚ÇÅ, I.Y‚ÇÇ, I.Z, I.g‚ÇÅ, I.g‚ÇÇ, I.f‚ÇÅ, I.f‚ÇÇ,
  le_of_hom h _ I.h‚ÇÅ, le_of_hom h _ I.h‚ÇÇ, I.w‚ü©

def index (S : J.cover X) : multicospan_index D :=
{ L := S.L,
  R := S.R,
  fst_to := Œª I, ‚ü®I.Y‚ÇÅ, I.f‚ÇÅ, I.h‚ÇÅ‚ü©,
  snd_to := Œª I, ‚ü®I.Y‚ÇÇ, I.f‚ÇÇ, I.h‚ÇÇ‚ü©,
  left := Œª I, P.obj (op I.Y),
  right := Œª I, P.obj (op I.Z),
  fst := Œª I, P.map I.g‚ÇÅ.op,
  snd := Œª I, P.map I.g‚ÇÇ.op }

def multifork (S : J.cover X) : multifork (S.index P) :=
multifork.of_Œπ _ (P.obj (op X)) (Œª I, P.map I.f.op) begin
  intros I,
  dsimp [index],
  simp only [‚Üê P.map_comp, ‚Üê op_comp, I.w]
end

def family_of_elements (S : J.cover X) (E : limits.multifork (S.index P)) :
  presieve.family_of_elements (P ‚ãô coyoneda.obj (op E.X)) S :=
Œª Y f hf, E.Œπ ‚ü®_,f,hf‚ü©

lemma compatible (S : J.cover X) (E : limits.multifork (S.index P)) :
  (S.family_of_elements P E).compatible :=
begin
  intros Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ w,
  dsimp [family_of_elements],
  erw E.w (walking_multicospan.hom.fst ‚ü®Y‚ÇÅ, Y‚ÇÇ, Z, g‚ÇÅ, g‚ÇÇ, f‚ÇÅ, f‚ÇÇ, h‚ÇÅ, h‚ÇÇ, w‚ü©),
  erw E.w (walking_multicospan.hom.snd ‚ü®Y‚ÇÅ, Y‚ÇÇ, Z, g‚ÇÅ, g‚ÇÇ, f‚ÇÅ, f‚ÇÇ, h‚ÇÅ, h‚ÇÇ, w‚ü©),
end

noncomputable abbreviation to_multiequalizer (S : J.cover X)
  [has_multiequalizer (S.index P)] : P.obj (op X) ‚ü∂ multiequalizer (S.index P) :=
multiequalizer.lift _ _ (Œª I, P.map I.f.op) $ begin
  intros I,
  dsimp [index],
  simp_rw [‚Üê P.map_comp, ‚Üê op_comp, I.w],
end

end cover

variables {X Y Z : C}

def pullback (f : X ‚ü∂ Y) : J.cover Y ‚•§ J.cover X :=
{ obj := Œª S, ‚ü®(S : sieve Y).pullback f, J.pullback_stable _ S.condition‚ü©,
  map := Œª S T f, hom_of_le $ sieve.pullback_monotone _ $ le_of_hom f }

@[simp]
lemma pullback_obj_apply (f : X ‚ü∂ Y) (S : J.cover Y) : ‚àÄ ‚¶ÉZ‚¶Ñ (g : Z ‚ü∂ X),
  ((J.pullback f).obj S g) ‚Üî (S : sieve Y).pullback f g := by tidy

def pullback_id (X : C) : J.pullback (ùüô X) ‚âÖ ùü≠ _ :=
nat_iso.of_components (Œª S, eq_to_iso $ by { ext, simp }) $ by tidy

def pullback_comp (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  J.pullback (f ‚â´ g) ‚âÖ J.pullback g ‚ãô J.pullback f :=
nat_iso.of_components (Œª S, eq_to_iso $ by { ext, simp }) $ by tidy

@[simp]
def pullback_L (f : X ‚ü∂ Y) (S : J.cover Y) : ((J.pullback f).obj S).L ‚Üí S.L :=
Œª I, ‚ü®I.Y, I.f ‚â´ f, I.hf‚ü©

@[simp]
def pullback_R (f : X ‚ü∂ Y) (S : J.cover Y) : ((J.pullback f).obj S).R ‚Üí S.R :=
Œª I, ‚ü®I.Y‚ÇÅ, I.Y‚ÇÇ, I.Z, I.g‚ÇÅ, I.g‚ÇÇ, I.f‚ÇÅ ‚â´ f, I.f‚ÇÇ ‚â´ f, I.h‚ÇÅ, I.h‚ÇÇ, by simp [reassoc_of I.w]‚ü©

noncomputable theory

-- TODO: Can we get rid of the ùüô _ after the multiequalizer.Œπ here?
@[simps]
def diagram (X : C) [has_limits D] : (J.cover X)·µí·µñ ‚•§ D :=
{ obj := Œª S, multiequalizer (S.unop.index P),
  map := Œª S T e, multiequalizer.lift _ _ (Œª I, multiequalizer.Œπ _ (cover.map_L e.unop I) ‚â´ ùüô _) $
    Œª I, by simpa using multiequalizer.condition (S.unop.index P) (cover.map_R e.unop I),
  map_id' := begin
    intros S,
    ext ‚ü®_,_,_‚ü©,
    simpa,
  end,
  map_comp' := begin
    intros S T W f g,
    ext ‚ü®_,_,_‚ü©,
    simpa,
  end }

@[simps]
def diagram_pullback [has_limits D] {X Y : C} (f : X ‚ü∂ Y) :
  J.diagram P Y ‚ü∂ (J.pullback f).op ‚ãô J.diagram P X :=
{ app := Œª S, multiequalizer.lift (((J.pullback f).obj S.unop).index P) _
    (Œª I, multiequalizer.Œπ (S.unop.index P) (J.pullback_L f _ I))
      (Œª I, multiequalizer.condition (S.unop.index P) (J.pullback_R f _ I)),
  naturality' := begin
    intros A B e,
    dsimp,
    ext,
    simpa,
  end } .

-- TODO: Change to `has_filtered_colimits`
@[simps]
def plus_obj [has_limits D] [has_colimits D] : C·µí·µñ ‚•§ D :=
{ obj := Œª X, colimit (J.diagram P X.unop),
  map := Œª X Y f, colim_map (J.diagram_pullback P f.unop) ‚â´ colimit.pre _ _,
  map_id' := begin
    intros X,
    ext I,
    dsimp,
    simp only [diagram_pullback_app, colimit.Œπ_pre, Œπ_colim_map_assoc, category.comp_id],
    let e : (J.pullback (ùüô X.unop)).op.obj I ‚âÖ I :=
      ((nat_iso.op (J.pullback_id X.unop)).app I).symm,
    rw [‚Üê colimit.w _ e.hom, ‚Üê category.assoc],
    convert category.id_comp _,
    ext ‚ü®_,_,_‚ü©,
    dsimp,
    simp only [multiequalizer.lift_Œπ, category.id_comp, category.comp_id, category.assoc],
    congr,
    simpa,
  end,
  map_comp' := begin
    intros X Y Z f g,
    ext I,
    dsimp,
    simp only [diagram_pullback_app, colimit.Œπ_pre_assoc,
      colimit.Œπ_pre, Œπ_colim_map_assoc, category.assoc],
    let e : (J.pullback (g.unop ‚â´ f.unop)).op.obj I ‚âÖ
      (J.pullback g.unop).op.obj ((J.pullback f.unop).op.obj I) :=
      ((nat_iso.op (J.pullback_comp g.unop f.unop)).app I).symm,
    simp_rw [‚Üê colimit.w _ e.hom, ‚Üê category.assoc],
    congr' 1,
    ext II,
    dsimp,
    simp only [multiequalizer.lift_Œπ, category.comp_id, category.assoc],
    congr' 1,
    simpa,
  end } .

@[simps]
def plus_map [has_limits D] [has_colimits D] {P Q : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) :
  plus_obj J P ‚ü∂ plus_obj J Q :=
{ app := Œª X, colim_map $
  { app := Œª I, multiequalizer.lift _ _ (Œª II, multiequalizer.Œπ _ II ‚â´ Œ∑.app _) begin
      intros II,
      erw [category.assoc, category.assoc, ‚Üê Œ∑.naturality, ‚Üê Œ∑.naturality,
        ‚Üê category.assoc, ‚Üê category.assoc, multiequalizer.condition],
      refl,
    end,
    naturality' := begin
      intros I‚ÇÅ I‚ÇÇ e,
      dsimp,
      ext,
      simpa,
    end },
  naturality' := begin
    intros X Y f,
    dsimp,
    ext,
    simp only [diagram_pullback_app, Œπ_colim_map, colimit.Œπ_pre_assoc,
      colimit.Œπ_pre, Œπ_colim_map_assoc, category.assoc],
    simp_rw ‚Üê category.assoc,
    congr' 1,
    ext,
    dsimp,
    simp,
  end }

@[simps]
def plus [has_limits D] [has_colimits D] : (C·µí·µñ ‚•§ D) ‚•§ (C·µí·µñ ‚•§ D) :=
{ obj := Œª F, plus_obj J F,
  map := Œª F G Œ∑, plus_map J Œ∑,
  map_id' := begin
    intros F,
    ext,
    dsimp,
    simp only [Œπ_colim_map, category.comp_id],
    convert category.id_comp _,
    ext,
    simp only [multiequalizer.lift_Œπ, category.id_comp],
    erw category.comp_id,
  end,
  map_comp' := begin
    intros F G H Œ∑ Œ≥,
    ext,
    dsimp,
    simp only [Œπ_colim_map, Œπ_colim_map_assoc],
    simp_rw ‚Üê category.assoc,
    congr' 1,
    ext,
    dsimp,
    simp,
  end }

@[simps]
def to_plus_app [has_limits D] [has_colimits D] :
  P ‚ü∂ (plus_obj J P) :=
{ app := Œª X, cover.to_multiequalizer P (‚ä§ : J.cover X.unop) ‚â´
    colimit.Œπ (J.diagram P X.unop) (op ‚ä§),
  naturality' := begin
    intros X Y f,
    dsimp,
    simp only [diagram_pullback_app, colimit.Œπ_pre, Œπ_colim_map_assoc, category.assoc],
    let e : (J.pullback f.unop).obj ‚ä§ ‚ü∂ ‚ä§ := hom_of_le (semilattice_inf_top.le_top _),
    simp_rw [‚Üê colimit.w _ e.op, ‚Üê category.assoc],
    congr' 1,
    ext,
    dsimp,
    simp only [limit.lift_œÄ, multifork.of_Œπ_œÄ_app,
      multiequalizer.lift_Œπ, category.comp_id, category.assoc],
    dsimp [multifork.of_Œπ],
    simp_rw [‚Üê P.map_comp],
    refl,
  end } .

@[simps]
def to_plus [has_limits D] [has_colimits D] :
  (ùü≠ (C·µí·µñ ‚•§ D)) ‚ü∂ plus J :=
{ app := Œª F, to_plus_app _ _,
  naturality' := begin
    intros F G Œ∑,
    ext,
    dsimp,
    simp only [Œπ_colim_map, category.assoc],
    simp_rw ‚Üê category.assoc,
    congr' 1,
    ext,
    dsimp,
    simp only [limit.lift_œÄ, multifork.of_Œπ_œÄ_app, limit.lift_œÄ_assoc,
      multiequalizer.lift_Œπ, category.assoc],
    dsimp [multifork.of_Œπ],
    symmetry,
    apply Œ∑.naturality,
  end }

lemma map_to_plus [has_limits D] [has_colimits D] (P : C·µí·µñ ‚•§ D) :
  J.plus_map (J.to_plus_app P) = J.to_plus_app _ :=
begin
  -- TODO: GOLF THIS!
  ext X j,
  dsimp,
  simp,
  let e : j.unop ‚ü∂ ‚ä§ := hom_of_le (semilattice_inf_top.le_top _),
  rw ‚Üê colimit.w _ e.op,
  simp only [‚Üê category.assoc],
  congr' 1,
  ext I,
  dsimp,
  simp,
  dsimp [multifork.of_Œπ],
  simp,
  delta cover.to_multiequalizer,
  dsimp [cover.map_L],
  let ee : (J.pullback I.f).obj (unop j) ‚ü∂ ‚ä§ := hom_of_le (semilattice_inf_top.le_top _),
  rw ‚Üê colimit.w _ ee.op,
  simp only [‚Üê category.assoc],
  congr' 1,
  ext II,
  dsimp,
  simp,
  dsimp [multifork.of_Œπ, cover.map_L],
  let RR : j.unop.R :=
  { Y‚ÇÅ := _,
    Y‚ÇÇ := _,
    Z := _,
    g‚ÇÅ := II.f,
    g‚ÇÇ := ùüô _,
    f‚ÇÅ := I.f,
    f‚ÇÇ := II.f ‚â´ I.f,
    h‚ÇÅ := I.hf,
    h‚ÇÇ := sieve.downward_closed _ I.hf _,
    w := by simp },
  convert multiequalizer.condition (j.unop.index P) RR,
  { cases I, refl },
  { dsimp [cover.index, RR],
    simpa }
end

lemma plus_map_to_plus_app [has_limits D] [has_colimits D] (P : C·µí·µñ ‚•§ D) :
  J.plus.map (J.to_plus.app P) = J.to_plus.app (J.plus.obj P) :=
map_to_plus _ _

end category_theory.grothendieck_topology
