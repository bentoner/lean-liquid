import algebra.homology.homology
import category_theory.abelian.homology

import for_mathlib.commsq
import for_mathlib.exact_lift_desc

noncomputable theory

universes v u

open category_theory category_theory.limits

variables {๐ : Type u} [category.{v} ๐] [abelian ๐]
variables {A B C : ๐} {f : A โถ B} {g : B โถ C} {H : ๐}

structure has_homology (f : A โถ B) (g : B โถ C) (H : ๐) :=
(w : f โซ g = 0)
(ฯ : kernel g โถ H)
(ฮน : H โถ cokernel f)
(ฯ_ฮน : ฯ โซ ฮน = kernel.ฮน _ โซ cokernel.ฯ _)
(ex_ฯ : exact (kernel.lift g f w) ฯ)
(ฮน_ex : exact ฮน (cokernel.desc f g w))
[epi_ฯ : epi ฯ]
[mono_ฮน : mono ฮน]

def homology.has (f : A โถ B) (g : B โถ C) (w : f โซ g = 0) :
  has_homology f g (homology f g w) :=
{ w := w,
  ฯ := homology.ฯ' f g w,
  ฮน := homology.ฮน f g w,
  ฯ_ฮน := homology.ฯ'_ฮน _ _ _,
  ex_ฯ := begin
    delta homology.ฯ',
    rw exact_comp_iso,
    exact abelian.exact_cokernel _
  end,
  ฮน_ex := begin
    delta homology.ฮน,
    rw exact_iso_comp,
    exact exact_kernel_ฮน
  end,
  epi_ฯ := by { delta homology.ฯ', apply epi_comp },
  mono_ฮน := by { delta homology.ฮน, apply mono_comp } }

namespace has_homology

attribute [instance] epi_ฯ mono_ฮน
attribute [reassoc] ฯ_ฮน

section misc

@[simp, reassoc] lemma ฮน_desc (hH : has_homology f g H) : hH.ฮน โซ cokernel.desc f g hH.w = 0 := hH.ฮน_ex.w

@[simp, reassoc] lemma lift_ฯ (hH : has_homology f g H) : kernel.lift g f hH.w โซ hH.ฯ = 0 := hH.ex_ฯ.w

end misc

section ext

lemma ext_ฯ (hH : has_homology f g H) {X : ๐} (ฯ ฯ : H โถ X) (h : hH.ฯ โซ ฯ = hH.ฯ โซ ฯ) : ฯ = ฯ :=
by rwa cancel_epi at h

lemma ext_ฮน (hH : has_homology f g H) {X : ๐} (ฯ ฯ : X โถ H) (h : ฯ โซ hH.ฮน = ฯ โซ hH.ฮน) : ฯ = ฯ :=
by rwa cancel_mono at h

end ext

section lift

variables (hH : has_homology f g H)
variables {X : ๐} (ฯ : X โถ cokernel f) (hฯ : ฯ โซ cokernel.desc f g hH.w = 0)

def lift : X โถ H := hH.ฮน_ex.mono_lift ฯ hฯ

@[simp, reassoc] lemma lift_comp_ฮน : hH.lift ฯ hฯ โซ hH.ฮน = ฯ := hH.ฮน_ex.mono_lift_comp ฯ hฯ

lemma lift_unique (e : X โถ H) (he : e โซ hH.ฮน = ฯ) : e = hH.lift ฯ hฯ :=
hH.ฮน_ex.mono_lift_unique _ _ e he

@[simp] lemma lift_ฮน : hH.lift hH.ฮน hH.ฮน_desc = ๐ H :=
(hH.lift_unique _ _ _ $ category.id_comp _).symm

lemma ฯ_eq_lift : hH.ฯ =
  hH.lift (kernel.ฮน _ โซ cokernel.ฯ _) (by simp only [category.assoc, cokernel.ฯ_desc, kernel.condition]) :=
lift_unique _ _ _ _ hH.ฯ_ฮน

@[reassoc] lemma comp_lift {X Y : ๐} (ฯ : X โถ Y) (ฯ : Y โถ cokernel f) (hฯ : ฯ โซ cokernel.desc f g hH.w = 0) :
  ฯ โซ hH.lift ฯ hฯ = hH.lift (ฯ โซ ฯ) (by rw [category.assoc, hฯ, comp_zero]) :=
by { apply lift_unique, rw [category.assoc, lift_comp_ฮน] }

end lift

section desc

variables (hH : has_homology f g H)
variables {X : ๐} (ฯ : kernel g โถ X) (hฯ : kernel.lift g f hH.w โซ ฯ = 0)

def desc : H โถ X := hH.ex_ฯ.epi_desc ฯ hฯ

@[simp, reassoc] lemma ฯ_comp_desc : hH.ฯ โซ hH.desc ฯ hฯ = ฯ := hH.ex_ฯ.comp_epi_desc ฯ hฯ

lemma desc_unique (e : H โถ X) (he : hH.ฯ โซ e = ฯ) : e = hH.desc ฯ hฯ :=
hH.ex_ฯ.epi_desc_unique _ _ e he

@[simp] lemma desc_ฯ : hH.desc hH.ฯ hH.lift_ฯ = ๐ H :=
(hH.desc_unique _ _ _ $ category.comp_id _).symm

lemma ฮน_eq_desc : hH.ฮน =
  hH.desc (kernel.ฮน _ โซ cokernel.ฯ _) (by simp only [kernel.lift_ฮน_assoc, cokernel.condition]) :=
desc_unique _ _ _ _ hH.ฯ_ฮน

@[reassoc] lemma desc_comp {X Y : ๐} (ฯ : kernel g โถ X) (ฯ : X โถ Y) (hฯ : kernel.lift g f hH.w โซ ฯ = 0) :
  hH.desc ฯ hฯ โซ ฯ = hH.desc (ฯ โซ ฯ) (by rw [reassoc_of hฯ, zero_comp]) :=
by { apply desc_unique, rw [ฯ_comp_desc_assoc] }

end desc

section map

variables {Aโ Bโ Cโ Hโ Aโ Bโ Cโ Hโ Aโ Bโ Cโ Hโ : ๐}
variables {fโ : Aโ โถ Bโ} {gโ : Bโ โถ Cโ} (hโ : has_homology fโ gโ Hโ)
variables {fโ : Aโ โถ Bโ} {gโ : Bโ โถ Cโ} (hโ : has_homology fโ gโ Hโ)
variables {fโ : Aโ โถ Bโ} {gโ : Bโ โถ Cโ} (hโ : has_homology fโ gโ Hโ)
variables {ฮฑ : Aโ โถ Aโ} {ฮฒ : Bโ โถ Bโ} {ฮณ : Cโ โถ Cโ}
variables {ฮฑ' : Aโ โถ Aโ} {ฮฒ' : Bโ โถ Bโ} {ฮณ' : Cโ โถ Cโ}
variables (sq1 : commsq fโ ฮฑ ฮฒ fโ) (sq2 : commsq gโ ฮฒ ฮณ gโ)
variables (sq1' : commsq fโ ฮฑ' ฮฒ' fโ) (sq2' : commsq gโ ฮฒ' ฮณ' gโ)

include hโ hโ sq1 sq2

def map : Hโ โถ Hโ :=
hโ.desc (hโ.lift (kernel.ฮน _ โซ ฮฒ โซ cokernel.ฯ _) $
  by simp only [category.assoc, cokernel.ฯ_desc, โ sq2.w, kernel.condition_assoc, zero_comp]) $
begin
  apply hโ.ext_ฮน,
  simp only [category.assoc, zero_comp, hโ.lift_comp_ฮน, kernel.lift_ฮน_assoc, sq1.w_assoc,
    cokernel.condition, comp_zero],
end

omit hโ hโ sq1 sq2

@[simp, reassoc] lemma ฯ_map :
  hโ.ฯ โซ hโ.map hโ sq1 sq2 = (hโ.lift (kernel.ฮน _ โซ ฮฒ โซ cokernel.ฯ _) $
  by simp only [category.assoc, cokernel.ฯ_desc, โ sq2.w, kernel.condition_assoc, zero_comp]) :=
hโ.ฯ_comp_desc _ _

@[simp, reassoc] lemma map_ฮน :
  hโ.map hโ sq1 sq2 โซ hโ.ฮน = (hโ.desc (kernel.ฮน _ โซ ฮฒ โซ cokernel.ฯ _) $
  by simp only [kernel.lift_ฮน_assoc, sq1.w_assoc, cokernel.condition, comp_zero]) :=
by { apply hโ.desc_unique, rw [hโ.ฯ_map_assoc, hโ.lift_comp_ฮน] }

@[simp, reassoc] lemma lift_map
  {X : ๐} (ฯ : X โถ cokernel fโ) (hฯ : ฯ โซ cokernel.desc fโ gโ hโ.w = 0) :
  hโ.lift ฯ hฯ โซ hโ.map hโ sq1 sq2 = hโ.lift (ฯ โซ cokernel.map fโ fโ ฮฑ ฮฒ sq1.w)
    (by { rw [category.assoc, cokernel.map_desc, reassoc_of hฯ, zero_comp], exact sq2.w }) :=
begin
  apply lift_unique, rw [category.assoc, map_ฮน],
  conv_rhs { rw [โ lift_comp_ฮน hโ ฯ hฯ, category.assoc] },
  congr' 1,
  apply hโ.ext_ฯ,
  rw [ฯ_comp_desc, ฯ_ฮน_assoc, cokernel.ฯ_desc],
end

-- move this
attribute [reassoc] limits.kernel.lift_map

@[simp, reassoc] lemma map_desc
  {X : ๐} (ฯ : kernel gโ โถ X) (hฯ : kernel.lift gโ fโ hโ.w โซ ฯ = 0) :
  hโ.map hโ sq1 sq2 โซ hโ.desc ฯ hฯ = hโ.desc (kernel.map gโ gโ ฮฒ ฮณ sq2.w โซ ฯ)
    (by { rw [category_theory.limits.kernel.lift_map_assoc, hฯ, comp_zero], exact sq1.w }) :=
begin
  apply desc_unique, rw [ฯ_map_assoc],
  conv_rhs { rw [โ ฯ_comp_desc hโ ฯ hฯ, โ category.assoc] },
  congr' 1,
  apply hโ.ext_ฮน,
  rw [lift_comp_ฮน, category.assoc, ฯ_ฮน, kernel.lift_ฮน_assoc, category.assoc],
end

def _root_.commsq.vcomp : commsq fโ (ฮฑ โซ ฮฑ') (ฮฒ โซ ฮฒ') fโ :=
commsq.of_eq $
calc fโ โซ ฮฒ โซ ฮฒ' = ฮฑ โซ fโ โซ ฮฒ'   : sq1.w_assoc ฮฒ'
              ... = ฮฑ โซ ฮฑ' โซ fโ   : congr_arg _ $ sq1'.w
              ... = (ฮฑ โซ ฮฑ') โซ fโ : (category.assoc _ _ _).symm

def _root_.commsq.vrefl (f : A โถ B) : commsq f (iso.refl _).hom (iso.refl _).hom f :=
commsq.of_eq $ by rw [iso.refl_hom, iso.refl_hom, category.id_comp, category.comp_id]

def _root_.commsq.vinv {ฮฑ : Aโ โ Aโ} {ฮฒ : Bโ โ Bโ} (sq1 : commsq fโ ฮฑ.hom ฮฒ.hom fโ) :
  commsq fโ ฮฑ.inv ฮฒ.inv fโ :=
commsq.of_eq $ by rw [iso.comp_inv_eq, category.assoc, iso.eq_inv_comp, sq1.w]

lemma map_comp_map :
  hโ.map hโ sq1 sq2 โซ hโ.map hโ sq1' sq2' = hโ.map hโ (sq1.vcomp sq1') (sq2.vcomp sq2') :=
begin
  apply hโ.ext_ฯ, apply hโ.ext_ฮน,
  simp only [category.assoc, map_ฮน, map_desc, ฯ_comp_desc, kernel.lift_ฮน_assoc],
end

lemma map_id (h : has_homology f g H) {ฮฑ : A โถ A} {ฮฒ : B โถ B} {ฮณ : C โถ C}
  (sq1 : commsq f ฮฑ ฮฒ f) (sq2 : commsq g ฮฒ ฮณ g) (hฮฒ : ฮฒ = ๐ _) :
  h.map h sq1 sq2 = ๐ H :=
begin
  apply h.ext_ฯ, apply h.ext_ฮน,
  rw [ฯ_map, lift_comp_ฮน, category.comp_id, ฯ_ฮน, hฮฒ, category.id_comp],
end

@[simps] def map_iso {ฮฑ : Aโ โ Aโ} {ฮฒ : Bโ โ Bโ} {ฮณ : Cโ โ Cโ}
  (sq1 : commsq fโ ฮฑ.hom ฮฒ.hom fโ) (sq2 : commsq gโ ฮฒ.hom ฮณ.hom gโ) :
  Hโ โ Hโ :=
{ hom := hโ.map hโ sq1 sq2,
  inv := hโ.map hโ sq1.vinv sq2.vinv,
  hom_inv_id' := by { rw [map_comp_map, map_id], exact ฮฒ.hom_inv_id },
  inv_hom_id' := by { rw [map_comp_map, map_id], exact ฮฒ.inv_hom_id } }

abbreviation iso (hโ : has_homology f g Hโ) (hโ : has_homology f g Hโ) :
  Hโ โ Hโ :=
map_iso hโ hโ (_root_.commsq.vrefl f) (_root_.commsq.vrefl g)

end map

section op

open opposite

def op (h : has_homology f g H) : has_homology g.op f.op (op H) :=
{ w := by rw [โ op_comp, h.w, op_zero],
  ฯ := (kernel_op_op f).hom โซ h.ฮน.op,
  ฮน := h.ฯ.op โซ (cokernel_op_op g).inv,
  ฯ_ฮน := by {
    simp only [kernel_op_op_hom, cokernel_op_op_inv, โ op_comp, category.assoc, h.ฯ_ฮน_assoc,
      kernel.lift_ฮน_assoc, cokernel.ฯ_desc], refl, },
  ex_ฯ := begin
    rw [โ exact_comp_hom_inv_comp_iff (kernel_op_op f), iso.inv_hom_id_assoc, kernel_op_op_hom],
    convert h.ฮน_ex.op using 1,
    apply quiver.hom.unop_inj,
    apply category_theory.limits.coequalizer.hom_ext,
    erw [unop_comp, coequalizer.ฯ_desc_assoc, coequalizer.ฯ_desc],
    rw [โ unop_comp, kernel.lift_ฮน, g.unop_op],
  end,
  ฮน_ex := begin
    rw [โ exact_comp_hom_inv_comp_iff (cokernel_op_op g), category.assoc, iso.inv_hom_id,
      category.comp_id, cokernel_op_op_inv],
    convert h.ex_ฯ.op using 1,
    apply quiver.hom.unop_inj,
    apply category_theory.limits.equalizer.hom_ext,
    erw [unop_comp, equalizer.lift_ฮน, category.assoc, equalizer.lift_ฮน],
    rw [โ unop_comp, cokernel.ฯ_desc, f.unop_op],
  end,
  epi_ฯ := epi_comp _ _,
  mono_ฮน := mono_comp _ _ }

-- @[simps]
def homology_unop_iso {A B C : ๐แตแต} (f : A โถ B) (g : B โถ C) (w : f โซ g = 0) :
  homology f g w โ opposite.op (homology g.unop f.unop (by { rw [โ unop_comp, w, unop_zero] })) :=
(homology.has f g w).iso (homology.has g.unop f.unop _).op

def homology_op_iso {A B C : ๐} (f : A โถ B) (g : B โถ C) (w : f โซ g = 0) :
  homology g.op f.op (by rw [โ op_comp, w, op_zero]) โ opposite.op (homology f g w) :=
homology_unop_iso _ _ _

end op

end has_homology
