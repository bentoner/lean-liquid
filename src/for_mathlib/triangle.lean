import category_theory.triangulated.rotate

namespace category_theory

namespace triangulated

open category_theory.triangulated.triangle_morphism

variables {C : Type*} [category C] [has_shift C ‚Ñ§] {T‚ÇÅ T‚ÇÇ : triangle C} (f : T‚ÇÅ ‚ü∂ T‚ÇÇ)

lemma triangle_morphism_is_iso [is_iso f.hom‚ÇÅ] [is_iso f.hom‚ÇÇ] [is_iso f.hom‚ÇÉ] :
  is_iso f :=
by { refine ‚ü®‚ü®‚ü®inv f.hom‚ÇÅ, inv f.hom‚ÇÇ, inv f.hom‚ÇÉ, _, _, _‚ü©, _, _‚ü©‚ü©; tidy }
.
instance [is_iso f] : is_iso f.hom‚ÇÅ :=
by { refine ‚ü®‚ü®(inv f).hom‚ÇÅ, _, _‚ü©‚ü©; simpa only [‚Üê comp_hom‚ÇÅ, ‚Üê triangle_category_comp,
  is_iso.hom_inv_id, is_iso.inv_hom_id] }

instance [is_iso f] : is_iso f.hom‚ÇÇ :=
by { refine ‚ü®‚ü®(inv f).hom‚ÇÇ, _, _‚ü©‚ü©; simpa only [‚Üê comp_hom‚ÇÇ, ‚Üê triangle_category_comp,
  is_iso.hom_inv_id, is_iso.inv_hom_id] }

instance [is_iso f] : is_iso f.hom‚ÇÉ :=
by { refine ‚ü®‚ü®(inv f).hom‚ÇÉ, _, _‚ü©‚ü©; simpa only [‚Üê comp_hom‚ÇÉ, ‚Üê triangle_category_comp,
  is_iso.hom_inv_id, is_iso.inv_hom_id] }

@[simp] lemma inv_hom‚ÇÅ [is_iso f] : (inv f).hom‚ÇÅ = inv (f.hom‚ÇÅ) :=
by { ext, change (f ‚â´ inv f).hom‚ÇÅ = _, rw is_iso.hom_inv_id, refl }

@[simp] lemma inv_hom‚ÇÇ [is_iso f] : (inv f).hom‚ÇÇ = inv (f.hom‚ÇÇ) :=
by { ext, change (f ‚â´ inv f).hom‚ÇÇ = _, rw is_iso.hom_inv_id, refl }

@[simp] lemma inv_hom‚ÇÉ [is_iso f] : (inv f).hom‚ÇÉ = inv (f.hom‚ÇÉ) :=
by { ext, change (f ‚â´ inv f).hom‚ÇÉ = _, rw is_iso.hom_inv_id, refl }

lemma triangle_morphism_is_iso_iff : is_iso f ‚Üî
    is_iso f.hom‚ÇÅ ‚àß is_iso f.hom‚ÇÇ ‚àß is_iso f.hom‚ÇÉ :=
begin
  split,
  { intro _, refine ‚ü®_, _, _‚ü©; exactI infer_instance },
  { rintro ‚ü®_, _, _‚ü©, exactI triangle_morphism_is_iso f }
end

@[simps]
def mk_triangle_iso (e‚ÇÅ : T‚ÇÅ.obj‚ÇÅ ‚âÖ T‚ÇÇ.obj‚ÇÅ) (e‚ÇÇ : T‚ÇÅ.obj‚ÇÇ ‚âÖ T‚ÇÇ.obj‚ÇÇ) (e‚ÇÉ : T‚ÇÅ.obj‚ÇÉ ‚âÖ T‚ÇÇ.obj‚ÇÉ)
  (comm‚ÇÅ : T‚ÇÅ.mor‚ÇÅ ‚â´ e‚ÇÇ.hom = e‚ÇÅ.hom ‚â´ T‚ÇÇ.mor‚ÇÅ)
  (comm‚ÇÇ : T‚ÇÅ.mor‚ÇÇ ‚â´ e‚ÇÉ.hom = e‚ÇÇ.hom ‚â´ T‚ÇÇ.mor‚ÇÇ)
  (comm‚ÇÉ : T‚ÇÅ.mor‚ÇÉ ‚â´ e‚ÇÅ.hom‚ü¶1‚üß' = e‚ÇÉ.hom ‚â´ T‚ÇÇ.mor‚ÇÉ) : T‚ÇÅ ‚âÖ T‚ÇÇ :=
‚ü®‚ü®_, _, _, comm‚ÇÅ, comm‚ÇÇ, comm‚ÇÉ‚ü©, ‚ü®e‚ÇÅ.inv, e‚ÇÇ.inv, e‚ÇÉ.inv,
  by { rw e‚ÇÇ.comp_inv_eq, simp [comm‚ÇÅ] }, by { rw e‚ÇÉ.comp_inv_eq, simp [comm‚ÇÇ] },
  by { rw [e‚ÇÉ.eq_inv_comp, ‚Üê category.assoc, ‚Üê comm‚ÇÉ], simp [‚Üê functor.map_comp] }‚ü©,
  by { ext; simp }, by { ext; simp }‚ü©

@[simps] noncomputable
def triangle.nonneg_inv_rotate (T : triangle C) : triangle C :=
triangle.mk _ (T.mor‚ÇÉ‚ü¶(-1:‚Ñ§)‚üß' ‚â´ (shift_shift_neg _ _).hom) T.mor‚ÇÅ
  (T.mor‚ÇÇ ‚â´ (shift_neg_shift _ _).inv)

@[simps]
def triangle.nonneg_rotate {C : Type*} [category C]
  [has_shift C ‚Ñ§] (T : triangle C) : triangle C := triangle.mk _ T.mor‚ÇÇ T.mor‚ÇÉ (T.mor‚ÇÅ‚ü¶1‚üß')

variables (C) [preadditive C]

@[simps]
def neg‚ÇÉ_functor : triangle C ‚•§ triangle C :=
{ obj := Œª T, triangle.mk C T.mor‚ÇÅ T.mor‚ÇÇ (-T.mor‚ÇÉ),
  map := Œª S T f, { hom‚ÇÅ := f.hom‚ÇÅ, hom‚ÇÇ := f.hom‚ÇÇ, hom‚ÇÉ := f.hom‚ÇÉ } }

@[simps]
def neg‚ÇÉ_unit_iso : neg‚ÇÉ_functor C ‚ãô neg‚ÇÉ_functor C ‚âÖ ùü≠ _ :=
begin
  refine nat_iso.of_components
    (Œª X, ‚ü®‚ü®ùüô _, ùüô _, ùüô _, _, _, _‚ü©, ‚ü®ùüô _, ùüô _, ùüô _, _, _, _‚ü©, _, _‚ü©) (Œª X Y f, _),
  any_goals { ext },
  all_goals { dsimp,
    simp only [category.comp_id, category.id_comp, category_theory.functor.map_id, neg_neg] },
end

@[simps]
def neg‚ÇÉ_equiv : triangle C ‚âå triangle C :=
{ functor := neg‚ÇÉ_functor C,
  inverse := neg‚ÇÉ_functor C,
  unit_iso := (neg‚ÇÉ_unit_iso C).symm,
  counit_iso := neg‚ÇÉ_unit_iso C }

--move this (do we want this?)
instance {C : Type*} [category C] [preadditive C] {X Y : C} : has_neg (X ‚âÖ Y) :=
‚ü®Œª e, ‚ü®-e.hom, -e.inv, by simp, by simp‚ü©‚ü©
.
@[simp] lemma neg_iso_hom {C : Type*} [category C] [preadditive C] {X Y : C} {e : X ‚âÖ Y} :
  (-e).hom = -(e.hom) := rfl

@[simp] lemma neg_iso_inv {C : Type*} [category C] [preadditive C] {X Y : C} {e : X ‚âÖ Y} :
  (-e).inv = -(e.inv) := rfl

--move this
@[simps]
def _root_.category_theory.equivalence.iso_equiv {C D : Type*} [category C] [category D]
  (e : C ‚âå D) (X : C) (Y : D) : (e.functor.obj X ‚âÖ Y) ‚âÉ (X ‚âÖ e.inverse.obj Y) :=
{ to_fun := Œª f, e.unit_iso.app X ‚â™‚â´ e.inverse.map_iso f,
  inv_fun := Œª f, e.functor.map_iso f ‚â™‚â´ e.counit_iso.app Y,
  left_inv := Œª f, by { ext, dsimp, simp only [iso.inv_hom_id_app, category.assoc, functor.map_comp,
    e.fun_inv_map], rw reassoc_of e.functor_unit_iso_comp, dsimp, simp },
  right_inv := Œª f, by { ext, dsimp, simp } }

variables {C} (T : triangle C)

noncomputable
def triangle.nonneg_inv_rotate_neg‚ÇÉ [(shift_functor C (1 : ‚Ñ§)).additive] :
  (neg‚ÇÉ_functor C).obj T.nonneg_inv_rotate ‚âÖ T.inv_rotate :=
begin
  fapply mk_triangle_iso,
  exact -iso.refl _,
  exact iso.refl _,
  exact iso.refl _,
  all_goals { dsimp, simp },
end

noncomputable
def triangle.nonneg_inv_rotate_iso [(shift_functor C (1 : ‚Ñ§)).additive] :
  T.nonneg_inv_rotate ‚âÖ (neg‚ÇÉ_functor C).obj T.inv_rotate :=
(neg‚ÇÉ_equiv C).iso_equiv _ _ T.nonneg_inv_rotate_neg‚ÇÉ

@[simps]
def neg‚ÇÉ_rotate : neg‚ÇÉ_functor C ‚ãô rotate C ‚âÖ rotate C ‚ãô neg‚ÇÉ_functor C :=
nat_iso.of_components
  (Œª X, mk_triangle_iso (iso.refl _) (iso.refl _) (-iso.refl _)
    (by { dsimp, simp }) (by { dsimp, simp }) (by { dsimp, simp }))
  (Œª X Y f, by { dsimp, ext; dsimp; simp })

lemma triangle.nonneg_rotate_neg‚ÇÉ :
  (neg‚ÇÉ_functor C).obj T.nonneg_rotate = T.rotate := rfl

def triangle.nonneg_rotate_iso : T.nonneg_rotate ‚âÖ (neg‚ÇÉ_functor C).obj T.rotate :=
(neg‚ÇÉ_equiv C).iso_equiv _ _ (iso.refl _)

--

@[simps]
def triangle.obj‚ÇÅ_functor : triangle C ‚•§ C :=
{ obj := Œª T, T.obj‚ÇÅ,
  map := Œª S T f, f.hom‚ÇÅ,
  map_id' := Œª _, rfl,
  map_comp' := Œª A B C f g, rfl }

@[simps]
def triangle.obj‚ÇÇ_functor : triangle C ‚•§ C :=
{ obj := Œª T, T.obj‚ÇÇ,
  map := Œª S T f, f.hom‚ÇÇ,
  map_id' := Œª _, rfl,
  map_comp' := Œª A B C f g, rfl }

@[simps]
def triangle.obj‚ÇÉ_functor : triangle C ‚•§ C :=
{ obj := Œª T, T.obj‚ÇÉ,
  map := Œª S T f, f.hom‚ÇÉ,
  map_id' := Œª _, rfl,
  map_comp' := Œª A B C f g, rfl }

end triangulated

end category_theory
