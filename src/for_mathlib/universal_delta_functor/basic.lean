import category_theory.abelian.basic
import category_theory.preadditive.additive_functor
import for_mathlib.short_exact_sequence

namespace category_theory

universes v v' u u'
variables (A : Type u) (B : Type u')
  [category.{v} A] [category.{v} B] [abelian A] [abelian B]

/-- Cohomological covariant delta functor. -/
@[nolint has_inhabited_instance]
structure delta_functor :=
(F : ‚Ñï ‚Üí A ‚•§ B)
[additive : ‚àÄ n, functor.additive (F n)]
(Œ¥ : Œ† (m n : ‚Ñï) (h : n = m+1),
  short_exact_sequence.Trd A ‚ãô (F m) ‚ü∂ short_exact_sequence.Fst A ‚ãô (F n))
(mono : ‚àÄ (S : short_exact_sequence _), mono ((F 0).map S.f))
(exact' : ‚àÄ (n : ‚Ñï) (S : short_exact_sequence _), exact ((F n).map S.f) ((F n).map S.g))
(exact_Œ¥ : ‚àÄ (m n : ‚Ñï) (h : n = m+1) (S : short_exact_sequence _),
  exact ((F m).map S.g) ((Œ¥ m n h).app S))
(Œ¥_exact : ‚àÄ (m n : ‚Ñï) (h : n = m+1) (S : short_exact_sequence _),
  exact ((Œ¥ m n h).app S) ((F n).map S.f))

namespace delta_functor

infixr ` ‚•§Œ¥ `:26 := delta_functor

instance : has_coe_to_fun (A ‚•§Œ¥ B) (Œª F, ‚Ñï ‚Üí (A ‚•§ B)) := ‚ü®F‚ü©

variables {A B}

/-- Morphisms of cohomological covariant delta functors. -/
@[nolint has_inhabited_instance]
structure hom (F G : A ‚•§Œ¥ B) :=
(Œ∑ : Œ† n, F n ‚ü∂ G n)
(comm' : ‚àÄ m n h, F.Œ¥ m n h ‚â´ whisker_left _ (Œ∑ _) = whisker_left _ (Œ∑ _) ‚â´ G.Œ¥ _ _ h)

instance : quiver (A ‚•§Œ¥ B) :=
{ hom := hom }

namespace hom

instance {F G : A ‚•§Œ¥ B} : has_coe_to_fun (F ‚ü∂ G) (Œª Œ∑, Œ† n, F n ‚ü∂ G n) :=
‚ü®Œ∑‚ü©

@[ext]
lemma ext {F G : A ‚•§Œ¥ B} (Œ∑ Œ≥ : F ‚ü∂ G) (h : ‚àÄ n, Œ∑ n = Œ≥ n) : Œ∑ = Œ≥ :=
by { cases Œ∑, cases Œ≥, congr, ext1, apply h }

@[simp]
lemma Œ∑_eq_coe {F G : A ‚•§Œ¥ B} (Œ∑ : F ‚ü∂ G) (n : ‚Ñï) :
  Œ∑.Œ∑ n = Œ∑ n := rfl

@[simp, reassoc]
lemma comm {F G : A ‚•§Œ¥ B} (Œ∑ : F ‚ü∂ G) (m n : ‚Ñï) (h : n = m+1) (S : short_exact_sequence A) :
  (F.Œ¥ m n h).app S ‚â´ (Œ∑ n).app S.fst =
  (Œ∑ m).app S.trd ‚â´ (G.Œ¥ m n h).app S :=
begin
  have := Œ∑.comm' m n h,
  apply_fun (Œª e, e.app S) at this,
  exact this,
end

/-- Identity morphisms of delta functors. -/
def id (F : A ‚•§Œ¥ B) : F ‚ü∂ F :=
‚ü®Œª n, ùüô _, begin
  rintros m n ‚ü®rfl‚ü©,
  ext, dsimp,
  erw nat_trans.id_app,
  erw nat_trans.id_app,
  simp,
end‚ü©

@[simp]
lemma id_apply (F : A ‚•§Œ¥ B) (n : ‚Ñï) :
  id F n = ùüô _ := rfl

/-- Compositions of morphisms of delta functors. -/
def comp {F G H : A ‚•§Œ¥ B} (Œ∑ : F ‚ü∂ G) (Œ≥ : G ‚ü∂ H) :
  hom F H :=
{ Œ∑ := Œª n, Œ∑ n ‚â´ Œ≥ n,
  comm' := begin
    rintros m n rfl, ext,
    dsimp,
    simp,
  end }

@[simp]
lemma comp_apply {F G H : A ‚•§Œ¥ B} (Œ∑ : F ‚ü∂ G) (Œ≥ : G ‚ü∂ H) (n : ‚Ñï) :
  (hom.comp Œ∑ Œ≥) n = Œ∑ n ‚â´ Œ≥ n := rfl

end hom

/-- delta functors form a category. -/
instance category : category (A ‚•§Œ¥ B) :=
{ id := Œª F, hom.id _,
  comp := Œª X Y Z F G, hom.comp F G,
  id_comp' := by { intros F G f, ext, dsimp, simp },
  comp_id' := by { intros F G f, ext, dsimp, simp },
  assoc' := by { intros F G H W a b c, ext, dsimp, simp },
  ..(infer_instance : quiver (A ‚•§Œ¥ B)) }

/-- Universal delta functors. -/
class universal (F : A ‚•§Œ¥ B) : Prop :=
(cond : ‚àÄ (G : A ‚•§Œ¥ B) (e0 : F 0 ‚ü∂ G 0), ‚àÉ! e : F ‚ü∂ G, (e : Œ† n, F n ‚ü∂ G n) 0 = e0)

-- Sketch:
-- TODO: Prove stacks tag 010T.
-- TODO: Construct `Ext^*(-,X)` a delta functor (on objects!).
-- These should be functors `A·µí·µñ ‚•§ Ab` (assuming `A` has enough projectives).
-- Use `010T` to see that `Ext^*(-,X)` is universal.

end delta_functor

end category_theory
