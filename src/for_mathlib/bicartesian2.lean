import for_mathlib.chain_complex_cons
import for_mathlib.mapping_cone
import for_mathlib.exact_seq3
import for_mathlib.commsq
import for_mathlib.complex_extend
import for_mathlib.derived.K_projective

noncomputable theory

open category_theory category_theory.limits

variables {ùìê : Type*} [category ùìê] [abelian ùìê]

variables {A‚ÇÅ‚ÇÅ A‚ÇÅ‚ÇÇ A‚ÇÅ‚ÇÉ A‚ÇÅ‚ÇÑ A‚ÇÅ‚ÇÖ : ùìê}
variables {A‚ÇÇ‚ÇÅ A‚ÇÇ‚ÇÇ A‚ÇÇ‚ÇÉ A‚ÇÇ‚ÇÑ A‚ÇÇ‚ÇÖ : ùìê}
variables {A‚ÇÉ‚ÇÅ A‚ÇÉ‚ÇÇ A‚ÇÉ‚ÇÉ A‚ÇÉ‚ÇÑ A‚ÇÉ‚ÇÖ : ùìê}
variables {A‚ÇÑ‚ÇÅ A‚ÇÑ‚ÇÇ A‚ÇÑ‚ÇÉ A‚ÇÑ‚ÇÑ A‚ÇÑ‚ÇÖ : ùìê}
variables {A‚ÇÖ‚ÇÅ A‚ÇÖ‚ÇÇ A‚ÇÖ‚ÇÉ A‚ÇÖ‚ÇÑ A‚ÇÖ‚ÇÖ : ùìê}

variables {f‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ ‚ü∂ A‚ÇÅ‚ÇÇ} {f‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÇ ‚ü∂ A‚ÇÅ‚ÇÉ} {f‚ÇÅ‚ÇÉ : A‚ÇÅ‚ÇÉ ‚ü∂ A‚ÇÅ‚ÇÑ} {f‚ÇÅ‚ÇÑ : A‚ÇÅ‚ÇÑ ‚ü∂ A‚ÇÅ‚ÇÖ}
variables {g‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ ‚ü∂ A‚ÇÇ‚ÇÅ} {g‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÇ ‚ü∂ A‚ÇÇ‚ÇÇ} {g‚ÇÅ‚ÇÉ : A‚ÇÅ‚ÇÉ ‚ü∂ A‚ÇÇ‚ÇÉ} {g‚ÇÅ‚ÇÑ : A‚ÇÅ‚ÇÑ ‚ü∂ A‚ÇÇ‚ÇÑ} {g‚ÇÅ‚ÇÖ : A‚ÇÅ‚ÇÖ ‚ü∂ A‚ÇÇ‚ÇÖ}
variables {f‚ÇÇ‚ÇÅ : A‚ÇÇ‚ÇÅ ‚ü∂ A‚ÇÇ‚ÇÇ} {f‚ÇÇ‚ÇÇ : A‚ÇÇ‚ÇÇ ‚ü∂ A‚ÇÇ‚ÇÉ} {f‚ÇÇ‚ÇÉ : A‚ÇÇ‚ÇÉ ‚ü∂ A‚ÇÇ‚ÇÑ} {f‚ÇÇ‚ÇÑ : A‚ÇÇ‚ÇÑ ‚ü∂ A‚ÇÇ‚ÇÖ}
variables {g‚ÇÇ‚ÇÅ : A‚ÇÇ‚ÇÅ ‚ü∂ A‚ÇÉ‚ÇÅ} {g‚ÇÇ‚ÇÇ : A‚ÇÇ‚ÇÇ ‚ü∂ A‚ÇÉ‚ÇÇ} {g‚ÇÇ‚ÇÉ : A‚ÇÇ‚ÇÉ ‚ü∂ A‚ÇÉ‚ÇÉ} {g‚ÇÇ‚ÇÑ : A‚ÇÇ‚ÇÑ ‚ü∂ A‚ÇÉ‚ÇÑ} {g‚ÇÇ‚ÇÖ : A‚ÇÇ‚ÇÖ ‚ü∂ A‚ÇÉ‚ÇÖ}
variables {f‚ÇÉ‚ÇÅ : A‚ÇÉ‚ÇÅ ‚ü∂ A‚ÇÉ‚ÇÇ} {f‚ÇÉ‚ÇÇ : A‚ÇÉ‚ÇÇ ‚ü∂ A‚ÇÉ‚ÇÉ} {f‚ÇÉ‚ÇÉ : A‚ÇÉ‚ÇÉ ‚ü∂ A‚ÇÉ‚ÇÑ} {f‚ÇÉ‚ÇÑ : A‚ÇÉ‚ÇÑ ‚ü∂ A‚ÇÉ‚ÇÖ}
variables {g‚ÇÉ‚ÇÅ : A‚ÇÉ‚ÇÅ ‚ü∂ A‚ÇÑ‚ÇÅ} {g‚ÇÉ‚ÇÇ : A‚ÇÉ‚ÇÇ ‚ü∂ A‚ÇÑ‚ÇÇ} {g‚ÇÉ‚ÇÉ : A‚ÇÉ‚ÇÉ ‚ü∂ A‚ÇÑ‚ÇÉ} {g‚ÇÉ‚ÇÑ : A‚ÇÉ‚ÇÑ ‚ü∂ A‚ÇÑ‚ÇÑ} {g‚ÇÉ‚ÇÖ : A‚ÇÉ‚ÇÖ ‚ü∂ A‚ÇÑ‚ÇÖ}
variables {f‚ÇÑ‚ÇÅ : A‚ÇÑ‚ÇÅ ‚ü∂ A‚ÇÑ‚ÇÇ} {f‚ÇÑ‚ÇÇ : A‚ÇÑ‚ÇÇ ‚ü∂ A‚ÇÑ‚ÇÉ} {f‚ÇÑ‚ÇÉ : A‚ÇÑ‚ÇÉ ‚ü∂ A‚ÇÑ‚ÇÑ} {f‚ÇÑ‚ÇÑ : A‚ÇÑ‚ÇÑ ‚ü∂ A‚ÇÑ‚ÇÖ}
variables {g‚ÇÑ‚ÇÅ : A‚ÇÑ‚ÇÅ ‚ü∂ A‚ÇÖ‚ÇÅ} {g‚ÇÑ‚ÇÇ : A‚ÇÑ‚ÇÇ ‚ü∂ A‚ÇÖ‚ÇÇ} {g‚ÇÑ‚ÇÉ : A‚ÇÑ‚ÇÉ ‚ü∂ A‚ÇÖ‚ÇÉ} {g‚ÇÑ‚ÇÑ : A‚ÇÑ‚ÇÑ ‚ü∂ A‚ÇÖ‚ÇÑ} {g‚ÇÑ‚ÇÖ : A‚ÇÑ‚ÇÖ ‚ü∂ A‚ÇÖ‚ÇÖ}
variables {f‚ÇÖ‚ÇÅ : A‚ÇÖ‚ÇÅ ‚ü∂ A‚ÇÖ‚ÇÇ} {f‚ÇÖ‚ÇÇ : A‚ÇÖ‚ÇÇ ‚ü∂ A‚ÇÖ‚ÇÉ} {f‚ÇÖ‚ÇÉ : A‚ÇÖ‚ÇÉ ‚ü∂ A‚ÇÖ‚ÇÑ} {f‚ÇÖ‚ÇÑ : A‚ÇÖ‚ÇÑ ‚ü∂ A‚ÇÖ‚ÇÖ}

namespace bicartesian

def quatro_cons (h : exact_seq ùìê [f‚ÇÅ‚ÇÅ, f‚ÇÅ‚ÇÇ, f‚ÇÅ‚ÇÉ, f‚ÇÅ‚ÇÑ]) : cochain_complex ùìê ‚Ñï :=
((((((cochain_complex.cons homological_complex.zero (cokernel f‚ÇÅ‚ÇÑ) 0 zero_comp).cons
  _ (cokernel.œÄ _) comp_zero).cons
  _ f‚ÇÅ‚ÇÑ $ cokernel.condition _).cons
  _ f‚ÇÅ‚ÇÉ $ (h.drop 2).pair.w).cons
  _ f‚ÇÅ‚ÇÇ $ (h.drop 1).pair.w).cons
  _ f‚ÇÅ‚ÇÅ $ (h.drop 0).pair.w).cons
  _ (kernel.Œπ _) $ kernel.condition _

open cochain_complex.hom (cons)

def quatro_cons_hom
  (h‚ÇÅ : exact_seq ùìê [f‚ÇÅ‚ÇÅ, f‚ÇÅ‚ÇÇ, f‚ÇÅ‚ÇÉ, f‚ÇÅ‚ÇÑ])
  (h‚ÇÇ : exact_seq ùìê [f‚ÇÇ‚ÇÅ, f‚ÇÇ‚ÇÇ, f‚ÇÇ‚ÇÉ, f‚ÇÇ‚ÇÑ])
  (sq‚ÇÅ : commsq f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ)
  (sq‚ÇÇ : commsq f‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÉ f‚ÇÇ‚ÇÇ)
  (sq‚ÇÉ : commsq f‚ÇÅ‚ÇÉ g‚ÇÅ‚ÇÉ g‚ÇÅ‚ÇÑ f‚ÇÇ‚ÇÉ)
  (sq‚ÇÑ : commsq f‚ÇÅ‚ÇÑ g‚ÇÅ‚ÇÑ g‚ÇÅ‚ÇÖ f‚ÇÇ‚ÇÑ) :
  quatro_cons h‚ÇÅ ‚ü∂ quatro_cons h‚ÇÇ :=
cochain_complex.hom.cons _ _ (kernel.map _ _ _ _ sq‚ÇÅ.w)
  (cons _ _ g‚ÇÅ‚ÇÅ
  (cons _ _ g‚ÇÅ‚ÇÇ
  (cons _ _ g‚ÇÅ‚ÇÉ
  (cons _ _ g‚ÇÅ‚ÇÑ
  (cons _ _ g‚ÇÅ‚ÇÖ
  (cons _ _ (cokernel.map _ _ _ _ sq‚ÇÑ.w) 0 $
    comp_zero.trans comp_zero.symm) $
    (cokernel.œÄ_desc _ _ _).symm) $
    sq‚ÇÑ.w.symm) sq‚ÇÉ.w.symm) sq‚ÇÇ.w.symm) sq‚ÇÅ.w.symm) $
    kernel.lift_Œπ _ _ _

variables
  (h‚ÇÅ : exact_seq ùìê [f‚ÇÅ‚ÇÅ, f‚ÇÅ‚ÇÇ, f‚ÇÅ‚ÇÉ, f‚ÇÅ‚ÇÑ])
  (h‚ÇÇ : exact_seq ùìê [f‚ÇÇ‚ÇÅ, f‚ÇÇ‚ÇÇ, f‚ÇÇ‚ÇÉ, f‚ÇÇ‚ÇÑ])
  (sq‚ÇÅ : commsq f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ)
  (sq‚ÇÇ : commsq f‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÉ f‚ÇÇ‚ÇÇ)
  (sq‚ÇÉ : commsq f‚ÇÅ‚ÇÉ g‚ÇÅ‚ÇÉ g‚ÇÅ‚ÇÑ f‚ÇÇ‚ÇÉ)
  (sq‚ÇÑ : commsq f‚ÇÅ‚ÇÑ g‚ÇÅ‚ÇÑ g‚ÇÅ‚ÇÖ f‚ÇÇ‚ÇÑ)

def quatro_cone : cochain_complex ùìê ‚Ñ§ :=
homological_complex.cone $
  (homological_complex.embed complex_shape.embedding.nat_up_int_up).map $
  quatro_cons_hom h‚ÇÅ h‚ÇÇ sq‚ÇÅ sq‚ÇÇ sq‚ÇÉ sq‚ÇÑ

@[simp] lemma quatro_cone_X_1 :
  (quatro_cone h‚ÇÅ h‚ÇÇ sq‚ÇÅ sq‚ÇÇ sq‚ÇÉ sq‚ÇÑ).X 1 = (A‚ÇÅ‚ÇÇ ‚äû A‚ÇÇ‚ÇÅ) := rfl

@[simp] lemma quatro_cone_X_2 :
  (quatro_cone h‚ÇÅ h‚ÇÇ sq‚ÇÅ sq‚ÇÇ sq‚ÇÉ sq‚ÇÑ).X 2 = (A‚ÇÅ‚ÇÉ ‚äû A‚ÇÇ‚ÇÇ) := rfl

@[simp] lemma quatro_cone_X_3 :
  (quatro_cone h‚ÇÅ h‚ÇÇ sq‚ÇÅ sq‚ÇÇ sq‚ÇÉ sq‚ÇÑ).X 3 = (A‚ÇÅ‚ÇÑ ‚äû A‚ÇÇ‚ÇÉ) := rfl

-- move me
def biprod.matrix
  (f‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ ‚ü∂ A‚ÇÇ‚ÇÅ) (f‚ÇÇ‚ÇÅ : A‚ÇÅ‚ÇÇ ‚ü∂ A‚ÇÇ‚ÇÅ) (f‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÅ ‚ü∂ A‚ÇÇ‚ÇÇ) (f‚ÇÇ‚ÇÇ : A‚ÇÅ‚ÇÇ ‚ü∂ A‚ÇÇ‚ÇÇ) :
  A‚ÇÅ‚ÇÅ ‚äû A‚ÇÅ‚ÇÇ ‚ü∂ A‚ÇÇ‚ÇÅ ‚äû A‚ÇÇ‚ÇÇ :=
biprod.lift (biprod.desc f‚ÇÅ‚ÇÅ f‚ÇÇ‚ÇÅ) (biprod.desc f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÇ)

@[simp] lemma quatro_cone_d_12' :
  (quatro_cone h‚ÇÅ h‚ÇÇ sq‚ÇÅ sq‚ÇÇ sq‚ÇÉ sq‚ÇÑ).d 1 2 =
  biprod.matrix (-f‚ÇÅ‚ÇÇ) 0 (g‚ÇÅ‚ÇÇ ‚â´ ùüô _) f‚ÇÇ‚ÇÅ :=
rfl

@[simp] lemma quatro_cone_d_23' :
  (quatro_cone h‚ÇÅ h‚ÇÇ sq‚ÇÅ sq‚ÇÇ sq‚ÇÉ sq‚ÇÑ).d 2 3 =
  biprod.matrix (-f‚ÇÅ‚ÇÉ) 0 (g‚ÇÅ‚ÇÉ ‚â´ ùüô _) f‚ÇÇ‚ÇÇ :=
rfl

@[simp] lemma quatro_cone_d_34' :
  (quatro_cone h‚ÇÅ h‚ÇÇ sq‚ÇÅ sq‚ÇÇ sq‚ÇÉ sq‚ÇÑ).d 3 4 =
  biprod.matrix (-f‚ÇÅ‚ÇÑ) 0 (g‚ÇÅ‚ÇÑ ‚â´ ùüô _) f‚ÇÇ‚ÇÉ :=
rfl

section homotopy_category
open homotopy_category

instance quatro_cons_acyclic : is_acyclic $
  (homotopy_category.quotient _ _).obj $
  (homological_complex.embed complex_shape.embedding.nat_up_int_up).obj $
  quatro_cons h‚ÇÅ :=
begin
  constructor,
  intro n,
  obtain ‚ü®n, rfl‚ü© : ‚àÉ k, k+1 = n := ‚ü®n-1, sub_add_cancel _ _‚ü©,
  refine is_zero.of_iso _ (homology_iso _ n (n+1) (n+1+1) rfl rfl),
  refine exact.homology_is_zero _ _ _,
  rcases n with ((_|_|_|_|_|_|n)|(_|n)),
  { exact exact_kernel_Œπ },
  { exact (h‚ÇÅ.drop 0).pair },
  { exact (h‚ÇÅ.drop 1).pair },
  { exact (h‚ÇÅ.drop 2).pair },
  { exact abelian.exact_cokernel _ },
  { show exact (cokernel.œÄ _) _, exact exact_epi_zero _, },
  { exact exact_of_zero _ _ },
  { show exact _ (kernel.Œπ _), exact exact_zero_mono _ },
  { exact exact_of_zero _ _ },
end

instance quatro_cons_hom_quasi_iso : is_quasi_iso $
  (homotopy_category.quotient _ _).map $
  (homological_complex.embed complex_shape.embedding.nat_up_int_up).map $
  quatro_cons_hom h‚ÇÅ h‚ÇÇ sq‚ÇÅ sq‚ÇÇ sq‚ÇÉ sq‚ÇÑ :=
begin
  constructor,
  intro n,
  refine is_zero.is_iso _ _ _;
  apply is_acyclic.cond,
end

instance quatro_cone_acyclic : is_acyclic $
  (homotopy_category.quotient _ _).obj $
  quatro_cone h‚ÇÅ h‚ÇÇ sq‚ÇÅ sq‚ÇÇ sq‚ÇÉ sq‚ÇÑ :=
begin
  let f := (homological_complex.embed complex_shape.embedding.nat_up_int_up).map
    (quatro_cons_hom h‚ÇÅ h‚ÇÇ sq‚ÇÅ sq‚ÇÇ sq‚ÇÉ sq‚ÇÑ),
  have := cone_triangle‚Çï_mem_distinguished_triangles _ _ f,
  refine (is_quasi_iso_iff_is_acyclic _ this).mp _,
  apply bicartesian.quatro_cons_hom_quasi_iso
end

end homotopy_category

-- #check biprod.matrix (-f‚ÇÅ‚ÇÇ) 0 (g‚ÇÅ‚ÇÇ ‚â´ ùüô _) f‚ÇÇ‚ÇÅ

end bicartesian
