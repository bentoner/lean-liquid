import category_theory.abelian.homology

import for_mathlib.exact_seq3
import for_mathlib.homology_exact
import for_mathlib.homology_iso
import for_mathlib.sum_str
.

noncomputable theory

open category_theory category_theory.limits

variables {ùìê : Type*} [category ùìê] [abelian ùìê]

variables {A‚ÇÅ‚ÇÅ A‚ÇÅ‚ÇÇ A‚ÇÅ‚ÇÉ A‚ÇÅ‚ÇÑ A‚ÇÅ‚ÇÖ : ùìê}
variables {A‚ÇÇ‚ÇÅ A‚ÇÇ‚ÇÇ A‚ÇÇ‚ÇÉ A‚ÇÇ‚ÇÑ A‚ÇÇ‚ÇÖ : ùìê}
variables {A‚ÇÉ‚ÇÅ A‚ÇÉ‚ÇÇ A‚ÇÉ‚ÇÉ A‚ÇÉ‚ÇÑ A‚ÇÉ‚ÇÖ : ùìê}
variables {A‚ÇÑ‚ÇÅ A‚ÇÑ‚ÇÇ A‚ÇÑ‚ÇÉ A‚ÇÑ‚ÇÑ A‚ÇÑ‚ÇÖ : ùìê}
variables {A‚ÇÖ‚ÇÅ A‚ÇÖ‚ÇÇ A‚ÇÖ‚ÇÉ A‚ÇÖ‚ÇÑ A‚ÇÖ‚ÇÖ : ùìê}

variables {f‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ ‚ü∂ A‚ÇÅ‚ÇÇ} {f‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÇ ‚ü∂ A‚ÇÅ‚ÇÉ} {f‚ÇÅ‚ÇÉ : A‚ÇÅ‚ÇÉ ‚ü∂ A‚ÇÅ‚ÇÑ} {f‚ÇÅ‚ÇÑ : A‚ÇÅ‚ÇÑ ‚ü∂ A‚ÇÅ‚ÇÖ}
variables {g‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ ‚ü∂ A‚ÇÇ‚ÇÅ} {g‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÇ ‚ü∂ A‚ÇÇ‚ÇÇ} {g‚ÇÅ‚ÇÉ : A‚ÇÅ‚ÇÉ ‚ü∂ A‚ÇÇ‚ÇÉ} {g‚ÇÅ‚ÇÑ : A‚ÇÅ‚ÇÑ ‚ü∂ A‚ÇÇ‚ÇÑ} {g‚ÇÅ‚ÇÖ : A‚ÇÅ‚ÇÖ ‚ü∂ A‚ÇÇ‚ÇÖ}
variables {f‚ÇÇ‚ÇÅ : A‚ÇÇ‚ÇÅ ‚ü∂ A‚ÇÇ‚ÇÇ} {f‚ÇÇ‚ÇÇ : A‚ÇÇ‚ÇÇ ‚ü∂ A‚ÇÇ‚ÇÉ} {f‚ÇÇ‚ÇÉ : A‚ÇÇ‚ÇÉ ‚ü∂ A‚ÇÇ‚ÇÑ} {f‚ÇÇ‚ÇÑ : A‚ÇÇ‚ÇÑ ‚ü∂ A‚ÇÇ‚ÇÖ}
variables {g‚ÇÇ‚ÇÅ : A‚ÇÇ‚ÇÅ ‚ü∂ A‚ÇÉ‚ÇÅ} {g‚ÇÇ‚ÇÇ : A‚ÇÇ‚ÇÇ ‚ü∂ A‚ÇÉ‚ÇÇ} {g‚ÇÇ‚ÇÉ : A‚ÇÇ‚ÇÉ ‚ü∂ A‚ÇÉ‚ÇÉ} {g‚ÇÇ‚ÇÑ : A‚ÇÇ‚ÇÑ ‚ü∂ A‚ÇÉ‚ÇÑ} {g‚ÇÇ‚ÇÖ : A‚ÇÇ‚ÇÖ ‚ü∂ A‚ÇÉ‚ÇÖ}
variables {f‚ÇÉ‚ÇÅ : A‚ÇÉ‚ÇÅ ‚ü∂ A‚ÇÉ‚ÇÇ} {f‚ÇÉ‚ÇÇ : A‚ÇÉ‚ÇÇ ‚ü∂ A‚ÇÉ‚ÇÉ} {f‚ÇÉ‚ÇÉ : A‚ÇÉ‚ÇÉ ‚ü∂ A‚ÇÉ‚ÇÑ} {f‚ÇÉ‚ÇÑ : A‚ÇÉ‚ÇÑ ‚ü∂ A‚ÇÉ‚ÇÖ}
variables {g‚ÇÉ‚ÇÅ : A‚ÇÉ‚ÇÅ ‚ü∂ A‚ÇÑ‚ÇÅ} {g‚ÇÉ‚ÇÇ : A‚ÇÉ‚ÇÇ ‚ü∂ A‚ÇÑ‚ÇÇ} {g‚ÇÉ‚ÇÉ : A‚ÇÉ‚ÇÉ ‚ü∂ A‚ÇÑ‚ÇÉ} {g‚ÇÉ‚ÇÑ : A‚ÇÉ‚ÇÑ ‚ü∂ A‚ÇÑ‚ÇÑ} {g‚ÇÉ‚ÇÖ : A‚ÇÉ‚ÇÖ ‚ü∂ A‚ÇÑ‚ÇÖ}
variables {f‚ÇÑ‚ÇÅ : A‚ÇÑ‚ÇÅ ‚ü∂ A‚ÇÑ‚ÇÇ} {f‚ÇÑ‚ÇÇ : A‚ÇÑ‚ÇÇ ‚ü∂ A‚ÇÑ‚ÇÉ} {f‚ÇÑ‚ÇÉ : A‚ÇÑ‚ÇÉ ‚ü∂ A‚ÇÑ‚ÇÑ} {f‚ÇÑ‚ÇÑ : A‚ÇÑ‚ÇÑ ‚ü∂ A‚ÇÑ‚ÇÖ}
variables {g‚ÇÑ‚ÇÅ : A‚ÇÑ‚ÇÅ ‚ü∂ A‚ÇÖ‚ÇÅ} {g‚ÇÑ‚ÇÇ : A‚ÇÑ‚ÇÇ ‚ü∂ A‚ÇÖ‚ÇÇ} {g‚ÇÑ‚ÇÉ : A‚ÇÑ‚ÇÉ ‚ü∂ A‚ÇÖ‚ÇÉ} {g‚ÇÑ‚ÇÑ : A‚ÇÑ‚ÇÑ ‚ü∂ A‚ÇÖ‚ÇÑ} {g‚ÇÑ‚ÇÖ : A‚ÇÑ‚ÇÖ ‚ü∂ A‚ÇÖ‚ÇÖ}
variables {f‚ÇÖ‚ÇÅ : A‚ÇÖ‚ÇÅ ‚ü∂ A‚ÇÖ‚ÇÇ} {f‚ÇÖ‚ÇÇ : A‚ÇÖ‚ÇÇ ‚ü∂ A‚ÇÖ‚ÇÉ} {f‚ÇÖ‚ÇÉ : A‚ÇÖ‚ÇÉ ‚ü∂ A‚ÇÖ‚ÇÑ} {f‚ÇÖ‚ÇÑ : A‚ÇÖ‚ÇÑ ‚ü∂ A‚ÇÖ‚ÇÖ}

section

variables (f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)

/-- A *local bicomplex* is a commutative diagram of the following shape
```
A‚ÇÅ‚ÇÅ --- f‚ÇÅ‚ÇÅ --> A‚ÇÅ‚ÇÇ
 |               |
g‚ÇÅ‚ÇÅ             g‚ÇÅ‚ÇÇ
 |               |
 v               v
A‚ÇÇ‚ÇÅ --- f‚ÇÇ‚ÇÅ --> A‚ÇÇ‚ÇÇ --- f‚ÇÇ‚ÇÇ --> A‚ÇÇ‚ÇÉ
                 |               |
                g‚ÇÇ‚ÇÇ             g‚ÇÇ‚ÇÉ
                 |               |
                 v               v
                A‚ÇÉ‚ÇÇ --- f‚ÇÉ‚ÇÇ --> A‚ÇÉ‚ÇÉ

```
whose rows and columns are complexes. -/
@[ext] structure LBC :=
(hw : f‚ÇÇ‚ÇÅ ‚â´ f‚ÇÇ‚ÇÇ = 0)
(vw : g‚ÇÅ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÇ = 0)
(diag_in : A‚ÇÅ‚ÇÅ ‚ü∂ A‚ÇÇ‚ÇÇ)
(diag_out : A‚ÇÇ‚ÇÇ ‚ü∂ A‚ÇÉ‚ÇÉ)
(diag_in_tr‚ÇÅ : g‚ÇÅ‚ÇÅ ‚â´ f‚ÇÇ‚ÇÅ = diag_in)
(diag_in_tr‚ÇÇ : f‚ÇÅ‚ÇÅ ‚â´ g‚ÇÅ‚ÇÇ = diag_in)
(diag_out_tr‚ÇÅ : g‚ÇÇ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÇ = diag_out)
(diag_out_tr‚ÇÇ : f‚ÇÇ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ = diag_out)
(X Y : ùìê)
(sum‚ÇÅ : sum_str A‚ÇÅ‚ÇÇ A‚ÇÇ‚ÇÅ X)
(sum‚ÇÇ : sum_str A‚ÇÇ‚ÇÉ A‚ÇÉ‚ÇÇ Y)
(œÄ : X ‚ü∂ A‚ÇÇ‚ÇÇ)
(Œπ : A‚ÇÇ‚ÇÇ ‚ü∂ Y)
(inl_œÄ : sum‚ÇÅ.inl ‚â´ œÄ = g‚ÇÅ‚ÇÇ)
(inr_œÄ : sum‚ÇÅ.inr ‚â´ œÄ = f‚ÇÇ‚ÇÅ)
(Œπ_fst : Œπ ‚â´ sum‚ÇÇ.fst = f‚ÇÇ‚ÇÇ)
(Œπ_snd : Œπ ‚â´ sum‚ÇÇ.snd = g‚ÇÇ‚ÇÇ)

structure LBC.core :=
(hw : f‚ÇÇ‚ÇÅ ‚â´ f‚ÇÇ‚ÇÇ = 0)
(vw : g‚ÇÅ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÇ = 0)
(sq‚ÇÅ : f‚ÇÅ‚ÇÅ ‚â´ g‚ÇÅ‚ÇÇ = g‚ÇÅ‚ÇÅ ‚â´ f‚ÇÇ‚ÇÅ)
(sq‚ÇÇ : f‚ÇÇ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ = g‚ÇÇ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÇ)

end

namespace LBC

attribute [reassoc] LBC.hw LBC.vw

@[reassoc] lemma sq‚ÇÅ (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) : f‚ÇÅ‚ÇÅ ‚â´ g‚ÇÅ‚ÇÇ = g‚ÇÅ‚ÇÅ ‚â´ f‚ÇÇ‚ÇÅ :=
by rw [lbc.diag_in_tr‚ÇÅ, diag_in_tr‚ÇÇ]

@[reassoc] lemma sq‚ÇÇ (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) : f‚ÇÇ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ = g‚ÇÇ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÇ :=
by rw [lbc.diag_out_tr‚ÇÅ, diag_out_tr‚ÇÇ]

@[simps]
def of_core (lbc : core f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ :=
{ hw := lbc.hw,
  vw := lbc.vw,
  diag_in := g‚ÇÅ‚ÇÅ ‚â´ f‚ÇÇ‚ÇÅ,
  diag_out := g‚ÇÇ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÇ,
  diag_in_tr‚ÇÅ := rfl,
  diag_in_tr‚ÇÇ := lbc.sq‚ÇÅ,
  diag_out_tr‚ÇÅ := rfl,
  diag_out_tr‚ÇÇ := lbc.sq‚ÇÇ,
  X := A‚ÇÅ‚ÇÇ ‚äû A‚ÇÇ‚ÇÅ,
  Y := A‚ÇÇ‚ÇÉ ‚äû A‚ÇÉ‚ÇÇ,
  sum‚ÇÅ := sum_str.biprod _ _,
  sum‚ÇÇ := sum_str.biprod _ _,
  œÄ := biprod.desc g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ,
  Œπ := biprod.lift f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ,
  inl_œÄ := biprod.inl_desc _ _,
  inr_œÄ := biprod.inr_desc _ _,
  Œπ_fst := biprod.lift_fst _ _,
  Œπ_snd := biprod.lift_snd _ _, }

@[simps]
def symm (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  LBC g‚ÇÅ‚ÇÅ f‚ÇÅ‚ÇÅ f‚ÇÇ‚ÇÅ g‚ÇÅ‚ÇÇ g‚ÇÇ‚ÇÇ f‚ÇÇ‚ÇÇ f‚ÇÉ‚ÇÇ g‚ÇÇ‚ÇÉ :=
{ hw := lbc.vw,
  vw := lbc.hw,
  diag_in := lbc.diag_in,
  diag_out := lbc.diag_out,
  diag_in_tr‚ÇÅ := lbc.diag_in_tr‚ÇÇ,
  diag_in_tr‚ÇÇ := lbc.diag_in_tr‚ÇÅ,
  diag_out_tr‚ÇÅ := lbc.diag_out_tr‚ÇÇ,
  diag_out_tr‚ÇÇ := lbc.diag_out_tr‚ÇÅ,
  X := lbc.X,
  Y := lbc.Y,
  sum‚ÇÅ := lbc.sum‚ÇÅ.symm,
  sum‚ÇÇ := lbc.sum‚ÇÇ.symm,
  œÄ := lbc.œÄ,
  Œπ := lbc.Œπ,
  inl_œÄ := lbc.inr_œÄ,
  inr_œÄ := lbc.inl_œÄ,
  Œπ_fst := lbc.Œπ_snd,
  Œπ_snd := lbc.Œπ_fst }

section
open opposite

@[simps]
protected def op (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  LBC f‚ÇÉ‚ÇÇ.op g‚ÇÇ‚ÇÉ.op g‚ÇÇ‚ÇÇ.op f‚ÇÇ‚ÇÇ.op f‚ÇÇ‚ÇÅ.op g‚ÇÅ‚ÇÇ.op g‚ÇÅ‚ÇÅ.op f‚ÇÅ‚ÇÅ.op :=
{ hw := by { rw [‚Üê op_comp, lbc.hw, op_zero] },
  vw := by { rw [‚Üê op_comp, lbc.vw, op_zero] },
  diag_in := lbc.diag_out.op,
  diag_out := lbc.diag_in.op,
  diag_in_tr‚ÇÅ := by { rw [‚Üê op_comp, lbc.diag_out_tr‚ÇÇ] },
  diag_in_tr‚ÇÇ := by { rw [‚Üê op_comp, lbc.diag_out_tr‚ÇÅ] },
  diag_out_tr‚ÇÅ := by { rw [‚Üê op_comp, lbc.diag_in_tr‚ÇÇ] },
  diag_out_tr‚ÇÇ := by { rw [‚Üê op_comp, lbc.diag_in_tr‚ÇÅ] },
  X := op lbc.Y,
  Y := op lbc.X,
  sum‚ÇÅ := lbc.symm.sum‚ÇÇ.op,
  sum‚ÇÇ := lbc.symm.sum‚ÇÅ.op,
  œÄ := lbc.Œπ.op,
  Œπ := lbc.œÄ.op,
  inl_œÄ := by { dsimp, rw [‚Üê op_comp, lbc.Œπ_snd], },
  inr_œÄ := by { dsimp, rw [‚Üê op_comp, lbc.Œπ_fst], },
  Œπ_fst := by { dsimp, rw [‚Üê op_comp, lbc.inr_œÄ], },
  Œπ_snd := by { dsimp, rw [‚Üê op_comp, lbc.inl_œÄ], } }

variables {A'‚ÇÅ‚ÇÅ A'‚ÇÅ‚ÇÇ A'‚ÇÅ‚ÇÉ A'‚ÇÅ‚ÇÑ A'‚ÇÅ‚ÇÖ : ùìê·µí·µñ}
variables {A'‚ÇÇ‚ÇÅ A'‚ÇÇ‚ÇÇ A'‚ÇÇ‚ÇÉ A'‚ÇÇ‚ÇÑ A'‚ÇÇ‚ÇÖ : ùìê·µí·µñ}
variables {A'‚ÇÉ‚ÇÅ A'‚ÇÉ‚ÇÇ A'‚ÇÉ‚ÇÉ A'‚ÇÉ‚ÇÑ A'‚ÇÉ‚ÇÖ : ùìê·µí·µñ}
variables {A'‚ÇÑ‚ÇÅ A'‚ÇÑ‚ÇÇ A'‚ÇÑ‚ÇÉ A'‚ÇÑ‚ÇÑ A'‚ÇÑ‚ÇÖ : ùìê·µí·µñ}
variables {A'‚ÇÖ‚ÇÅ A'‚ÇÖ‚ÇÇ A'‚ÇÖ‚ÇÉ A'‚ÇÖ‚ÇÑ A'‚ÇÖ‚ÇÖ : ùìê·µí·µñ}

variables {f'‚ÇÅ‚ÇÅ : A'‚ÇÅ‚ÇÅ ‚ü∂ A'‚ÇÅ‚ÇÇ} {f'‚ÇÅ‚ÇÇ : A'‚ÇÅ‚ÇÇ ‚ü∂ A'‚ÇÅ‚ÇÉ} {f'‚ÇÅ‚ÇÉ : A'‚ÇÅ‚ÇÉ ‚ü∂ A'‚ÇÅ‚ÇÑ} {f'‚ÇÅ‚ÇÑ : A'‚ÇÅ‚ÇÑ ‚ü∂ A'‚ÇÅ‚ÇÖ}
variables {g'‚ÇÅ‚ÇÅ : A'‚ÇÅ‚ÇÅ ‚ü∂ A'‚ÇÇ‚ÇÅ} {g'‚ÇÅ‚ÇÇ : A'‚ÇÅ‚ÇÇ ‚ü∂ A'‚ÇÇ‚ÇÇ} {g'‚ÇÅ‚ÇÉ : A'‚ÇÅ‚ÇÉ ‚ü∂ A'‚ÇÇ‚ÇÉ} {g'‚ÇÅ‚ÇÑ : A'‚ÇÅ‚ÇÑ ‚ü∂ A'‚ÇÇ‚ÇÑ} {g'‚ÇÅ‚ÇÖ : A'‚ÇÅ‚ÇÖ ‚ü∂ A'‚ÇÇ‚ÇÖ}
variables {f'‚ÇÇ‚ÇÅ : A'‚ÇÇ‚ÇÅ ‚ü∂ A'‚ÇÇ‚ÇÇ} {f'‚ÇÇ‚ÇÇ : A'‚ÇÇ‚ÇÇ ‚ü∂ A'‚ÇÇ‚ÇÉ} {f'‚ÇÇ‚ÇÉ : A'‚ÇÇ‚ÇÉ ‚ü∂ A'‚ÇÇ‚ÇÑ} {f'‚ÇÇ‚ÇÑ : A'‚ÇÇ‚ÇÑ ‚ü∂ A'‚ÇÇ‚ÇÖ}
variables {g'‚ÇÇ‚ÇÅ : A'‚ÇÇ‚ÇÅ ‚ü∂ A'‚ÇÉ‚ÇÅ} {g'‚ÇÇ‚ÇÇ : A'‚ÇÇ‚ÇÇ ‚ü∂ A'‚ÇÉ‚ÇÇ} {g'‚ÇÇ‚ÇÉ : A'‚ÇÇ‚ÇÉ ‚ü∂ A'‚ÇÉ‚ÇÉ} {g'‚ÇÇ‚ÇÑ : A'‚ÇÇ‚ÇÑ ‚ü∂ A'‚ÇÉ‚ÇÑ} {g'‚ÇÇ‚ÇÖ : A'‚ÇÇ‚ÇÖ ‚ü∂ A'‚ÇÉ‚ÇÖ}
variables {f'‚ÇÉ‚ÇÅ : A'‚ÇÉ‚ÇÅ ‚ü∂ A'‚ÇÉ‚ÇÇ} {f'‚ÇÉ‚ÇÇ : A'‚ÇÉ‚ÇÇ ‚ü∂ A'‚ÇÉ‚ÇÉ} {f'‚ÇÉ‚ÇÉ : A'‚ÇÉ‚ÇÉ ‚ü∂ A'‚ÇÉ‚ÇÑ} {f'‚ÇÉ‚ÇÑ : A'‚ÇÉ‚ÇÑ ‚ü∂ A'‚ÇÉ‚ÇÖ}
variables {g'‚ÇÉ‚ÇÅ : A'‚ÇÉ‚ÇÅ ‚ü∂ A'‚ÇÑ‚ÇÅ} {g'‚ÇÉ‚ÇÇ : A'‚ÇÉ‚ÇÇ ‚ü∂ A'‚ÇÑ‚ÇÇ} {g'‚ÇÉ‚ÇÉ : A'‚ÇÉ‚ÇÉ ‚ü∂ A'‚ÇÑ‚ÇÉ} {g'‚ÇÉ‚ÇÑ : A'‚ÇÉ‚ÇÑ ‚ü∂ A'‚ÇÑ‚ÇÑ} {g'‚ÇÉ‚ÇÖ : A'‚ÇÉ‚ÇÖ ‚ü∂ A'‚ÇÑ‚ÇÖ}
variables {f'‚ÇÑ‚ÇÅ : A'‚ÇÑ‚ÇÅ ‚ü∂ A'‚ÇÑ‚ÇÇ} {f'‚ÇÑ‚ÇÇ : A'‚ÇÑ‚ÇÇ ‚ü∂ A'‚ÇÑ‚ÇÉ} {f'‚ÇÑ‚ÇÉ : A'‚ÇÑ‚ÇÉ ‚ü∂ A'‚ÇÑ‚ÇÑ} {f'‚ÇÑ‚ÇÑ : A'‚ÇÑ‚ÇÑ ‚ü∂ A'‚ÇÑ‚ÇÖ}
variables {g'‚ÇÑ‚ÇÅ : A'‚ÇÑ‚ÇÅ ‚ü∂ A'‚ÇÖ‚ÇÅ} {g'‚ÇÑ‚ÇÇ : A'‚ÇÑ‚ÇÇ ‚ü∂ A'‚ÇÖ‚ÇÇ} {g'‚ÇÑ‚ÇÉ : A'‚ÇÑ‚ÇÉ ‚ü∂ A'‚ÇÖ‚ÇÉ} {g'‚ÇÑ‚ÇÑ : A'‚ÇÑ‚ÇÑ ‚ü∂ A'‚ÇÖ‚ÇÑ} {g'‚ÇÑ‚ÇÖ : A'‚ÇÑ‚ÇÖ ‚ü∂ A'‚ÇÖ‚ÇÖ}
variables {f'‚ÇÖ‚ÇÅ : A'‚ÇÖ‚ÇÅ ‚ü∂ A'‚ÇÖ‚ÇÇ} {f'‚ÇÖ‚ÇÇ : A'‚ÇÖ‚ÇÇ ‚ü∂ A'‚ÇÖ‚ÇÉ} {f'‚ÇÖ‚ÇÉ : A'‚ÇÖ‚ÇÉ ‚ü∂ A'‚ÇÖ‚ÇÑ} {f'‚ÇÖ‚ÇÑ : A'‚ÇÖ‚ÇÑ ‚ü∂ A'‚ÇÖ‚ÇÖ}

@[simps]
protected def unop (lbc : LBC f'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÇ f'‚ÇÇ‚ÇÅ f'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÉ f'‚ÇÉ‚ÇÇ) :
  LBC f'‚ÇÉ‚ÇÇ.unop g'‚ÇÇ‚ÇÉ.unop g'‚ÇÇ‚ÇÇ.unop f'‚ÇÇ‚ÇÇ.unop f'‚ÇÇ‚ÇÅ.unop g'‚ÇÅ‚ÇÇ.unop g'‚ÇÅ‚ÇÅ.unop f'‚ÇÅ‚ÇÅ.unop :=
{ hw := by { rw [‚Üê unop_comp, lbc.hw, unop_zero] },
  vw := by { rw [‚Üê unop_comp, lbc.vw, unop_zero] },
  diag_in := lbc.diag_out.unop,
  diag_out := lbc.diag_in.unop,
  diag_in_tr‚ÇÅ := by { rw [‚Üê unop_comp, lbc.diag_out_tr‚ÇÇ] },
  diag_in_tr‚ÇÇ := by { rw [‚Üê unop_comp, lbc.diag_out_tr‚ÇÅ] },
  diag_out_tr‚ÇÅ := by { rw [‚Üê unop_comp, lbc.diag_in_tr‚ÇÇ] },
  diag_out_tr‚ÇÇ := by { rw [‚Üê unop_comp, lbc.diag_in_tr‚ÇÅ] },
  X := unop lbc.Y,
  Y := unop lbc.X,
  sum‚ÇÅ := lbc.symm.sum‚ÇÇ.unop,
  sum‚ÇÇ := lbc.symm.sum‚ÇÅ.unop,
  œÄ := lbc.Œπ.unop,
  Œπ := lbc.œÄ.unop,
  inl_œÄ := by { dsimp, rw [‚Üê unop_comp, lbc.Œπ_snd], },
  inr_œÄ := by { dsimp, rw [‚Üê unop_comp, lbc.Œπ_fst], },
  Œπ_fst := by { dsimp, rw [‚Üê unop_comp, lbc.inr_œÄ], },
  Œπ_snd := by { dsimp, rw [‚Üê unop_comp, lbc.inl_œÄ], } }
.

lemma unop_op (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) : lbc.op.unop = lbc :=
begin
  cases lbc, ext; try { refl },
  { dsimp, rw [‚Üê sum_str.op_symm, sum_str.unop_op, sum_str.symm_symm], },
  { dsimp, rw [‚Üê sum_str.op_symm, sum_str.unop_op, sum_str.symm_symm], },
end

lemma op_unop (lbc : LBC f'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÇ f'‚ÇÇ‚ÇÅ f'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÉ f'‚ÇÉ‚ÇÇ) : lbc.unop.op = lbc :=
begin
  cases lbc, ext; try { refl },
  { dsimp, rw [‚Üê sum_str.unop_symm, sum_str.op_unop, sum_str.symm_symm], },
  { dsimp, rw [‚Üê sum_str.unop_symm, sum_str.op_unop, sum_str.symm_symm], },
end

end

@[reassoc] lemma diag_in_r (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  lbc.diag_in ‚â´ f‚ÇÇ‚ÇÇ = 0 :=
by rw [‚Üê lbc.diag_in_tr‚ÇÅ, category.assoc, lbc.hw, comp_zero]

@[reassoc] lemma diag_in_d (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  lbc.diag_in ‚â´ g‚ÇÇ‚ÇÇ = 0 :=
by rw [‚Üê lbc.diag_in_tr‚ÇÇ, category.assoc, lbc.vw, comp_zero]

@[reassoc] lemma r_diag_out (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  f‚ÇÇ‚ÇÅ ‚â´ lbc.diag_out = 0 :=
by rw [‚Üê lbc.diag_out_tr‚ÇÇ, ‚Üê category.assoc, lbc.hw, zero_comp]

@[reassoc] lemma d_diag_out (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  g‚ÇÅ‚ÇÇ ‚â´ lbc.diag_out = 0 :=
by rw [‚Üê lbc.diag_out_tr‚ÇÅ, ‚Üê category.assoc, lbc.vw, zero_comp]

lemma œÄ_eq (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  lbc.œÄ = lbc.sum‚ÇÅ.fst ‚â´ g‚ÇÅ‚ÇÇ + lbc.sum‚ÇÅ.snd ‚â´ f‚ÇÇ‚ÇÅ :=
by rw [‚Üê category.id_comp lbc.œÄ, ‚Üê lbc.sum‚ÇÅ.total, preadditive.add_comp,
  category.assoc, category.assoc, lbc.inl_œÄ, lbc.inr_œÄ]

lemma Œπ_eq (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  lbc.Œπ = f‚ÇÇ‚ÇÇ ‚â´ lbc.sum‚ÇÇ.inl + g‚ÇÇ‚ÇÇ ‚â´ lbc.sum‚ÇÇ.inr :=
by rw [‚Üê category.comp_id lbc.Œπ, ‚Üê lbc.sum‚ÇÇ.total, preadditive.comp_add,
  ‚Üê category.assoc, ‚Üê category.assoc, lbc.Œπ_fst, lbc.Œπ_snd]

lemma diag_in_Œπ (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  lbc.diag_in ‚â´ lbc.Œπ = 0 :=
by simp only [lbc.Œπ_eq, preadditive.comp_add, category.assoc, zero_comp, add_zero,
    reassoc_of lbc.Œπ_fst, reassoc_of lbc.Œπ_snd, lbc.diag_in_r_assoc, lbc.diag_in_d_assoc]

lemma œÄ_diag_out (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  lbc.œÄ ‚â´ lbc.diag_out = 0 :=
by simp only [lbc.œÄ_eq, preadditive.add_comp, category.assoc, comp_zero, add_zero,
    reassoc_of lbc.inl_œÄ, reassoc_of lbc.inr_œÄ, lbc.r_diag_out, lbc.d_diag_out]

lemma drd‚ÇÅ (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  g‚ÇÅ‚ÇÅ ‚â´ f‚ÇÇ‚ÇÅ ‚â´ g‚ÇÇ‚ÇÇ = 0 :=
by rw [‚Üê lbc.sq‚ÇÅ_assoc, lbc.vw, comp_zero]

lemma drd‚ÇÇ (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  g‚ÇÅ‚ÇÇ ‚â´ f‚ÇÇ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ = 0 :=
by rw [lbc.sq‚ÇÇ, lbc.vw_assoc, zero_comp]

lemma rdr‚ÇÅ (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  f‚ÇÅ‚ÇÅ ‚â´ g‚ÇÅ‚ÇÇ ‚â´ f‚ÇÇ‚ÇÇ = 0 :=
by rw [lbc.sq‚ÇÅ_assoc, lbc.hw, comp_zero]

lemma rdr‚ÇÇ (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) :
  f‚ÇÇ‚ÇÅ ‚â´ g‚ÇÇ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÇ = 0 :=
by rw [‚Üê lbc.sq‚ÇÇ, lbc.hw_assoc, zero_comp]

/-- The *receptor* of a local bicomplex. -/
def rcp (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) : ùìê :=
homology lbc.diag_in lbc.Œπ lbc.diag_in_Œπ

/-- The *donor* of a local bicomplex. -/
def don (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) : ùìê :=
homology lbc.œÄ lbc.diag_out lbc.œÄ_diag_out

/-- The *horizontal homology* of a local bicomplex. -/
def H (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) : ùìê :=
homology f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ lbc.hw

/-- The *vertical homology* of a local bicomplex. -/
def V (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ) : ùìê :=
homology g‚ÇÅ‚ÇÇ g‚ÇÇ‚ÇÇ lbc.vw

variables (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)

lemma H_is_zero_iff : is_zero lbc.H ‚Üî exact f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ :=
begin
  rw preadditive.exact_iff_homology_zero,
  simp only [lbc.hw, eq_self_iff_true, exists_true_left],
  split,
  refine Œª h, ‚ü®h.iso_zero‚ü©,
  rintro ‚ü®i‚ü©, exact is_zero_of_iso_of_zero (is_zero_zero _) i.symm
end

lemma V_is_zero_iff : is_zero lbc.V ‚Üî exact g‚ÇÅ‚ÇÇ g‚ÇÇ‚ÇÇ :=
lbc.symm.H_is_zero_iff

/-- The intramural map from the receptor to the horizontal homology. -/
def rcp_to_H : lbc.rcp ‚ü∂ lbc.H :=
homology.map _ _
  { left := g‚ÇÅ‚ÇÅ,
    right := ùüô _,
    w' := by { dsimp, rw [category.comp_id, lbc.diag_in_tr‚ÇÅ], } }
  { left := ùüô _,
    right := lbc.sum‚ÇÇ.fst,
    w' := by { dsimp, rw [category.id_comp, lbc.Œπ_fst], } }
  rfl

/-- The intramural map from the receptor to the vertical homology. -/
def rcp_to_V : lbc.rcp ‚ü∂ lbc.V :=
homology.map _ _
  { left := f‚ÇÅ‚ÇÅ,
    right := ùüô _,
    w' := by { dsimp, rw [category.comp_id, lbc.diag_in_tr‚ÇÇ], } }
  { left := ùüô _,
    right := lbc.sum‚ÇÇ.snd,
    w' := by { dsimp, rw [category.id_comp, lbc.Œπ_snd], } }
  rfl

/-- The intramural map from the horizontal homology to the donor. -/
def H_to_don : lbc.H ‚ü∂ lbc.don :=
homology.map _ _
  { left := lbc.sum‚ÇÅ.inr,
    right := ùüô _,
    w' := by { dsimp, rw [category.comp_id, lbc.inr_œÄ], } }
  { left := ùüô _,
    right := g‚ÇÇ‚ÇÉ,
    w' := by { dsimp, rw [category.id_comp, lbc.diag_out_tr‚ÇÇ], } }
  rfl

/-- The intramural map from the vertical homology to the donor. -/
def V_to_don : lbc.V ‚ü∂ lbc.don :=
homology.map _ _
  { left := lbc.sum‚ÇÅ.inl,
    right := ùüô _,
    w' := by { dsimp, rw [category.comp_id, lbc.inl_œÄ], } }
  { left := ùüô _,
    right := f‚ÇÉ‚ÇÇ,
    w' := by { dsimp, rw [category.id_comp, lbc.diag_out_tr‚ÇÅ], } }
  rfl

lemma rcp_to_H_comp_H_to_don : lbc.rcp_to_H ‚â´ lbc.H_to_don = lbc.rcp_to_V ‚â´ lbc.V_to_don :=
begin
  delta rcp_to_H H_to_don rcp_to_V V_to_don,
  rw [homology.map_comp, homology.map_comp],
  refl,
end

/-- The horizontal extramural map. -/
def ex_h
  (lbc‚ÇÅ : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
  (lbc‚ÇÇ : LBC f‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÉ f‚ÇÇ‚ÇÇ f‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÑ f‚ÇÉ‚ÇÉ) :
  lbc‚ÇÅ.don ‚ü∂ lbc‚ÇÇ.rcp :=
homology.map _ _
  { left := lbc‚ÇÅ.sum‚ÇÅ.fst,
    right := f‚ÇÇ‚ÇÇ,
    w' := by { dsimp, rw [lbc‚ÇÅ.œÄ_eq, preadditive.add_comp, category.assoc, category.assoc,
      lbc‚ÇÅ.hw, comp_zero, add_zero, lbc‚ÇÇ.diag_in_tr‚ÇÅ], } }
  { left := f‚ÇÇ‚ÇÇ,
    right := lbc‚ÇÇ.sum‚ÇÇ.inr,
    w' := by { dsimp, rw [lbc‚ÇÇ.Œπ_eq, preadditive.comp_add, ‚Üê category.assoc, ‚Üê category.assoc,
      lbc‚ÇÇ.hw, zero_comp, zero_add, lbc‚ÇÅ.diag_out_tr‚ÇÇ], } }
  rfl
.

lemma V_to_don_comp_ex_h_comp_rcp_to_V
  (lbc‚ÇÅ : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
  (lbc‚ÇÇ : LBC f‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÉ f‚ÇÇ‚ÇÇ f‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÑ f‚ÇÉ‚ÇÉ) :
  lbc‚ÇÅ.V_to_don ‚â´ ex_h lbc‚ÇÅ lbc‚ÇÇ ‚â´ lbc‚ÇÇ.rcp_to_V =
  homology.map _ _ ‚ü®f‚ÇÅ‚ÇÇ, f‚ÇÇ‚ÇÇ, lbc‚ÇÇ.sq‚ÇÅ‚ü© ‚ü®f‚ÇÇ‚ÇÇ, f‚ÇÉ‚ÇÇ, lbc‚ÇÅ.sq‚ÇÇ‚ü© rfl :=
begin
  delta V_to_don ex_h rcp_to_V,
  rw [homology.map_comp, homology.map_comp],
  congr' 1; apply category_theory.comma_morphism.ext; dsimp;
  simp only [sum_str.inl_fst, sum_str.inl_fst_assoc, sum_str.inr_snd, sum_str.inr_snd_assoc,
    category.id_comp, category.comp_id],
end

/-- The vertical extramural map. -/
def ex_v
  (lbc‚ÇÅ : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
  (lbc‚ÇÇ : LBC f‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÇ f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ g‚ÇÉ‚ÇÇ g‚ÇÉ‚ÇÉ f‚ÇÑ‚ÇÇ) :
  lbc‚ÇÅ.don ‚ü∂ lbc‚ÇÇ.rcp :=
homology.map _ _
  { left := lbc‚ÇÅ.sum‚ÇÅ.snd,
    right := g‚ÇÇ‚ÇÇ,
    w' := by { dsimp, rw [lbc‚ÇÅ.œÄ_eq, preadditive.add_comp, category.assoc, category.assoc,
      lbc‚ÇÅ.vw, comp_zero, zero_add, lbc‚ÇÇ.diag_in_tr‚ÇÇ], } }
  { left := g‚ÇÇ‚ÇÇ,
    right := lbc‚ÇÇ.sum‚ÇÇ.inl,
    w' := by { dsimp, rw [lbc‚ÇÇ.Œπ_eq, preadditive.comp_add, ‚Üê category.assoc, ‚Üê category.assoc,
      lbc‚ÇÇ.vw, zero_comp, add_zero, lbc‚ÇÅ.diag_out_tr‚ÇÅ], } }
  rfl
.

lemma H_to_don_comp_ex_v_comp_rcp_to_H
  (lbc‚ÇÅ : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
  (lbc‚ÇÇ : LBC f‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÇ f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ g‚ÇÉ‚ÇÇ g‚ÇÉ‚ÇÉ f‚ÇÑ‚ÇÇ) :
  lbc‚ÇÅ.H_to_don ‚â´ ex_v lbc‚ÇÅ lbc‚ÇÇ ‚â´ lbc‚ÇÇ.rcp_to_H =
  homology.map _ _ ‚ü®g‚ÇÇ‚ÇÅ, g‚ÇÇ‚ÇÇ, lbc‚ÇÇ.sq‚ÇÅ.symm‚ü© ‚ü®g‚ÇÇ‚ÇÇ, g‚ÇÇ‚ÇÉ, lbc‚ÇÅ.sq‚ÇÇ.symm‚ü© rfl :=
begin
  delta H_to_don ex_v rcp_to_H,
  rw [homology.map_comp, homology.map_comp],
  congr' 1; apply category_theory.comma_morphism.ext; dsimp;
  simp only [sum_str.inl_fst, sum_str.inl_fst_assoc, sum_str.inr_snd, sum_str.inr_snd_assoc,
    category.id_comp, category.comp_id],
end
.

/-
#############################################
#
# The rest of this file is very interesting in its own right,
# but we don't need it for LTE, and it contains some annoying sorries
#
#############################################
-/

-- open_locale pseudoelement
-- open category_theory.abelian

-- section

-- variables {A'‚ÇÅ‚ÇÅ A'‚ÇÅ‚ÇÇ A'‚ÇÅ‚ÇÉ A'‚ÇÅ‚ÇÑ A'‚ÇÅ‚ÇÖ : ùìê·µí·µñ}
-- variables {A'‚ÇÇ‚ÇÅ A'‚ÇÇ‚ÇÇ A'‚ÇÇ‚ÇÉ A'‚ÇÇ‚ÇÑ A'‚ÇÇ‚ÇÖ : ùìê·µí·µñ}
-- variables {A'‚ÇÉ‚ÇÅ A'‚ÇÉ‚ÇÇ A'‚ÇÉ‚ÇÉ A'‚ÇÉ‚ÇÑ A'‚ÇÉ‚ÇÖ : ùìê·µí·µñ}
-- variables {A'‚ÇÑ‚ÇÅ A'‚ÇÑ‚ÇÇ A'‚ÇÑ‚ÇÉ A'‚ÇÑ‚ÇÑ A'‚ÇÑ‚ÇÖ : ùìê·µí·µñ}
-- variables {A'‚ÇÖ‚ÇÅ A'‚ÇÖ‚ÇÇ A'‚ÇÖ‚ÇÉ A'‚ÇÖ‚ÇÑ A'‚ÇÖ‚ÇÖ : ùìê·µí·µñ}

-- variables {f'‚ÇÅ‚ÇÅ : A'‚ÇÅ‚ÇÅ ‚ü∂ A'‚ÇÅ‚ÇÇ} {f'‚ÇÅ‚ÇÇ : A'‚ÇÅ‚ÇÇ ‚ü∂ A'‚ÇÅ‚ÇÉ} {f'‚ÇÅ‚ÇÉ : A'‚ÇÅ‚ÇÉ ‚ü∂ A'‚ÇÅ‚ÇÑ} {f'‚ÇÅ‚ÇÑ : A'‚ÇÅ‚ÇÑ ‚ü∂ A'‚ÇÅ‚ÇÖ}
-- variables {g'‚ÇÅ‚ÇÅ : A'‚ÇÅ‚ÇÅ ‚ü∂ A'‚ÇÇ‚ÇÅ} {g'‚ÇÅ‚ÇÇ : A'‚ÇÅ‚ÇÇ ‚ü∂ A'‚ÇÇ‚ÇÇ} {g'‚ÇÅ‚ÇÉ : A'‚ÇÅ‚ÇÉ ‚ü∂ A'‚ÇÇ‚ÇÉ} {g'‚ÇÅ‚ÇÑ : A'‚ÇÅ‚ÇÑ ‚ü∂ A'‚ÇÇ‚ÇÑ} {g'‚ÇÅ‚ÇÖ : A'‚ÇÅ‚ÇÖ ‚ü∂ A'‚ÇÇ‚ÇÖ}
-- variables {f'‚ÇÇ‚ÇÅ : A'‚ÇÇ‚ÇÅ ‚ü∂ A'‚ÇÇ‚ÇÇ} {f'‚ÇÇ‚ÇÇ : A'‚ÇÇ‚ÇÇ ‚ü∂ A'‚ÇÇ‚ÇÉ} {f'‚ÇÇ‚ÇÉ : A'‚ÇÇ‚ÇÉ ‚ü∂ A'‚ÇÇ‚ÇÑ} {f'‚ÇÇ‚ÇÑ : A'‚ÇÇ‚ÇÑ ‚ü∂ A'‚ÇÇ‚ÇÖ}
-- variables {g'‚ÇÇ‚ÇÅ : A'‚ÇÇ‚ÇÅ ‚ü∂ A'‚ÇÉ‚ÇÅ} {g'‚ÇÇ‚ÇÇ : A'‚ÇÇ‚ÇÇ ‚ü∂ A'‚ÇÉ‚ÇÇ} {g'‚ÇÇ‚ÇÉ : A'‚ÇÇ‚ÇÉ ‚ü∂ A'‚ÇÉ‚ÇÉ} {g'‚ÇÇ‚ÇÑ : A'‚ÇÇ‚ÇÑ ‚ü∂ A'‚ÇÉ‚ÇÑ} {g'‚ÇÇ‚ÇÖ : A'‚ÇÇ‚ÇÖ ‚ü∂ A'‚ÇÉ‚ÇÖ}
-- variables {f'‚ÇÉ‚ÇÅ : A'‚ÇÉ‚ÇÅ ‚ü∂ A'‚ÇÉ‚ÇÇ} {f'‚ÇÉ‚ÇÇ : A'‚ÇÉ‚ÇÇ ‚ü∂ A'‚ÇÉ‚ÇÉ} {f'‚ÇÉ‚ÇÉ : A'‚ÇÉ‚ÇÉ ‚ü∂ A'‚ÇÉ‚ÇÑ} {f'‚ÇÉ‚ÇÑ : A'‚ÇÉ‚ÇÑ ‚ü∂ A'‚ÇÉ‚ÇÖ}
-- variables {g'‚ÇÉ‚ÇÅ : A'‚ÇÉ‚ÇÅ ‚ü∂ A'‚ÇÑ‚ÇÅ} {g'‚ÇÉ‚ÇÇ : A'‚ÇÉ‚ÇÇ ‚ü∂ A'‚ÇÑ‚ÇÇ} {g'‚ÇÉ‚ÇÉ : A'‚ÇÉ‚ÇÉ ‚ü∂ A'‚ÇÑ‚ÇÉ} {g'‚ÇÉ‚ÇÑ : A'‚ÇÉ‚ÇÑ ‚ü∂ A'‚ÇÑ‚ÇÑ} {g'‚ÇÉ‚ÇÖ : A'‚ÇÉ‚ÇÖ ‚ü∂ A'‚ÇÑ‚ÇÖ}
-- variables {f'‚ÇÑ‚ÇÅ : A'‚ÇÑ‚ÇÅ ‚ü∂ A'‚ÇÑ‚ÇÇ} {f'‚ÇÑ‚ÇÇ : A'‚ÇÑ‚ÇÇ ‚ü∂ A'‚ÇÑ‚ÇÉ} {f'‚ÇÑ‚ÇÉ : A'‚ÇÑ‚ÇÉ ‚ü∂ A'‚ÇÑ‚ÇÑ} {f'‚ÇÑ‚ÇÑ : A'‚ÇÑ‚ÇÑ ‚ü∂ A'‚ÇÑ‚ÇÖ}
-- variables {g'‚ÇÑ‚ÇÅ : A'‚ÇÑ‚ÇÅ ‚ü∂ A'‚ÇÖ‚ÇÅ} {g'‚ÇÑ‚ÇÇ : A'‚ÇÑ‚ÇÇ ‚ü∂ A'‚ÇÖ‚ÇÇ} {g'‚ÇÑ‚ÇÉ : A'‚ÇÑ‚ÇÉ ‚ü∂ A'‚ÇÖ‚ÇÉ} {g'‚ÇÑ‚ÇÑ : A'‚ÇÑ‚ÇÑ ‚ü∂ A'‚ÇÖ‚ÇÑ} {g'‚ÇÑ‚ÇÖ : A'‚ÇÑ‚ÇÖ ‚ü∂ A'‚ÇÖ‚ÇÖ}
-- variables {f'‚ÇÖ‚ÇÅ : A'‚ÇÖ‚ÇÅ ‚ü∂ A'‚ÇÖ‚ÇÇ} {f'‚ÇÖ‚ÇÇ : A'‚ÇÖ‚ÇÇ ‚ü∂ A'‚ÇÖ‚ÇÉ} {f'‚ÇÖ‚ÇÉ : A'‚ÇÖ‚ÇÉ ‚ü∂ A'‚ÇÖ‚ÇÑ} {f'‚ÇÖ‚ÇÑ : A'‚ÇÖ‚ÇÑ ‚ü∂ A'‚ÇÖ‚ÇÖ}


-- open opposite

-- lemma op_H_to_don (lbc : LBC f'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÇ f'‚ÇÇ‚ÇÅ f'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÉ f'‚ÇÉ‚ÇÇ) :
--   lbc.H_to_don = (homology_unop_iso _ _ _).hom ‚â´ lbc.unop.rcp_to_H.op ‚â´
--     (homology_unop_iso _ _ lbc.œÄ_diag_out).inv :=
-- begin
--   ext,
--   simp only [category.assoc, H_to_don, rcp_to_H,
--     homology_unop_iso_hom, homology_unop_iso_inv,
--     unop_sum‚ÇÇ, symm_sum‚ÇÅ, sum_str.unop_fst, sum_str.symm_inl, homology.map_Œπ,
--     homology.œÄ'_Œπ_assoc, cokernel.œÄ_desc,
--     homology_iso_cokernel_lift, homology_iso_kernel_desc,
--     homology_iso_cokernel_image_to_kernel',
--     cokernel_epi_comp_hom, cokernel_epi_comp_inv,
--     category_theory.limits.cokernel.map_desc_assoc,
--     cokernel_iso_of_eq_hom_comp_desc_assoc,
--     iso.trans_hom, iso.trans_inv, iso.symm_hom],
--   admit
-- end

-- lemma op_rcp_to_H (lbc : LBC f'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÇ f'‚ÇÇ‚ÇÅ f'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÉ f'‚ÇÉ‚ÇÇ) :
--   lbc.rcp_to_H = (homology_unop_iso _ _ lbc.diag_in_Œπ).hom ‚â´
--     lbc.unop.H_to_don.op ‚â´ (homology_unop_iso _ _ _).inv :=
-- begin
--   admit
-- end

-- lemma op_V_to_don (lbc : LBC f'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÇ f'‚ÇÇ‚ÇÅ f'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÉ f'‚ÇÉ‚ÇÇ) :
--   lbc.V_to_don = (homology_unop_iso _ _ _).hom ‚â´ lbc.unop.rcp_to_V.op ‚â´
--     (homology_unop_iso _ _ lbc.œÄ_diag_out).inv :=
-- lbc.symm.op_H_to_don

-- lemma op_rcp_to_V (lbc : LBC f'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÇ f'‚ÇÇ‚ÇÅ f'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÉ f'‚ÇÉ‚ÇÇ) :
--   lbc.rcp_to_V = (homology_unop_iso _ _ lbc.diag_in_Œπ).hom ‚â´
--     lbc.unop.V_to_don.op ‚â´ (homology_unop_iso _ _ _).inv :=
-- lbc.symm.op_rcp_to_H

-- lemma op_ex_h
--   (lbc‚ÇÅ : LBC f'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÇ f'‚ÇÇ‚ÇÅ f'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÉ f'‚ÇÉ‚ÇÇ)
--   (lbc‚ÇÇ : LBC f'‚ÇÅ‚ÇÇ g'‚ÇÅ‚ÇÇ g'‚ÇÅ‚ÇÉ f'‚ÇÇ‚ÇÇ f'‚ÇÇ‚ÇÉ g'‚ÇÇ‚ÇÉ g'‚ÇÇ‚ÇÑ f'‚ÇÉ‚ÇÉ) :
--   lbc‚ÇÅ.ex_h lbc‚ÇÇ = (homology_unop_iso _ _ lbc‚ÇÅ.œÄ_diag_out).hom ‚â´
--     (lbc‚ÇÇ.unop.ex_h lbc‚ÇÅ.unop).op ‚â´ (homology_unop_iso _ _ lbc‚ÇÇ.diag_in_Œπ).inv :=
-- admit

-- lemma op_ex_v
--   (lbc‚ÇÅ : LBC f'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÅ g'‚ÇÅ‚ÇÇ f'‚ÇÇ‚ÇÅ f'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÇ g'‚ÇÇ‚ÇÉ f'‚ÇÉ‚ÇÇ)
--   (lbc‚ÇÇ : LBC f'‚ÇÇ‚ÇÅ g'‚ÇÇ‚ÇÅ g'‚ÇÇ‚ÇÇ f'‚ÇÉ‚ÇÅ f'‚ÇÉ‚ÇÇ g'‚ÇÉ‚ÇÇ g'‚ÇÉ‚ÇÉ f'‚ÇÑ‚ÇÇ) :
--   lbc‚ÇÅ.ex_v lbc‚ÇÇ = (homology_unop_iso _ _ lbc‚ÇÅ.œÄ_diag_out).hom ‚â´
--     (lbc‚ÇÇ.unop.ex_v lbc‚ÇÅ.unop).op ‚â´ (homology_unop_iso _ _ lbc‚ÇÇ.diag_in_Œπ).inv  :=
-- by convert lbc‚ÇÅ.symm.op_ex_h lbc‚ÇÇ.symm using 1

-- end

-- lemma exact_aux_1
--   (lbc‚ÇÅ : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (lbc‚ÇÇ : LBC f‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÇ f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ g‚ÇÉ‚ÇÇ g‚ÇÉ‚ÇÉ f‚ÇÑ‚ÇÇ) :
--   exact (lbc‚ÇÅ.ex_v lbc‚ÇÇ ‚â´ lbc‚ÇÇ.rcp_to_H) lbc‚ÇÇ.H_to_don :=
-- begin
--   -- apply pseudoelement.exact_of_pseudo_exact,
--   -- split,
--   -- { suffices : lbc‚ÇÅ.ex_v lbc‚ÇÇ ‚â´ lbc‚ÇÇ.rcp_to_V = 0,
--   --   { intro x,
--   --     rw [‚Üê pseudoelement.comp_apply, category.assoc, rcp_to_H_comp_H_to_don,
--   --       ‚Üê category.assoc, this, zero_comp, pseudoelement.zero_apply] },
--   --   rw pseudoelement.eq_zero_iff,
--   --   intro x,
--   --   delta ex_v rcp_to_V,
--   --  },

--   -- refine preadditive.exact_of_iso_of_exact'
--   --   (cokernel.desc _ _ _) _ _ _
--   --   (homology_iso_cokernel_lift _ _ _).symm
--   --   (homology_iso_cokernel_lift _ _ _).symm
--   --   (homology_iso_cokernel_lift _ _ _).symm _ _ _,

--   -- rw abelian.exact_iff, split,
--   -- { suffices : lbc‚ÇÅ.ex_v lbc‚ÇÇ ‚â´ lbc‚ÇÇ.rcp_to_V = 0,
--   --   rw [category.assoc, rcp_to_H_comp_H_to_don, ‚Üê category.assoc, this, zero_comp],
--   --   delta ex_v rcp_to_V,
--   --   rw [homology.map_comp],
--   --   apply homology.ext,
--   --   rw [homology.œÄ_map, comp_zero],
--   --   dsimp [kernel_subobject_map, homology.œÄ],
--   --   simp only [category.comp_id],
--   --   admit },
--   admit
-- end

-- lemma exact_aux_2
--   (lbc‚ÇÅ : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (lbc‚ÇÇ : LBC f‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÉ f‚ÇÇ‚ÇÇ f‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÑ f‚ÇÉ‚ÇÉ) :
--   exact lbc‚ÇÅ.H_to_don (lbc‚ÇÅ.ex_h lbc‚ÇÇ) :=
-- begin
--   admit
-- end

-- lemma salamander_v
--   (lbc‚ÇÅ : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (lbc‚ÇÇ : LBC f‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÇ f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ g‚ÇÉ‚ÇÇ g‚ÇÉ‚ÇÉ f‚ÇÑ‚ÇÇ)
--   (lbc‚ÇÉ : LBC f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ f‚ÇÉ‚ÇÉ g‚ÇÉ‚ÇÉ g‚ÇÉ‚ÇÑ f‚ÇÑ‚ÇÉ)
--   (lbc‚ÇÑ : LBC f‚ÇÉ‚ÇÇ g‚ÇÉ‚ÇÇ g‚ÇÉ‚ÇÉ f‚ÇÑ‚ÇÇ f‚ÇÑ‚ÇÉ g‚ÇÑ‚ÇÉ g‚ÇÑ‚ÇÑ f‚ÇÖ‚ÇÉ) :
--   exact_seq ùìê [
--     lbc‚ÇÅ.ex_v lbc‚ÇÇ ‚â´ lbc‚ÇÇ.rcp_to_H,
--     lbc‚ÇÇ.H_to_don,
--     lbc‚ÇÇ.ex_h lbc‚ÇÉ,
--     lbc‚ÇÉ.rcp_to_H,
--     lbc‚ÇÉ.H_to_don ‚â´ lbc‚ÇÉ.ex_v lbc‚ÇÑ] :=
-- begin
--   refine (exact_aux_1 lbc‚ÇÅ lbc‚ÇÇ).cons _,
--   refine (exact_aux_2 lbc‚ÇÇ lbc‚ÇÉ).cons _,
--   have aux1 := (exact_aux_2 lbc‚ÇÉ.op lbc‚ÇÇ.op).unop,
--   simp only [op_H_to_don, op_ex_h, unop_comp, ‚Üê iso.unop_hom, ‚Üê iso.unop_inv,
--     exact_comp_iso, exact_iso_comp, exact_comp_hom_inv_comp_iff, quiver.hom.unop_op] at aux1,
--   refine aux1.cons _,
--   have aux2 := (exact_aux_1 lbc‚ÇÑ.op lbc‚ÇÉ.op).unop,
--   simp only [op_H_to_don, op_ex_v, op_rcp_to_H, category.assoc, iso.inv_hom_id_assoc,
--     unop_comp, ‚Üê iso.unop_hom, ‚Üê iso.unop_inv, quiver.hom.unop_op,
--     exact_iso_comp, exact_comp_hom_inv_comp_iff] at aux2,
--   simp only [‚Üê category.assoc, exact_comp_iso] at aux2,
--   exact aux2.exact_seq,
-- end

-- lemma salamander_h
--   (lbc‚ÇÅ : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (lbc‚ÇÇ : LBC f‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÉ f‚ÇÇ‚ÇÇ f‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÑ f‚ÇÉ‚ÇÉ)
--   (lbc‚ÇÉ : LBC f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ f‚ÇÉ‚ÇÉ g‚ÇÉ‚ÇÉ g‚ÇÉ‚ÇÑ f‚ÇÑ‚ÇÉ)
--   (lbc‚ÇÑ : LBC f‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÑ f‚ÇÉ‚ÇÉ f‚ÇÉ‚ÇÑ g‚ÇÉ‚ÇÑ g‚ÇÉ‚ÇÖ f‚ÇÑ‚ÇÑ) :
--   exact_seq ùìê [
--     lbc‚ÇÅ.ex_h lbc‚ÇÇ ‚â´ lbc‚ÇÇ.rcp_to_V,
--     lbc‚ÇÇ.V_to_don,
--     lbc‚ÇÇ.ex_v lbc‚ÇÉ,
--     lbc‚ÇÉ.rcp_to_V,
--     lbc‚ÇÉ.V_to_don ‚â´ lbc‚ÇÉ.ex_h lbc‚ÇÑ] :=
-- by convert salamander_v lbc‚ÇÅ.symm lbc‚ÇÇ.symm lbc‚ÇÉ.symm lbc‚ÇÑ.symm using 1

-- open_locale zero_object

-- section
-- /-!
-- ## Extramural isomorphisms
-- -/

-- lemma iso_ex_h
--   (lbc‚ÇÅ : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (lbc‚ÇÇ : LBC f‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÉ f‚ÇÇ‚ÇÇ f‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÑ f‚ÇÉ‚ÇÉ)
--   (h‚ÇÅ : f‚ÇÅ‚ÇÅ ‚â´ f‚ÇÅ‚ÇÇ = 0) (h‚ÇÇ : f‚ÇÉ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÉ = 0)
--   (H‚ÇÅ : is_zero lbc‚ÇÅ.H) (H‚ÇÇ : is_zero lbc‚ÇÇ.H) :
--   is_iso (lbc‚ÇÅ.ex_h lbc‚ÇÇ) :=
-- begin
--   have := (salamander_v _ lbc‚ÇÅ lbc‚ÇÇ _).drop 1, any_goals { exact 0 },
--   rotate,
--   { exact LBC.of_core ‚ü®h‚ÇÅ, zero_comp, zero_comp.trans zero_comp.symm, lbc‚ÇÇ.sq‚ÇÅ‚ü©, },
--   { exact LBC.of_core ‚ü®h‚ÇÇ, comp_zero, lbc‚ÇÅ.sq‚ÇÇ, comp_zero.trans comp_zero.symm‚ü©, },
--   exact this.is_iso_of_zero_of_zero (H‚ÇÅ.eq_of_src _ _) (H‚ÇÇ.eq_of_tgt _ _),
-- end

-- lemma iso_ex_v
--   (lbc‚ÇÅ : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (lbc‚ÇÇ : LBC f‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÇ f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ g‚ÇÉ‚ÇÇ g‚ÇÉ‚ÇÉ f‚ÇÑ‚ÇÇ)
--   (h‚ÇÅ : g‚ÇÅ‚ÇÅ ‚â´ g‚ÇÇ‚ÇÅ = 0) (h‚ÇÇ : g‚ÇÇ‚ÇÉ ‚â´ g‚ÇÉ‚ÇÉ = 0)
--   (H‚ÇÅ : is_zero lbc‚ÇÅ.V) (H‚ÇÇ : is_zero lbc‚ÇÇ.V) :
--   is_iso (lbc‚ÇÅ.ex_v lbc‚ÇÇ) :=
-- by convert lbc‚ÇÅ.symm.iso_ex_h lbc‚ÇÇ.symm h‚ÇÅ h‚ÇÇ H‚ÇÅ H‚ÇÇ using 1

-- end

-- section intramural_isos

-- /-!
-- ## Intramural isomorphisms

-- The subscripts at the end of the names indicate where the `0`s in the diagram are located:
-- `‚Çó` = left, `·µ§` = up, `·µ£` = right, and `‚Çõ` down (south, thanks unicode).

-- -/

-- lemma iso_rcp_to_H‚Çó
--   (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (H‚ÇÇ‚ÇÅ : is_zero A‚ÇÇ‚ÇÅ) (H‚ÇÉ‚ÇÅ : is_zero A‚ÇÉ‚ÇÅ) (h : exact f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ) :
--   is_iso lbc.rcp_to_H :=
-- begin
--   have lbc‚ÇÑ : LBC f‚ÇÇ‚ÇÅ 0 g‚ÇÇ‚ÇÇ f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ 0 (0 : _ ‚ü∂ 0) (0 : 0 ‚ü∂ 0) :=
--   LBC.of_core ‚ü®H‚ÇÉ‚ÇÅ.eq_of_src _ _, comp_zero, H‚ÇÇ‚ÇÅ.eq_of_src _ _, comp_zero.trans comp_zero.symm‚ü©,
--   have lbc‚ÇÉ : LBC 0 0 0 0 f‚ÇÉ‚ÇÅ 0 0 0 :=
--   LBC.of_core ‚ü®zero_comp, comp_zero, zero_comp.trans zero_comp.symm, comp_zero.trans comp_zero.symm‚ü©,
--   haveI aux := iso_ex_h lbc‚ÇÉ lbc‚ÇÑ zero_comp zero_comp _ _, any_goals { exact 0 },
--   rotate,
--   { apply H‚ÇÉ‚ÇÅ.homology_is_zero, },
--   { exact exact.homology_is_zero _ _ h, },
--   have := (salamander_v _ _ lbc lbc‚ÇÑ).drop 2, any_goals { exact 0 },
--   rotate,
--   { exact LBC.of_core ‚ü®zero_comp, zero_comp, zero_comp.trans zero_comp.symm, lbc.sq‚ÇÅ‚ü©, },
--   { exact LBC.of_core ‚ü®zero_comp, comp_zero, zero_comp.trans zero_comp.symm, H‚ÇÇ‚ÇÅ.eq_of_src _ _‚ü©, },
--   refine this.is_iso_of_zero_of_zero _ _,
--   { refine is_zero.eq_of_src _ _ _, apply H‚ÇÇ‚ÇÅ.homology_is_zero },
--   { refine is_zero.eq_of_tgt _ _ _,
--     apply is_zero_of_iso_of_zero _ (as_iso (lbc‚ÇÉ.ex_h lbc‚ÇÑ)),
--     apply H‚ÇÉ‚ÇÅ.homology_is_zero, },
-- end

-- lemma iso_V_to_don‚Çó
--   (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (H‚ÇÇ‚ÇÅ : is_zero A‚ÇÇ‚ÇÅ) (H‚ÇÉ‚ÇÅ : is_zero A‚ÇÉ‚ÇÅ) (h : exact f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ) :
--   is_iso lbc.V_to_don :=
-- begin
--   have lbc‚ÇÑ : LBC f‚ÇÇ‚ÇÅ 0 g‚ÇÇ‚ÇÇ f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ 0 (0 : _ ‚ü∂ 0) (0 : 0 ‚ü∂ 0) :=
--   LBC.of_core ‚ü®H‚ÇÉ‚ÇÅ.eq_of_src _ _, comp_zero, H‚ÇÇ‚ÇÅ.eq_of_src _ _, comp_zero.trans comp_zero.symm‚ü©,
--   have lbc‚ÇÉ : LBC 0 0 0 0 f‚ÇÉ‚ÇÅ 0 0 0 :=
--   LBC.of_core ‚ü®zero_comp, comp_zero, zero_comp.trans zero_comp.symm, comp_zero.trans comp_zero.symm‚ü©,
--   haveI aux := iso_ex_h lbc‚ÇÉ lbc‚ÇÑ zero_comp zero_comp _ _, any_goals { exact 0 },
--   rotate,
--   { apply H‚ÇÉ‚ÇÅ.homology_is_zero, },
--   { exact exact.homology_is_zero _ _ h, },
--   have := salamander_h _ lbc lbc‚ÇÑ _, any_goals { exact 0 },
--   rotate,
--   { exact LBC.of_core ‚ü®zero_comp, comp_zero, zero_comp.trans zero_comp.symm, H‚ÇÇ‚ÇÅ.eq_of_src _ _‚ü©, },
--   { exact LBC.of_core ‚ü®comp_zero, comp_zero, lbc.sq‚ÇÇ, comp_zero.trans comp_zero.symm‚ü©, },
--   refine this.is_iso_of_zero_of_zero _ _,
--   { refine is_zero.eq_of_src _ _ _, apply H‚ÇÇ‚ÇÅ.homology_is_zero },
--   { refine is_zero.eq_of_tgt _ _ _,
--     apply is_zero_of_iso_of_zero _ (as_iso (lbc‚ÇÉ.ex_h lbc‚ÇÑ)),
--     apply H‚ÇÉ‚ÇÅ.homology_is_zero, },
-- end

-- lemma iso_rcp_to_V·µ§
--   (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (H‚ÇÅ‚ÇÇ : is_zero A‚ÇÅ‚ÇÇ) (H‚ÇÅ‚ÇÉ : is_zero A‚ÇÅ‚ÇÉ) (h : exact g‚ÇÅ‚ÇÉ g‚ÇÇ‚ÇÉ) :
--   is_iso lbc.rcp_to_V :=
-- lbc.symm.iso_rcp_to_H‚Çó H‚ÇÅ‚ÇÇ H‚ÇÅ‚ÇÉ h

-- lemma iso_H_to_don·µ§
--   (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (H‚ÇÅ‚ÇÇ : is_zero A‚ÇÅ‚ÇÇ) (H‚ÇÅ‚ÇÉ : is_zero A‚ÇÅ‚ÇÉ) (h : exact g‚ÇÅ‚ÇÉ g‚ÇÇ‚ÇÉ) :
--   is_iso lbc.H_to_don :=
-- lbc.symm.iso_V_to_don‚Çó H‚ÇÅ‚ÇÇ H‚ÇÅ‚ÇÉ h

-- lemma iso_H_to_don·µ£
--   (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (H‚ÇÅ‚ÇÇ : is_zero A‚ÇÇ‚ÇÉ) (H‚ÇÅ‚ÇÉ : is_zero A‚ÇÅ‚ÇÉ) (h : exact f‚ÇÅ‚ÇÅ f‚ÇÅ‚ÇÇ) :
--   is_iso lbc.H_to_don :=
-- begin
--   have aux := iso_rcp_to_H‚Çó lbc.op H‚ÇÅ‚ÇÇ.op H‚ÇÅ‚ÇÉ.op h.op,
--   simp only [op_rcp_to_H] at aux,
--   replace aux := @is_iso.of_is_iso_comp_left _ _ _ _ _ _ _ _ aux,
--   replace aux := @is_iso.of_is_iso_comp_right _ _ _ _ _ _ _ _ aux,
--   rwa is_iso_op_iff at aux,
-- end

-- lemma iso_rcp_to_V·µ£
--   (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (H‚ÇÅ‚ÇÇ : is_zero A‚ÇÇ‚ÇÉ) (H‚ÇÅ‚ÇÉ : is_zero A‚ÇÅ‚ÇÉ) (h : exact f‚ÇÅ‚ÇÅ f‚ÇÅ‚ÇÇ) :
--   is_iso lbc.rcp_to_V :=
-- begin
--   have aux := iso_V_to_don‚Çó lbc.op H‚ÇÅ‚ÇÇ.op H‚ÇÅ‚ÇÉ.op h.op,
--   simp only [op_V_to_don] at aux,
--   replace aux := @is_iso.of_is_iso_comp_left _ _ _ _ _ _ _ _ aux,
--   replace aux := @is_iso.of_is_iso_comp_right _ _ _ _ _ _ _ _ aux,
--   rwa is_iso_op_iff at aux,
-- end

-- lemma iso_rcp_to_H‚Çõ
--   (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (H‚ÇÉ‚ÇÅ : is_zero A‚ÇÉ‚ÇÅ) (H‚ÇÉ‚ÇÇ : is_zero A‚ÇÉ‚ÇÇ) (h : exact g‚ÇÅ‚ÇÅ g‚ÇÇ‚ÇÅ) :
--   is_iso lbc.rcp_to_H :=
-- lbc.symm.iso_rcp_to_V·µ£ H‚ÇÉ‚ÇÇ H‚ÇÉ‚ÇÅ h


-- lemma iso_V_to_don‚Çõ
--   (lbc : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ)
--   (H‚ÇÉ‚ÇÅ : is_zero A‚ÇÉ‚ÇÅ) (H‚ÇÉ‚ÇÇ : is_zero A‚ÇÉ‚ÇÇ) (h : exact g‚ÇÅ‚ÇÅ g‚ÇÇ‚ÇÅ) :
--   is_iso lbc.V_to_don :=
-- lbc.symm.iso_H_to_don·µ£ H‚ÇÉ‚ÇÇ H‚ÇÉ‚ÇÅ h

-- end intramural_isos

-- section three_x_three

-- /-!
-- ## The 3√ó3 lemma
-- -/

-- -- move me
-- theorem _root_.list.tfae.mp {l} (h : tfae l) (n‚ÇÅ n‚ÇÇ) {a b}
--   (h‚ÇÅ : list.nth l n‚ÇÅ = some a . tactic.interactive.refl)
--   (h‚ÇÇ : list.nth l n‚ÇÇ = some b . tactic.interactive.refl) :
--   a ‚Üí b :=
-- (h.out n‚ÇÅ n‚ÇÇ h‚ÇÅ h‚ÇÇ).mp

-- lemma three_x_three_top_row
--   (Hr2 : exact f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ) (Hr3 : exact f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ)
--   (Hc1 : exact g‚ÇÅ‚ÇÅ g‚ÇÇ‚ÇÅ) (Hc2 : exact g‚ÇÅ‚ÇÇ g‚ÇÇ‚ÇÇ) (Hc3 : exact g‚ÇÅ‚ÇÉ g‚ÇÇ‚ÇÉ)
--   (sq‚ÇÅ‚ÇÅ : f‚ÇÅ‚ÇÅ ‚â´ g‚ÇÅ‚ÇÇ = g‚ÇÅ‚ÇÅ ‚â´ f‚ÇÇ‚ÇÅ) (sq‚ÇÅ‚ÇÇ : f‚ÇÅ‚ÇÇ ‚â´ g‚ÇÅ‚ÇÉ = g‚ÇÅ‚ÇÇ ‚â´ f‚ÇÇ‚ÇÇ)
--   (sq‚ÇÇ‚ÇÅ : f‚ÇÇ‚ÇÅ ‚â´ g‚ÇÇ‚ÇÇ = g‚ÇÇ‚ÇÅ ‚â´ f‚ÇÉ‚ÇÅ) (sq‚ÇÇ‚ÇÇ : f‚ÇÇ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ = g‚ÇÇ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÇ)
--   [mono f‚ÇÇ‚ÇÅ] [mono f‚ÇÉ‚ÇÅ] [mono g‚ÇÅ‚ÇÅ] [mono g‚ÇÅ‚ÇÇ] [mono g‚ÇÅ‚ÇÉ] :
--   exact f‚ÇÅ‚ÇÅ f‚ÇÅ‚ÇÇ ‚àß mono f‚ÇÅ‚ÇÅ :=
-- begin
--   have w : f‚ÇÅ‚ÇÅ ‚â´ f‚ÇÅ‚ÇÇ = 0,
--   { rw [‚Üê cancel_mono g‚ÇÅ‚ÇÉ, zero_comp, category.assoc, sq‚ÇÅ‚ÇÇ, reassoc_of sq‚ÇÅ‚ÇÅ, Hr2.w, comp_zero], },
--   let lbc‚ÇÅ‚ÇÅ : LBC (0 : 0 ‚ü∂ 0) (0 : 0 ‚ü∂ 0) 0 0 f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ :=
--     LBC.of_core ‚ü®zero_comp, zero_comp, (is_zero_zero _).eq_of_src _ _, sq‚ÇÅ‚ÇÅ‚ü©,
--   let lbc‚ÇÅ‚ÇÇ : LBC (0 : 0 ‚ü∂ 0) 0 0 f‚ÇÅ‚ÇÅ f‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÉ f‚ÇÇ‚ÇÇ :=
--     LBC.of_core ‚ü®w, zero_comp, (is_zero_zero _).eq_of_src _ _, sq‚ÇÅ‚ÇÇ‚ü©,
--   let lbc‚ÇÇ‚ÇÅ : LBC 0 (0 : 0 ‚ü∂ 0) g‚ÇÅ‚ÇÅ 0 f‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÇ f‚ÇÉ‚ÇÅ :=
--     LBC.of_core ‚ü®zero_comp, Hc1.w, (is_zero_zero _).eq_of_src _ _, sq‚ÇÇ‚ÇÅ‚ü©,
--   let lbc‚ÇÇ‚ÇÇ : LBC f‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÅ g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ :=
--     LBC.of_core ‚ü®Hr2.w, Hc2.w, sq‚ÇÅ‚ÇÅ, sq‚ÇÇ‚ÇÇ‚ü©,
--   suffices : is_zero lbc‚ÇÅ‚ÇÅ.H ‚àß is_zero lbc‚ÇÅ‚ÇÇ.H,
--   { refine ‚ü®exact_of_homology_is_zero this.2, _‚ü©,
--     apply (tfae_mono (0:ùìê) f‚ÇÅ‚ÇÅ).mp 2 0,
--     exact exact_of_homology_is_zero this.1, },
--   split,
--   { haveI e1 := lbc‚ÇÅ‚ÇÅ.iso_rcp_to_H‚Çó (is_zero_zero _) (is_zero_zero _)
--       ((tfae_mono (0:ùìê) f‚ÇÇ‚ÇÅ).mp 0 2 rfl rfl infer_instance),
--     haveI e2 := lbc‚ÇÅ‚ÇÅ.iso_rcp_to_V·µ§ (is_zero_zero _) (is_zero_zero _)
--       ((tfae_mono (0:ùìê) g‚ÇÅ‚ÇÇ).mp 0 2 rfl rfl infer_instance),
--     refine is_zero_of_iso_of_zero _
--       (as_iso $ inv lbc‚ÇÅ‚ÇÅ.rcp_to_V ‚â´ lbc‚ÇÅ‚ÇÅ.rcp_to_H),
--     refine exact.homology_is_zero _ _ _,
--     apply exact_zero_left_of_mono },
--   { haveI e1 := lbc‚ÇÅ‚ÇÇ.iso_H_to_don·µ§ (is_zero_zero _) (is_zero_zero _)
--       ((tfae_mono (0:ùìê) g‚ÇÅ‚ÇÉ).mp 0 2 rfl rfl infer_instance),
--     haveI e2 := lbc‚ÇÅ‚ÇÇ.iso_ex_v lbc‚ÇÇ‚ÇÇ zero_comp Hc3.w
--       (exact.homology_is_zero _ _ _) (Hc2.homology_is_zero _ _),
--     swap, { apply exact_zero_left_of_mono },
--     haveI e3 := lbc‚ÇÇ‚ÇÅ.iso_ex_h lbc‚ÇÇ‚ÇÇ zero_comp Hr3.w
--       (exact.homology_is_zero _ _ _) (Hr2.homology_is_zero _ _),
--     swap, { apply exact_zero_left_of_mono },
--     haveI e4 := lbc‚ÇÇ‚ÇÅ.iso_V_to_don‚Çó (is_zero_zero _) (is_zero_zero _)
--       ((tfae_mono (0:ùìê) f‚ÇÉ‚ÇÅ).mp 0 2 rfl rfl infer_instance),
--     have aux : is_zero lbc‚ÇÇ‚ÇÅ.V := Hc1.homology_is_zero _ _,
--     apply is_zero_of_iso_of_zero aux,
--     exact as_iso
--       (lbc‚ÇÇ‚ÇÅ.V_to_don ‚â´ lbc‚ÇÇ‚ÇÅ.ex_h lbc‚ÇÇ‚ÇÇ ‚â´ inv (lbc‚ÇÅ‚ÇÇ.ex_v lbc‚ÇÇ‚ÇÇ) ‚â´ inv lbc‚ÇÅ‚ÇÇ.H_to_don) }
-- end

-- lemma three_x_three_left_col
--   (Hr1 : exact f‚ÇÅ‚ÇÅ f‚ÇÅ‚ÇÇ) (Hr2 : exact f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ) (Hr3 : exact f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ)
--   (Hc2 : exact g‚ÇÅ‚ÇÇ g‚ÇÇ‚ÇÇ) (Hc3 : exact g‚ÇÅ‚ÇÉ g‚ÇÇ‚ÇÉ)
--   (sq‚ÇÅ‚ÇÅ : f‚ÇÅ‚ÇÅ ‚â´ g‚ÇÅ‚ÇÇ = g‚ÇÅ‚ÇÅ ‚â´ f‚ÇÇ‚ÇÅ) (sq‚ÇÅ‚ÇÇ : f‚ÇÅ‚ÇÇ ‚â´ g‚ÇÅ‚ÇÉ = g‚ÇÅ‚ÇÇ ‚â´ f‚ÇÇ‚ÇÇ)
--   (sq‚ÇÇ‚ÇÅ : f‚ÇÇ‚ÇÅ ‚â´ g‚ÇÇ‚ÇÇ = g‚ÇÇ‚ÇÅ ‚â´ f‚ÇÉ‚ÇÅ) (sq‚ÇÇ‚ÇÇ : f‚ÇÇ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ = g‚ÇÇ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÇ)
--   [mono f‚ÇÅ‚ÇÅ] [mono f‚ÇÇ‚ÇÅ] [mono f‚ÇÉ‚ÇÅ] [mono g‚ÇÅ‚ÇÇ] [mono g‚ÇÅ‚ÇÉ] :
--   exact g‚ÇÅ‚ÇÅ g‚ÇÇ‚ÇÅ ‚àß mono g‚ÇÅ‚ÇÅ :=
-- three_x_three_top_row Hc2 Hc3 Hr1 Hr2 Hr3 sq‚ÇÅ‚ÇÅ.symm sq‚ÇÇ‚ÇÅ.symm sq‚ÇÅ‚ÇÇ.symm sq‚ÇÇ‚ÇÇ.symm

-- lemma three_x_three_bot_row
--   (Hr1 : exact f‚ÇÅ‚ÇÅ f‚ÇÅ‚ÇÇ) (Hr2 : exact f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ)
--   (Hc1 : exact g‚ÇÅ‚ÇÅ g‚ÇÇ‚ÇÅ) (Hc2 : exact g‚ÇÅ‚ÇÇ g‚ÇÇ‚ÇÇ) (Hc3 : exact g‚ÇÅ‚ÇÉ g‚ÇÇ‚ÇÉ)
--   (sq‚ÇÅ‚ÇÅ : f‚ÇÅ‚ÇÅ ‚â´ g‚ÇÅ‚ÇÇ = g‚ÇÅ‚ÇÅ ‚â´ f‚ÇÇ‚ÇÅ) (sq‚ÇÅ‚ÇÇ : f‚ÇÅ‚ÇÇ ‚â´ g‚ÇÅ‚ÇÉ = g‚ÇÅ‚ÇÇ ‚â´ f‚ÇÇ‚ÇÇ)
--   (sq‚ÇÇ‚ÇÅ : f‚ÇÇ‚ÇÅ ‚â´ g‚ÇÇ‚ÇÇ = g‚ÇÇ‚ÇÅ ‚â´ f‚ÇÉ‚ÇÅ) (sq‚ÇÇ‚ÇÇ : f‚ÇÇ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ = g‚ÇÇ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÇ)
--   [epi f‚ÇÅ‚ÇÇ] [epi f‚ÇÇ‚ÇÇ] [epi g‚ÇÇ‚ÇÅ] [epi g‚ÇÇ‚ÇÇ] [epi g‚ÇÇ‚ÇÉ] :
--   exact f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ ‚àß epi f‚ÇÉ‚ÇÇ :=
-- begin
--   have : exact f‚ÇÉ‚ÇÇ.op f‚ÇÉ‚ÇÅ.op ‚àß mono f‚ÇÉ‚ÇÇ.op :=
--     three_x_three_top_row Hr2.op Hr1.op Hc3.op Hc2.op Hc1.op _ _ _ _,
--   { refine ‚ü®this.1.unop, _‚ü©, haveI := this.2, exact category_theory.unop_epi_of_mono f‚ÇÉ‚ÇÇ.op },
--   all_goals { simp only [‚Üê op_comp, sq‚ÇÅ‚ÇÅ, sq‚ÇÅ‚ÇÇ, sq‚ÇÇ‚ÇÅ, sq‚ÇÇ‚ÇÇ] },
-- end

-- lemma three_x_three_right_col
--   (Hr1 : exact f‚ÇÅ‚ÇÅ f‚ÇÅ‚ÇÇ) (Hr2 : exact f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ) (Hr3 : exact f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ)
--   (Hc1 : exact g‚ÇÅ‚ÇÅ g‚ÇÇ‚ÇÅ) (Hc2 : exact g‚ÇÅ‚ÇÇ g‚ÇÇ‚ÇÇ)
--   (sq‚ÇÅ‚ÇÅ : f‚ÇÅ‚ÇÅ ‚â´ g‚ÇÅ‚ÇÇ = g‚ÇÅ‚ÇÅ ‚â´ f‚ÇÇ‚ÇÅ) (sq‚ÇÅ‚ÇÇ : f‚ÇÅ‚ÇÇ ‚â´ g‚ÇÅ‚ÇÉ = g‚ÇÅ‚ÇÇ ‚â´ f‚ÇÇ‚ÇÇ)
--   (sq‚ÇÇ‚ÇÅ : f‚ÇÇ‚ÇÅ ‚â´ g‚ÇÇ‚ÇÇ = g‚ÇÇ‚ÇÅ ‚â´ f‚ÇÉ‚ÇÅ) (sq‚ÇÇ‚ÇÇ : f‚ÇÇ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ = g‚ÇÇ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÇ)
--   [epi f‚ÇÅ‚ÇÇ] [epi f‚ÇÇ‚ÇÇ] [epi f‚ÇÉ‚ÇÇ] [epi g‚ÇÇ‚ÇÅ] [epi g‚ÇÇ‚ÇÇ] :
--   exact g‚ÇÅ‚ÇÉ g‚ÇÇ‚ÇÉ ‚àß epi g‚ÇÇ‚ÇÉ :=
-- three_x_three_bot_row Hc1 Hc2 Hr1 Hr2 Hr3 sq‚ÇÅ‚ÇÅ.symm sq‚ÇÇ‚ÇÅ.symm sq‚ÇÅ‚ÇÇ.symm sq‚ÇÇ‚ÇÇ.symm

-- end three_x_three

-- section four

-- /-!
-- ## The four lemma

-- We prove a version of the four lemma that is slightly more general than the usual version.
-- -/

-- lemma four_lemma_top_epi
--   (Hr1 : exact_seq ùìê [f‚ÇÇ‚ÇÅ, f‚ÇÇ‚ÇÇ, f‚ÇÇ‚ÇÉ]) (Hr2 : exact_seq ùìê [f‚ÇÉ‚ÇÅ, f‚ÇÉ‚ÇÇ, f‚ÇÉ‚ÇÉ])
--   (Hc1 : exact g‚ÇÅ‚ÇÇ g‚ÇÇ‚ÇÇ) (Hc2 : exact g‚ÇÅ‚ÇÉ g‚ÇÇ‚ÇÉ)
--   (sq‚ÇÅ‚ÇÇ : f‚ÇÅ‚ÇÇ ‚â´ g‚ÇÅ‚ÇÉ = g‚ÇÅ‚ÇÇ ‚â´ f‚ÇÇ‚ÇÇ)
--   (sq‚ÇÇ‚ÇÅ : f‚ÇÇ‚ÇÅ ‚â´ g‚ÇÇ‚ÇÇ = g‚ÇÇ‚ÇÅ ‚â´ f‚ÇÉ‚ÇÅ) (sq‚ÇÇ‚ÇÇ : f‚ÇÇ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ = g‚ÇÇ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÇ)
--   (sq‚ÇÇ‚ÇÉ : f‚ÇÇ‚ÇÉ ‚â´ g‚ÇÇ‚ÇÑ = g‚ÇÇ‚ÇÉ ‚â´ f‚ÇÉ‚ÇÉ)
--   [mono g‚ÇÅ‚ÇÉ] [epi g‚ÇÇ‚ÇÅ] [mono g‚ÇÇ‚ÇÑ] :
--   epi f‚ÇÅ‚ÇÇ :=
-- begin
--   rw epi_iff_exact_zero_right,
--   let lbc‚ÇÅ‚ÇÉ : LBC (0 : 0 ‚ü∂ 0) 0 0 f‚ÇÅ‚ÇÇ (0 : _ ‚ü∂ 0) g‚ÇÅ‚ÇÉ 0 f‚ÇÇ‚ÇÉ :=
--     LBC.of_core ‚ü®comp_zero, zero_comp, (is_zero_zero _).eq_of_src _ _, _‚ü©,
--   swap, { simp only [‚Üê cancel_mono g‚ÇÇ‚ÇÑ, zero_comp, category.assoc, sq‚ÇÇ‚ÇÉ, reassoc_of Hc2.w], },
--   let lbc‚ÇÇ‚ÇÇ : LBC (0 : 0 ‚ü∂ _) 0 g‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÇ g‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÇ :=
--     LBC.of_core ‚ü®Hr1.pair.w, Hc1.w, (is_zero_zero _).eq_of_src _ _, sq‚ÇÇ‚ÇÇ‚ü©,
--   let lbc‚ÇÇ‚ÇÉ : LBC f‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÇ g‚ÇÅ‚ÇÉ f‚ÇÇ‚ÇÇ f‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÉ g‚ÇÇ‚ÇÑ f‚ÇÉ‚ÇÉ :=
--     LBC.of_core ‚ü®(Hr1.drop 1).pair.w, Hc2.w, sq‚ÇÅ‚ÇÇ, sq‚ÇÇ‚ÇÉ‚ü©,
--   let lbc‚ÇÉ‚ÇÅ : LBC 0 (0 : 0 ‚ü∂ _) g‚ÇÇ‚ÇÅ (kernel.Œπ f‚ÇÉ‚ÇÅ) f‚ÇÉ‚ÇÅ 0 (cokernel.œÄ g‚ÇÇ‚ÇÇ) (0 : 0 ‚ü∂ _) :=
--     LBC.of_core ‚ü®kernel.condition _, comp_zero, (is_zero_zero _).eq_of_src _ _, _‚ü©,
--   swap, { simp only [‚Üê cancel_epi g‚ÇÇ‚ÇÅ, comp_zero, ‚Üê reassoc_of sq‚ÇÇ‚ÇÅ, cokernel.condition] },
--   let lbc‚ÇÉ‚ÇÇ : LBC f‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÅ g‚ÇÇ‚ÇÇ f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ (cokernel.œÄ g‚ÇÇ‚ÇÇ) 0 (0 : _ ‚ü∂ 0) :=
--     LBC.of_core ‚ü®Hr2.pair.w, cokernel.condition _, sq‚ÇÇ‚ÇÅ, (is_zero_zero _).eq_of_tgt _ _‚ü©,
--   let lbc‚ÇÑ‚ÇÅ : LBC (kernel.Œπ f‚ÇÉ‚ÇÅ) 0 0 (0 : 0 ‚ü∂ 0) (0 : 0 ‚ü∂ cokernel g‚ÇÇ‚ÇÇ) 0 0 (0 : 0 ‚ü∂ 0) :=
--     LBC.of_core ‚ü®comp_zero, comp_zero,
--       (is_zero_zero _).eq_of_tgt _ _, (is_zero_zero _).eq_of_src _ _‚ü©,
--   have e1 := lbc‚ÇÅ‚ÇÉ.iso_H_to_don·µ§ (is_zero_zero _) (is_zero_zero _) (exact_of_zero 0 0),
--   have e2 := lbc‚ÇÅ‚ÇÉ.iso_ex_v lbc‚ÇÇ‚ÇÉ zero_comp zero_comp
--     (exact.homology_is_zero _ _ $ exact_zero_left_of_mono _) (Hc2.homology_is_zero _ _),
--   have e3 := lbc‚ÇÇ‚ÇÇ.iso_ex_h lbc‚ÇÇ‚ÇÉ zero_comp (Hr2.drop 1).pair.w
--     (Hr1.pair.homology_is_zero _ _) ((Hr1.drop 1).pair.homology_is_zero _ _),
--   have e3 := lbc‚ÇÇ‚ÇÇ.iso_ex_v lbc‚ÇÉ‚ÇÇ zero_comp comp_zero
--     (Hc1.homology_is_zero _ _) ((abelian.exact_cokernel _).homology_is_zero _ _),
--   have e4 := lbc‚ÇÉ‚ÇÅ.iso_ex_h lbc‚ÇÉ‚ÇÇ zero_comp zero_comp
--     (exact_kernel_Œπ.homology_is_zero _ _) (Hr2.pair.homology_is_zero _ _),
--   have e5 := lbc‚ÇÉ‚ÇÅ.iso_ex_v lbc‚ÇÑ‚ÇÅ comp_zero comp_zero
--     (exact.homology_is_zero _ _ _) ((is_zero_zero _).homology_is_zero _ _ _),
--   swap, { rwa ‚Üê epi_iff_exact_zero_right, },
--   have aux : is_zero lbc‚ÇÑ‚ÇÅ.rcp := (is_zero_zero _).homology_is_zero _ _ _,
--   suffices : is_zero lbc‚ÇÅ‚ÇÉ.H, { exact exact_of_homology_is_zero this },
--   refine is_zero_of_iso_of_zero aux _,
--   resetI,
--   exact as_iso (inv (lbc‚ÇÉ‚ÇÅ.ex_v lbc‚ÇÑ‚ÇÅ) ‚â´ lbc‚ÇÉ‚ÇÅ.ex_h lbc‚ÇÉ‚ÇÇ ‚â´ inv (lbc‚ÇÇ‚ÇÇ.ex_v lbc‚ÇÉ‚ÇÇ) ‚â´
--     lbc‚ÇÇ‚ÇÇ.ex_h lbc‚ÇÇ‚ÇÉ ‚â´ inv (lbc‚ÇÅ‚ÇÉ.ex_v lbc‚ÇÇ‚ÇÉ) ‚â´ inv lbc‚ÇÅ‚ÇÉ.H_to_don),
-- end

-- -- move me
-- lemma sq_op (sq : f‚ÇÅ‚ÇÅ ‚â´ g‚ÇÅ‚ÇÇ = g‚ÇÅ‚ÇÅ ‚â´ f‚ÇÇ‚ÇÅ) :
--   f‚ÇÇ‚ÇÅ.op ‚â´ g‚ÇÅ‚ÇÅ.op = g‚ÇÅ‚ÇÇ.op ‚â´ f‚ÇÅ‚ÇÅ.op :=
-- by simp only [‚Üê op_comp, sq]

-- lemma four_lemma_bot_mono
--   (Hr1 : exact_seq ùìê [f‚ÇÇ‚ÇÅ, f‚ÇÇ‚ÇÇ, f‚ÇÇ‚ÇÉ]) (Hr2 : exact_seq ùìê [f‚ÇÉ‚ÇÅ, f‚ÇÉ‚ÇÇ, f‚ÇÉ‚ÇÉ])
--   (Hc1 : exact g‚ÇÇ‚ÇÇ g‚ÇÉ‚ÇÇ) (Hc2 : exact g‚ÇÇ‚ÇÉ g‚ÇÉ‚ÇÉ)
--   (sq‚ÇÇ‚ÇÅ : f‚ÇÇ‚ÇÅ ‚â´ g‚ÇÇ‚ÇÇ = g‚ÇÇ‚ÇÅ ‚â´ f‚ÇÉ‚ÇÅ) (sq‚ÇÇ‚ÇÇ : f‚ÇÇ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ = g‚ÇÇ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÇ)
--   (sq‚ÇÇ‚ÇÉ : f‚ÇÇ‚ÇÉ ‚â´ g‚ÇÇ‚ÇÑ = g‚ÇÇ‚ÇÉ ‚â´ f‚ÇÉ‚ÇÉ) (sq‚ÇÉ‚ÇÇ : f‚ÇÉ‚ÇÇ ‚â´ g‚ÇÉ‚ÇÉ = g‚ÇÉ‚ÇÇ ‚â´ f‚ÇÑ‚ÇÇ)
--   [epi g‚ÇÇ‚ÇÅ] [mono g‚ÇÇ‚ÇÑ] [epi g‚ÇÉ‚ÇÇ] :
--   mono f‚ÇÑ‚ÇÇ :=
-- begin
--   haveI : epi f‚ÇÑ‚ÇÇ.op := four_lemma_top_epi Hr2.op Hr1.op Hc2.op Hc1.op
--     (sq_op sq‚ÇÉ‚ÇÇ) (sq_op sq‚ÇÇ‚ÇÉ) (sq_op sq‚ÇÇ‚ÇÇ) (sq_op sq‚ÇÇ‚ÇÅ),
--   exact category_theory.unop_mono_of_epi f‚ÇÑ‚ÇÇ.op
-- end

-- lemma four_lemma_left_epi
--   (Hc1 : exact_seq ùìê [g‚ÇÅ‚ÇÇ, g‚ÇÇ‚ÇÇ, g‚ÇÉ‚ÇÇ]) (Hc2 : exact_seq ùìê [g‚ÇÅ‚ÇÉ, g‚ÇÇ‚ÇÉ, g‚ÇÉ‚ÇÉ])
--   (Hr1 : exact f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ) (Hr2 : exact f‚ÇÉ‚ÇÅ f‚ÇÉ‚ÇÇ)
--   (sq‚ÇÅ‚ÇÇ : f‚ÇÅ‚ÇÇ ‚â´ g‚ÇÅ‚ÇÉ = g‚ÇÅ‚ÇÇ ‚â´ f‚ÇÇ‚ÇÇ)
--   (sq‚ÇÇ‚ÇÅ : f‚ÇÇ‚ÇÅ ‚â´ g‚ÇÇ‚ÇÇ = g‚ÇÇ‚ÇÅ ‚â´ f‚ÇÉ‚ÇÅ) (sq‚ÇÇ‚ÇÇ : f‚ÇÇ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ = g‚ÇÇ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÇ)
--   (sq‚ÇÉ‚ÇÇ : f‚ÇÉ‚ÇÇ ‚â´ g‚ÇÉ‚ÇÉ = g‚ÇÉ‚ÇÇ ‚â´ f‚ÇÑ‚ÇÇ)
--   [epi f‚ÇÅ‚ÇÇ] [mono f‚ÇÑ‚ÇÇ] [mono f‚ÇÉ‚ÇÅ] :
--   epi g‚ÇÇ‚ÇÅ :=
-- four_lemma_top_epi Hc1 Hc2 Hr1 Hr2 sq‚ÇÇ‚ÇÅ.symm sq‚ÇÅ‚ÇÇ.symm sq‚ÇÇ‚ÇÇ.symm sq‚ÇÉ‚ÇÇ.symm

-- lemma four_lemma_right_mono
--   (Hc1 : exact_seq ùìê [g‚ÇÅ‚ÇÇ, g‚ÇÇ‚ÇÇ, g‚ÇÉ‚ÇÇ]) (Hc2 : exact_seq ùìê [g‚ÇÅ‚ÇÉ, g‚ÇÇ‚ÇÉ, g‚ÇÉ‚ÇÉ])
--   (Hr1 : exact f‚ÇÇ‚ÇÇ f‚ÇÇ‚ÇÉ) (Hr2 : exact f‚ÇÉ‚ÇÇ f‚ÇÉ‚ÇÉ)
--   (sq‚ÇÅ‚ÇÇ : f‚ÇÅ‚ÇÇ ‚â´ g‚ÇÅ‚ÇÉ = g‚ÇÅ‚ÇÇ ‚â´ f‚ÇÇ‚ÇÇ)
--   (sq‚ÇÇ‚ÇÇ : f‚ÇÇ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ = g‚ÇÇ‚ÇÇ ‚â´ f‚ÇÉ‚ÇÇ) (sq‚ÇÇ‚ÇÉ : f‚ÇÇ‚ÇÉ ‚â´ g‚ÇÇ‚ÇÑ = g‚ÇÇ‚ÇÉ ‚â´ f‚ÇÉ‚ÇÉ)
--   (sq‚ÇÉ‚ÇÇ : f‚ÇÉ‚ÇÇ ‚â´ g‚ÇÉ‚ÇÉ = g‚ÇÉ‚ÇÇ ‚â´ f‚ÇÑ‚ÇÇ)
--   [epi f‚ÇÅ‚ÇÇ] [mono f‚ÇÑ‚ÇÇ] [epi f‚ÇÇ‚ÇÉ] :
--   mono g‚ÇÇ‚ÇÑ :=
-- four_lemma_bot_mono Hc1 Hc2 Hr1 Hr2 sq‚ÇÅ‚ÇÇ.symm sq‚ÇÇ‚ÇÇ.symm sq‚ÇÉ‚ÇÇ.symm sq‚ÇÇ‚ÇÉ.symm

-- end four

end LBC
