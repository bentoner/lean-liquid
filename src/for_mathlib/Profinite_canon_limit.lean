--import .PartialOrder
import .Profinite
import topology.category.Profinite
import topology.locally_constant.basic
import category_theory.Fintype
import category_theory.limits.creates
import category_theory.arrow
import order.category.PartialOrder

/-!
This file proves that a profinite set is a limit of finite sets.
Some portions of this file were inspired by code in the `Profinite2` branch of mathlib,
due to C. S√∂nne and B. Mehta.
-/

universe u
open category_theory

noncomputable theory

namespace Profinite

section move_me

-- TODO: Move this and clean up proofs above
@[simp]
lemma comp_apply {X Y Z : Profinite.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : X) :
  (f ‚â´ g) x = g (f x) := rfl

-- TODO: Move this and clean up proofs above
@[simp]
lemma id_apply {X : Profinite.{u}} (x : X) : (ùüô X : X ‚ü∂ X) x = x := rfl

@[simp]
lemma id_to_fun {X : Profinite.{u}} : (ùüô X : X ‚Üí X) = id := rfl

-- TODO: Move this!
@[simp]
lemma comp_to_fun {X Y Z : Profinite.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  (f ‚â´ g : X ‚Üí Z) = g ‚àò f := rfl

end move_me

variables (X : Profinite.{u})

@[ext]
structure cl :=
(sets : set (set X))
(clopen : ‚àÄ S : sets, is_clopen (S : set X))
(nonempty : ‚àÄ S : sets, (S : set X).nonempty)
(cover : ‚àÄ x : X, ‚àÉ! U: sets, x ‚àà (U : set X))

variable {X}

namespace cl

def of_clopen {U : set X} : is_clopen U ‚Üí U.nonempty ‚Üí U·∂ú.nonempty ‚Üí X.cl := Œª h1 h2 h3,
{ sets := {U,U·∂ú},
  clopen := begin
    rintro ‚ü®V,rfl|h‚ü©, { assumption },
    rw set.mem_singleton_iff at h,
    simp [h, is_clopen_compl h1],
  end,
  nonempty := begin
    rintro ‚ü®V,rfl|h‚ü©, { assumption },
    rw set.mem_singleton_iff at h,
    simpa [h],
  end ,
  cover := begin
    rintro x,
    by_cases hx : x ‚àà U,
    { refine ‚ü®‚ü®U,or.inl rfl‚ü©, hx, _‚ü©,
      rintros ‚ü®V,rfl|hV‚ü© hhV, { refl },
      rw set.mem_singleton_iff at hV,
      ext1,
      dsimp at hhV,
      rw hV at hhV,
      exact false.elim (hhV hx) },
    { refine ‚ü®‚ü®U·∂ú, or.inr rfl‚ü©, hx, _‚ü©,
      rintros ‚ü®V,rfl|hV‚ü© hhV,
      { exact false.elim (hx hhV) },
      { simpa using hV } }
  end }

instance : has_coe_to_sort X.cl := ‚ü®Type*, Œª I, I.sets‚ü©

def of_clopen.mk {U : set X} {h1 : is_clopen U} {h2 : U.nonempty} {h3 : U·∂ú.nonempty} :
  of_clopen h1 h2 h3 := ‚ü®U, or.inl rfl‚ü©

lemma is_open {I : X.cl} (U : I) : is_open (U : set X) :=
  (I.clopen _).1

lemma is_closed {I : X.cl} (U : I) : is_closed (U : set X) :=
  (I.clopen _).2

instance {I : X.cl} : fintype I :=
begin
  have h : _root_.is_compact (‚ä§ : set X) := compact_univ,
  rw compact_iff_finite_subcover at h,
  specialize h (Œª i : I, i) (Œª i, is_open _) (Œª x _, _),
  rcases I.cover x with ‚ü®U,hU,hU2‚ü©,
  refine ‚ü®U,‚ü®U,rfl‚ü©,hU‚ü©,
  let S := classical.some h,
  let hS := classical.some_spec h,
  refine ‚ü®S,_‚ü©,
  intros U,
  rcases I.nonempty U with ‚ü®x,hx‚ü©,
  specialize hS (by tauto : x ‚àà _),
  rcases hS with ‚ü®V,‚ü®W,rfl‚ü©,W,‚ü®(h1 : _ ‚àà S),rfl‚ü©,h2‚ü©,
  dsimp at h2,
  suffices : U = W, by rwa this,
  rcases I.cover x with ‚ü®S,hS,hh‚ü©,
  rw [hh U hx, hh W h2],
end

instance : inhabited X.cl :=
begin
  by_cases h : _root_.nonempty X,
  { refine ‚ü®‚ü®{set.univ}, by simp, _, by tidy‚ü©‚ü©,
    rcases h with ‚ü®x‚ü©,
    rintro ‚ü®h,hh‚ü©,
    refine ‚ü®x,_‚ü©,
    simp only [set.mem_singleton_iff] at hh,
    simp [hh] },
  { refine ‚ü®‚ü®‚àÖ, by simp, by simp, Œª x, false.elim (h ‚ü®x‚ü©)‚ü©‚ü© }
end

lemma eq_of_le {I : X.cl} (U V : I) : (U : set X) ‚â§ V ‚Üí U = V :=
begin
  intro h,
  rcases (I.nonempty U) with ‚ü®y,hy‚ü©,
  rcases I.cover y with ‚ü®W,h1,h2‚ü©,
  rw [h2 U hy, h2 V (h hy)],
end

-- Discrete topology
instance {I : X.cl} : topological_space I := ‚ä•

-- I ‚â§ J iff I refines J
instance : preorder X.cl :=
{ le := Œª I J, ‚àÄ U : I, ‚àÉ V : J, (U : set X) ‚â§ V,
  le_refl := Œª I U, ‚ü®U, le_refl _‚ü©,
  le_trans := Œª I J K h1 h2 U,
    let ‚ü®V,hV‚ü© := h1 U,
        ‚ü®W,hW‚ü© := h2 V
    in ‚ü®W, le_trans hV hW‚ü© }

def common (I J : X.cl) : X.cl :=
{ sets := { U | (U : set X).nonempty ‚àß ‚àÉ (A : I) (B : J), (U : set X) = A ‚äì B },
  clopen := begin
    rintro ‚ü®U,hU1,‚ü®A,B,rfl‚ü©‚ü©,
    exact is_clopen_inter (clopen _ _) (clopen _ _),
  end,
  nonempty := Œª U, U.2.1,
  cover := begin
    intro x,
    rcases I.cover x with ‚ü®A,hA1,hA2‚ü©,
    rcases J.cover x with ‚ü®B,hB1,hB2‚ü©,
    refine ‚ü®‚ü®(A ‚äì B : set X),‚ü®x,hA1,hB1‚ü©,‚ü®A,B,rfl‚ü©‚ü©,‚ü®hA1,hB1‚ü©,_‚ü©,
    rintros ‚ü®W,‚ü®W,A',B',rfl‚ü©‚ü© hW2,
    have : A' = A,
    { apply hA2,
      exact hW2.1 },
    subst this,
    have : B' = B,
    { apply hB2,
      exact hW2.2 },
    subst this,
  end }

lemma common_le_left {I J : X.cl} : common I J ‚â§ I :=
begin
  rintro ‚ü®U, ‚ü®U, A, B, rfl‚ü©‚ü©,
  refine ‚ü®A, set.inter_subset_left _ _‚ü©,
end

lemma common_le_right {I J : X.cl} : common I J ‚â§ J :=
begin
  rintro ‚ü®U, ‚ü®U, A, B, rfl‚ü©‚ü©,
  refine ‚ü®B, set.inter_subset_right _ _‚ü©,
end


instance : semilattice_inf X.cl :=
{ inf := common,
  le_antisymm := begin
    intros I J h1 h2,
    ext S,
    split,
    { intro hS,
      rcases h1 ‚ü®S,hS‚ü© with ‚ü®V,hV‚ü©,
      have : S = V,
      { apply le_antisymm hV,
        rcases h2 V with ‚ü®W,hW‚ü©,
        have : W = ‚ü®S,hS‚ü©,
        { symmetry,
          apply eq_of_le,
          refine le_trans hV hW },
        rwa ‚Üê this },
      rw this,
      exact V.2 },
    { intro hS,
      rcases h2 ‚ü®S,hS‚ü© with ‚ü®V,hV‚ü©,
      have : S = V,
      { apply le_antisymm hV,
        rcases h1 V with ‚ü®W,hW‚ü©,
        have : W = ‚ü®S,hS‚ü©,
        { symmetry,
          apply eq_of_le,
          refine le_trans hV hW },
        rwa ‚Üê this },
      rw this,
      exact V.2 }
  end,
  inf_le_left := Œª _ _, common_le_left,
  inf_le_right := Œª _ _, common_le_right,
  le_inf := begin
    intros I J K h1 h2 U,
    rcases h1 U with ‚ü®A,hA‚ü©,
    rcases h2 U with ‚ü®B,hB‚ü©,
    have : (U : set X) ‚â§ A ‚äì B := le_inf hA hB,
    refine ‚ü®‚ü®A ‚äì B,set.nonempty.mono this (I.nonempty U),A,B,rfl‚ü©, this‚ü©,
  end,
  ..(infer_instance : preorder _)}

lemma inf_mono_right {I : X.cl} : monotone (Œª J : X.cl, I ‚äì J) :=
begin
  intros J K h,
  rintro ‚ü®U,‚ü®hU,V,W,rfl‚ü©‚ü©,
  rcases h W with ‚ü®R,hR‚ü©,
  have : (V : set X) ‚äì W ‚â§ V ‚äì R := Œª x ‚ü®h1,hx‚ü©, ‚ü®h1,hR hx‚ü©,
  refine ‚ü®‚ü®V ‚äì R, ‚ü®set.nonempty.mono this hU, V, R, rfl‚ü©‚ü©, this‚ü©,
end

lemma inf_mono_left {I : X.cl} : monotone (Œª J : X.cl, J ‚äì I) :=
begin
  intros J K h,
  dsimp,
  simp_rw inf_comm,
  exact inf_mono_right h,
end

section refined

/-!
Given `h : I ‚â§ J`, `refined h U` is the unique element in `J` which `U` refined.
-/

def refined {I J : X.cl} (h : I ‚â§ J) (U : I) : J := classical.some (h U)

lemma refined_le {I J : X.cl} (h : I ‚â§ J) (U : I) : (U : set X) ‚â§ refined h U :=
  classical.some_spec (h U)

lemma refined_unique {I J : X.cl} (h : I ‚â§ J) (U : I) (V : J) : (U : set X) ‚â§ V ‚Üí
  V = refined h U :=
begin
  intro hh,
  rcases I.nonempty U with ‚ü®x,hx‚ü©,
  rcases J.cover x with ‚ü®W,hW,h2‚ü©,
  rw [h2 V (hh hx), h2 (refined h U) (refined_le _ _ hx)],
end

@[simp]
lemma refined_id {I : X.cl} (U : I) : refined (le_refl I) U = U :=
begin
  symmetry,
  apply refined_unique,
  exact le_refl _,
end

@[simp]
lemma refined_comp {I J K : X.cl} (U : I) (h1 : I ‚â§ J) (h2 : J ‚â§ K) :
  refined (le_trans h1 h2) U = refined h2 (refined h1 U) := eq.symm $
refined_unique _ _ _ $ le_trans (refined_le h1 _) (refined_le _ _)

end refined

section proj

/-!
Given `I : X.cl`, `proj I` is the function `X ‚Üí I` sending `x` to the unique
memeber of `I` in which it's contained.
-/

def proj_fun (I : X.cl) : X ‚Üí I := Œª x, classical.some (I.cover x)

lemma proj_fun_spec (I : X.cl) (x : X) : x ‚àà (proj_fun I x : set X) :=
  (classical.some_spec (I.cover x)).1

lemma proj_fun_unique (I : X.cl) (x : X) (U : I) : x ‚àà (U : set X) ‚Üí U = proj_fun I x :=
begin
  intro h,
  rcases I.cover x with ‚ü®V,hV,hh‚ü©,
  rw [hh U h, hh (proj_fun I x) (proj_fun_spec _ _)],
end

lemma proj_fun_mem (I : X.cl) (x y : X) :
  x ‚àà (proj_fun I y : set X) ‚Üî proj_fun I y = proj_fun I x :=
begin
  split,
  { intro h,
    exact proj_fun_unique _ _ _ h },
  { intro h,
    rw h,
    apply proj_fun_spec }
end

-- A description of the preimage of a set w.r.t. proj_fun
lemma proj_fun_preimage (I : X.cl) (S : set I) :
  proj_fun I ‚Åª¬π' S = ‚ãÉ (i : I) (hi : i ‚àà S), (i : set X) :=
begin
  rw [‚Üê S.bUnion_of_singleton, set.preimage_Union],
  congr' 1,
  ext1 U,
  rw [set.bUnion_of_singleton, set.preimage_Union],
  congr' 1,
  ext h x,
  split,
  { intro hx,
    simp only [set.mem_preimage, set.mem_singleton_iff] at hx,
    rw ‚Üê hx, apply proj_fun_spec, },
  { intro h,
    rw proj_fun_unique _ _ _ h,
    simp [proj_fun_spec] }
end

-- A locally constant version of proj_fun
def proj (I : X.cl) : locally_constant X I :=
{ to_fun := proj_fun _,
  is_locally_constant := begin
    intros S,
    rw [proj_fun_preimage],
    apply is_open_bUnion,
    intros i hi,
    apply is_open,
  end}

-- Useful for functoriality of proj_fun's.
lemma proj_comp {I J : X.cl} (h : I ‚â§ J) (x : X) :
  refined h (proj I x) = proj J x :=
proj_fun_unique _ _ _ (refined_le _ _ $ proj_fun_spec _ _)

-- This shows the injectivity of the map
-- x ‚Ü¶ (proj I x)_I
lemma eq_of_forall_proj_eq {x y : X} :
  (‚àÄ I : X.cl, proj I x = proj I y) ‚Üí x = y :=
begin
  intro h,
  suffices : x ‚àà ({y} : set X), by simpa using this,
  have : totally_disconnected_space X, by apply_instance,
  rw totally_disconnected_space_iff_connected_component_singleton at this,
  rw [‚Üê this, connected_component_eq_Inter_clopen],
  rintros U ‚ü®‚ü®U,hU1,hU2‚ü©,rfl‚ü©,
  dsimp,
  by_cases ht : U = ‚ä§, { rw ht, tauto },
  have : U·∂ú.nonempty, by rwa set.nonempty_compl,
  let J := cl.of_clopen hU1 ‚ü®y,hU2‚ü© this,
  specialize h J,
  suffices : proj J y = cl.of_clopen.mk,
  { change x ‚àà ((of_clopen.mk : J) : set X),
    rw [‚Üê this, ‚Üê h],
    apply proj_fun_spec },
  symmetry,
  apply proj_fun_unique,
  exact hU2,
end

lemma exists_of_compat (Us : Œ† (I : X.cl), I)
  (compat : ‚àÄ {I J : X.cl} (h : I ‚â§ J), refined h (Us I) = (Us J)) :
  ‚àÉ x : X, ‚àÄ I : X.cl, proj I x = Us I :=
begin
  have := is_compact.nonempty_Inter_of_directed_nonempty_compact_closed
    (Œª I, (Us I : set X)) (Œª I J, ‚ü®common I J, _‚ü©) (Œª I, I.nonempty _)
    (Œª I, is_closed.compact (is_closed _)) (Œª I, is_closed _),
  rcases this with ‚ü®x,hx‚ü©,
  { refine ‚ü®x,Œª I, _‚ü©,
    symmetry,
    apply proj_fun_unique,
    refine hx _ ‚ü®I,rfl‚ü© },
  dsimp only,
  rw [‚Üê compat (common_le_left : _ ‚â§ I), ‚Üê compat (common_le_right : _ ‚â§ J)],
  exact ‚ü®refined_le _ _, refined_le _ _‚ü©,
end

end proj

section pullback

variables {Y : Profinite.{u}} (f : Y ‚ü∂ X)

def pullback : X.cl ‚Üí Y.cl := Œª I,
{ sets := { A | A.nonempty ‚àß ‚àÉ U : I, A = f ‚Åª¬π' U },
  clopen := begin
    rintro ‚ü®A, h1, U, rfl‚ü©,
    exact ‚ü®is_open.preimage f.continuous (is_open _),
      is_closed.preimage f.continuous (is_closed _)‚ü©,
  end,
  nonempty := Œª U, U.2.1,
  cover := begin
    intro y,
    rcases I.cover (f y) with ‚ü®U,hU1,hU2‚ü©,
    refine ‚ü®‚ü®f ‚Åª¬π' U, ‚ü®y, hU1‚ü©, U, rfl‚ü©, hU1, _‚ü©,
    rintro ‚ü®V,‚ü®hV,V,rfl‚ü©‚ü© hhV,
    suffices : V = U, by tidy,
    exact hU2 _ hhV,
  end }

variable {f}

lemma pullback_mono {I J : X.cl} (h : I ‚â§ J) : pullback f I ‚â§ pullback f J :=
begin
  rintro ‚ü®U,‚ü®hU,U,rfl‚ü©‚ü©,
  rcases h U with ‚ü®J,hJ‚ü©,
  refine ‚ü®‚ü®f ‚Åª¬π' J, ‚ü®_, J, rfl‚ü©‚ü©, set.preimage_mono hJ‚ü©,
  exact set.nonempty.mono (set.preimage_mono hJ) hU,
end

lemma pullback_spec {I : X.cl} (U : pullback f I) : ‚àÉ! V : I, (U : set Y) = f ‚Åª¬π' V :=
begin
  rcases U with ‚ü®U,‚ü®h,V,rfl‚ü©‚ü©,
  refine ‚ü®V, rfl, _‚ü©,
  intros W hW,
  rcases h with ‚ü®y,hy‚ü©,
  rcases I.cover (f y) with ‚ü®A,hA1,hA2‚ü©,
  dsimp at hW,
  have hy' := hy,
  rw hW at hy,
  rw [hA2 W hy, hA2 V hy'],
end

lemma pullback_proj {I : X.cl} (y : Y) : ((pullback f I).proj y : set Y) = f ‚Åª¬π' (I.proj (f y)) :=
begin
  rcases pullback_spec ((pullback f I).proj y) with ‚ü®V,h1,h2‚ü©,
  erw h1,
  congr,
  apply proj_fun_unique,
  change y ‚àà f ‚Åª¬π' V,
  rw ‚Üê h1,
  apply proj_fun_spec,
end

lemma pullback_id {I : X.cl} : pullback (ùüô X) I = I :=
begin
  ext S,
  dsimp [pullback],
  split,
  { rintro ‚ü®‚ü®z,hz‚ü©,‚ü®U,hU‚ü©‚ü©,
    simp [hU] },
  { intro h,
    refine ‚ü®I.nonempty ‚ü®S,h‚ü©, ‚ü®S,h‚ü©, rfl‚ü© }
end

lemma pullback_comp {X Y Z : Profinite.{u}} {I : Z.cl} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  pullback (f ‚â´ g) I = pullback f (pullback g I) :=
begin
  ext S,
  dsimp [pullback],
  split,
  { rintro ‚ü®h1,U,hU‚ü©,
    refine ‚ü®h1,_‚ü©,
    rcases h1 with ‚ü®x,hx‚ü©,
    use g ‚Åª¬π' (U : set Z),
    dsimp,
    refine ‚ü®_,_‚ü©,
    { rw hU at hx,
      simp at hx,
      refine ‚ü®f x, hx‚ü© },
    { use U },
    { simpa using hU, } },
  { rintro ‚ü®‚ü®x,hx‚ü©,‚ü®U,hU1,‚ü®V,rfl‚ü©‚ü©,rfl‚ü©,
    refine ‚ü®‚ü®x,hx‚ü©,_‚ü©,
    refine ‚ü®V,_‚ü©,
    refl }
end

def map {I : X.cl} : pullback f I ‚Üí I := Œª U, classical.some (pullback_spec U)

lemma map_spec {I : X.cl} (U : pullback f I) : (U : set Y) = f ‚Åª¬π' map U  :=
  (classical.some_spec (pullback_spec U)).1

lemma map_unique {I : X.cl} (U : pullback f I) (V : I) :
  (U : set Y) = f ‚Åª¬π' V ‚Üí V = map U :=
Œª h, (classical.some_spec (pullback_spec U)).2 _ h

@[simp]
lemma map_refined_comm {I J : X.cl} (h : I ‚â§ J) (U : pullback f I) :
  map (refined (pullback_mono h : pullback f I ‚â§ _) U) = refined h (map U) :=
begin
  have := nonempty _ U,
  rcases this with ‚ü®y,hy‚ü©,
  have : refined h (map U) = proj _ (f y),
  { apply proj_fun_unique,
    apply refined_le,
    change y ‚àà set.preimage f (map U),
    rw ‚Üê map_spec,
    assumption },
  rw this,
  apply proj_fun_unique,
  change y ‚àà set.preimage f (map (refined (pullback_mono _) U) : set X),
  rw ‚Üê map_spec,
  exact refined_le _ _ hy,
end

end pullback

end cl

/-!
Up until this point, we didn't phrase anythign in terms of category theory.
We'll do this now.
-/
section categorical

variable (X)

@[simps]
def diagram : X.cl ‚•§ Fintype :=
{ obj := Œª I, Fintype.of I,
  map := Œª I J h, cl.refined $ le_of_hom h,
  -- looks like some simp lemmas missing from Fintype TODO: Fix that...
  map_id' := Œª X, by {ext1, change _ = x, simp},
  map_comp' := Œª X Y Z f g, by {
    change (cl.refined _) = (cl.refined _) ‚àò (cl.refined _),
    ext1,
    dsimp,
    erw ‚Üê cl.refined_comp } }

def Fintype.discrete (Z : Fintype) : topological_space Z := ‚ä•

local attribute [instance] Fintype.discrete

-- TODO: Move this.
@[simps]
def of_Fintype : Fintype ‚•§ Profinite :=
{ obj := Œª F, ‚ü®‚ü®F‚ü©‚ü©,
  map := Œª A B f, ‚ü®f, continuous_of_discrete_topology‚ü© }

@[simps]
def Fincone : limits.cone (X.diagram ‚ãô of_Fintype) :=
{ X := X,
  œÄ :=
  { app := Œª I,
    { to_fun := cl.proj I,
      continuous_to_fun := (cl.proj I).continuous },
    naturality' := begin
      intros I J f,
      ext1 x,
      -- TODO: again, some simp lemmas missing...
      change J.proj x = (X.diagram ‚ãô of_Fintype).map f (I.proj _),
      symmetry,
      apply cl.proj_fun_unique,
      simp,
      apply cl.refined_le,
      apply cl.proj_fun_spec
    end } }

instance is_iso_lift : is_iso ((limit_cone_cone_is_limit (X.diagram ‚ãô of_Fintype)).lift X.Fincone) :=
is_iso_of_bijective _
begin
  split,
  { intros x y h,
    apply cl.eq_of_forall_proj_eq,
    intros I,
    apply_fun subtype.val at h,
    apply_fun (Œª u, u I) at h,
    exact h },
  { let C := limit_cone_cone (X.diagram ‚ãô of_Fintype),
    rintros (x : C.X.to_Top),
    have := cl.exists_of_compat (Œª i : X.cl, x.val i)
      (Œª I J f, _),
    { rcases this with ‚ü®x,hx‚ü©,
      refine ‚ü®x,_‚ü©,
      ext1,
      ext1 I,
      exact hx I },
    { change _ = C.œÄ.app J _,
      erw ‚Üê C.w (hom_of_le f),
      refl } }
end

def Fincone_iso : X.Fincone ‚âÖ limit_cone_cone _ :=
limits.cones.ext
(as_iso $ (limit_cone_cone_is_limit (X.diagram ‚ãô of_Fintype)).lift X.Fincone) (Œª I, rfl)

def Fincone_is_limit : limits.is_limit X.Fincone :=
limits.is_limit.of_iso_limit (limit_cone_cone_is_limit _) X.Fincone_iso.symm

variables {X} {Y : Profinite.{u}} (f : Y ‚ü∂ X)

-- Don't use  this -- use change_cone instead.
def hom_cone : limits.cone (X.diagram ‚ãô of_Fintype) :=
{ X := Y,
  œÄ :=
  { app := Œª I,
    { to_fun := cl.map ‚àò (cl.pullback f I).proj,
      continuous_to_fun :=
        continuous.comp continuous_of_discrete_topology (locally_constant.continuous _) },
    naturality' := begin
      intros I J g,
      ext1 y,
      change cl.map ((cl.pullback f J).proj y) = cl.refined (le_of_hom g) _,
      dsimp at *,
      erw ‚Üê cl.map_refined_comm,
      symmetry,
      congr,
      apply cl.proj_fun_unique,
      apply cl.refined_le,
      apply cl.proj_fun_spec,
    end } }

-- Is this needed?
def cl.change : X.cl ‚•§ Y.cl :=
{ obj := cl.pullback f,
  map := Œª I J f, hom_of_le $ cl.pullback_mono $ le_of_hom f }

def change_cone (f : Y ‚ü∂ X) (C : limits.cone (Y.diagram ‚ãô of_Fintype)) :
  limits.cone (X.diagram ‚ãô of_Fintype) :=
{ X := C.X,
  œÄ :=
  { app := Œª I, C.œÄ.app (cl.pullback f I) ‚â´ ‚ü®cl.map‚ü©,
    naturality' := begin
      intros I J g,
      ext1,
      dsimp at *,
      have h : cl.pullback f _ ‚â§ _ := cl.pullback_mono (le_of_hom g),
      erw [‚Üê cl.map_refined_comm, ‚Üê C.w (hom_of_le h)],
      refl,
    end } }

theorem change_cone_lift : f = X.Fincone_is_limit.lift (change_cone f Y.Fincone) :=
begin
  refine X.Fincone_is_limit.uniq (change_cone f Y.Fincone) f _,
  intros I,
  ext1 y,
  change I.proj (f y) = cl.map _,
  symmetry,
  apply cl.proj_fun_unique,
  change _ ‚àà f ‚Åª¬π' ‚Üë(cl.map (((cl.pullback f I).proj) y)),
  rw ‚Üê cl.map_spec,
  apply cl.proj_fun_spec,
end

def change_cone_id (C : limits.cone (X.diagram ‚ãô of_Fintype)) :
  change_cone (ùüô X) C ‚âÖ C :=
limits.cones.ext (eq_to_iso rfl)
begin
  intros I,
  ext1,
  dsimp [change_cone] at *,
  symmetry,
  apply cl.map_unique,
  change _ = id ‚Åª¬π' _,
  dsimp,
  rw cl.pullback_id,
end

def change_cone_id_Fincone : change_cone (ùüô X) X.Fincone ‚âÖ X.Fincone :=
change_cone_id _

def change_cone_comp {Z : Profinite.{u}} (g : Z ‚ü∂ Y) (C : limits.cone (Z.diagram ‚ãô of_Fintype)) :
  change_cone (g ‚â´ f) C ‚âÖ change_cone f (change_cone g C) :=
limits.cones.ext (eq_to_iso rfl)
begin
  intros I,
  ext1 z,
  dsimp [change_cone] at *,
  symmetry,
  apply cl.map_unique,
  erw [set.preimage_comp, ‚Üê cl.map_spec, ‚Üê cl.map_spec, cl.pullback_comp],
end

def change_cone_comp_Fincone {Z : Profinite.{u}} (g : Z ‚ü∂ Y) :
  change_cone (g ‚â´ f) Z.Fincone ‚âÖ change_cone f (change_cone g Z.Fincone) :=
change_cone_comp _ _ _

end categorical

end Profinite
