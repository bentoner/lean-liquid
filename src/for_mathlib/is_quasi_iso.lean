import for_mathlib.derived.defs
import for_mathlib.homological_complex_op
import for_mathlib.commsq

noncomputable theory

open category_theory opposite
open homotopy_category

variables {ùìê : Type*} [category ùìê] [abelian ùìê]
variables {Œπ : Type*} {c : complex_shape Œπ}

lemma is_iso_of_square {A B C D : ùìê} (a : A ‚ü∂ B) (b : B ‚ü∂ D) (a' : A ‚ü∂ C) (c : C ‚ü∂ D) (w : a ‚â´ b = a' ‚â´ c)
  (ha : is_iso a) (hb : is_iso b) (ha' : is_iso a') :
  is_iso c :=
begin
  have hc : c = inv a' ‚â´ a ‚â´ b, { rw [is_iso.eq_inv_comp, w], },
  rw [hc], apply_instance,
end

def homology.map' {A‚ÇÅ B‚ÇÅ C‚ÇÅ A‚ÇÇ B‚ÇÇ C‚ÇÇ : ùìê}
  {f‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ} {g‚ÇÅ : B‚ÇÅ ‚ü∂ C‚ÇÅ} (w‚ÇÅ : f‚ÇÅ ‚â´ g‚ÇÅ = 0)
  {f‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ} {g‚ÇÇ : B‚ÇÇ ‚ü∂ C‚ÇÇ} (w‚ÇÇ : f‚ÇÇ ‚â´ g‚ÇÇ = 0)
  {a : A‚ÇÅ ‚ü∂ A‚ÇÇ} {b : B‚ÇÅ ‚ü∂ B‚ÇÇ} {c : C‚ÇÅ ‚ü∂ C‚ÇÇ}
  (sq1 : commsq f‚ÇÅ a b f‚ÇÇ) (sq2 : commsq g‚ÇÅ b c g‚ÇÇ) :
  homology f‚ÇÅ g‚ÇÅ w‚ÇÅ ‚ü∂ homology f‚ÇÇ g‚ÇÇ w‚ÇÇ :=
homology.map w‚ÇÅ w‚ÇÇ ‚ü®a, b, sq1.w.symm‚ü© ‚ü®b, c, sq2.w.symm‚ü© rfl

lemma homology.map_eq {A‚ÇÅ B‚ÇÅ C‚ÇÅ A‚ÇÇ B‚ÇÇ C‚ÇÇ : ùìê}
  {f‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ} {g‚ÇÅ : B‚ÇÅ ‚ü∂ C‚ÇÅ} (w‚ÇÅ : f‚ÇÅ ‚â´ g‚ÇÅ = 0)
  {f‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ} {g‚ÇÇ : B‚ÇÇ ‚ü∂ C‚ÇÇ} (w‚ÇÇ : f‚ÇÇ ‚â´ g‚ÇÇ = 0)
  (sq1 : arrow.mk f‚ÇÅ ‚ü∂ arrow.mk f‚ÇÇ) (sq2 : arrow.mk g‚ÇÅ ‚ü∂ arrow.mk g‚ÇÇ) (H) :
  homology.map w‚ÇÅ w‚ÇÇ sq1 sq2 H =
    @homology.map' _ _ _ _ _ _ _ _ _ _ _ w‚ÇÅ _ _ w‚ÇÇ sq1.left sq1.right sq2.right
      (commsq.of_eq sq1.w.symm) (commsq.of_eq $ by { rw H, exact sq2.w.symm }) :=
by { rw homology.map', cases sq1, cases sq2, congr, rw H, }

def commsq.op {A B C D : ùìê} {a : A ‚ü∂ B} {b : B ‚ü∂ D} {a' : A ‚ü∂ C} {c : C ‚ü∂ D}
  (sq : commsq a a' b c) :
  commsq c.op b.op a'.op a.op :=
begin
  apply commsq.of_eq,
  simp only [‚Üê op_comp, sq.w]
end

lemma homology_map_homology_op_iso {A‚ÇÅ B‚ÇÅ C‚ÇÅ A‚ÇÇ B‚ÇÇ C‚ÇÇ : ùìê}
  (f‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ) (g‚ÇÅ : B‚ÇÅ ‚ü∂ C‚ÇÅ) (w‚ÇÅ : f‚ÇÅ ‚â´ g‚ÇÅ = 0)
  (f‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ) (g‚ÇÇ : B‚ÇÇ ‚ü∂ C‚ÇÇ) (w‚ÇÇ : f‚ÇÇ ‚â´ g‚ÇÇ = 0)
  (a : A‚ÇÅ ‚ü∂ A‚ÇÇ) (b : B‚ÇÅ ‚ü∂ B‚ÇÇ) (c : C‚ÇÅ ‚ü∂ C‚ÇÇ)
  (sq1 : commsq f‚ÇÅ a b f‚ÇÇ) (sq2 : commsq g‚ÇÅ b c g‚ÇÇ) :
  homology.map' _ _ sq2.op sq1.op ‚â´ (homology_op_iso f‚ÇÅ g‚ÇÅ w‚ÇÅ).hom =
  (homology_op_iso _ _ _).hom ‚â´ (homology.map' w‚ÇÅ w‚ÇÇ sq1 sq2).op :=
begin
  --delta homology_op_iso, dsimp,
  simp_rw [homology_op_iso_eq_desc'],
  dsimp only [homology.map'],
  simp_rw homology.map_eq_desc'_lift_left,
  apply homology.hom_from_ext,
  simp only [category.assoc, exact.kernel.Œπ_op, eq_to_hom_refl, category.id_comp,
    kernel_op_op_hom, homology.œÄ'_desc'_assoc],
  rw ‚Üê (homology.lift g‚ÇÅ.op _ _ _ _).op_unop,
  rw ‚Üê (homology.desc' g‚ÇÅ.op _ _ _ _).op_unop,
  simp_rw ‚Üê op_comp, congr' 1,
  apply homology.hom_from_ext,
  simp only [category.assoc, op_comp, limits.cokernel.œÄ_desc, homology.œÄ'_desc'_assoc,
    homology.lift_Œπ_assoc],
  dsimp [exact.kernel_op_iso],
  simp_rw limits.cokernel.œÄ_desc,
  simp only [category.id_comp],
  rw [‚Üê (homology.œÄ' f‚ÇÅ g‚ÇÅ w‚ÇÅ).unop_op],
  conv_rhs { rw ‚Üê b.unop_op },
  rw ‚Üê (limits.kernel.Œπ g‚ÇÅ).unop_op,
  simp_rw ‚Üê unop_comp,
  congr' 1,
  simp only [category.assoc, exact.kernel.Œπ_op, category.id_comp, eq_to_hom_refl],
  let s := _, change s ‚â´ _ = _,
  have hs : s = limits.kernel.lift _ (limits.kernel.Œπ _ ‚â´ b.op) _ ‚â´ homology.œÄ' _ _ _,
  { apply homology.hom_to_ext,
    simp only [homology.lift_Œπ, category.assoc, homological_complex.homology.œÄ'_Œπ,
      limits.kernel.lift_Œπ_assoc] },
  rw hs,
  simp only [category.assoc, homology.œÄ'_desc'_assoc],
  rw ‚Üê (limits.kernel.lift f‚ÇÅ.op _ _).op_unop,
  conv_rhs { rw ‚Üê (limits.kernel.Œπ f‚ÇÇ.op).op_unop },
  simp_rw ‚Üê op_comp, congr' 1,
  rw homology.œÄ'_Œπ,
  simp only [category.assoc, limits.cokernel.œÄ_desc_assoc],
  dsimp [exact.kernel_op_iso],
  simp only [category.assoc, limits.cokernel.œÄ_desc_assoc],
  rw [‚Üê unop_comp, limits.kernel.lift_Œπ],
  simp,
  { simp only [category.assoc, ‚Üê op_comp, sq1.w],
    simp }
end

lemma is_quasi_iso_of_op {X Y : (chain_complex ùìê ‚Ñ§)·µí·µñ} (f : X ‚ü∂ Y)
  (h : is_quasi_iso ((quotient _ _).map (homological_complex.op_functor.map f))) :
  is_quasi_iso ((quotient _ _).map f.unop) :=
begin
  refine ‚ü®Œª i, _‚ü©,
  obtain ‚ü®i, rfl‚ü© : ‚àÉ j, j+1=i := ‚ü®i-1, sub_add_cancel _ _‚ü©,
  rw [‚Üê homotopy_category.homology_functor_map_factors, homology_iso_map (i+1+1) (i+1) i],
  swap, {dsimp, refl}, swap, {dsimp, refl},
  apply_with is_iso.comp_is_iso {instances:=ff}, { apply_instance },
  apply_with is_iso.comp_is_iso {instances:=ff}, swap, { apply_instance },
  have aux := @is_quasi_iso.cond _ _ _ _ _ _ _ _ h (i+1),
  rw [‚Üê homotopy_category.homology_functor_map_factors, homology_iso_map i (i+1) (i+1+1)] at aux,
  swap, {dsimp, refl}, swap, {dsimp, refl},
  replace aux := @is_iso.of_is_iso_comp_left _ _ _ _ _ _ _ _ aux,
  replace aux := @is_iso.of_is_iso_comp_right _ _ _ _ _ _ _ _ aux,
  rw [‚Üê is_iso_op_iff],
  refine is_iso_of_square _ (homology_op_iso _ _ _).hom (homology_op_iso _ _ _).hom  _ _ aux _ _,
  swap, { apply_instance }, swap, { apply_instance },
  rw [homology.map_eq, homology.map_eq, ‚Üê homology_map_homology_op_iso],
  congr' 2,
end
