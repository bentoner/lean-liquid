import for_mathlib.derived.defs
import for_mathlib.homology_map
import for_mathlib.has_homology

noncomputable theory

open category_theory opposite
open homotopy_category

variables {ùìê : Type*} [category ùìê] [abelian ùìê]
variables {Œπ : Type*} {c : complex_shape Œπ}

def commsq.op {A B C D : ùìê} {a : A ‚ü∂ B} {b : B ‚ü∂ D} {a' : A ‚ü∂ C} {c : C ‚ü∂ D}
  (sq : commsq a a' b c) :
  commsq c.op b.op a'.op a.op :=
begin
  apply commsq.of_eq,
  simp only [‚Üê op_comp, sq.w]
end

lemma homology_map_homology_op_iso {A‚ÇÅ B‚ÇÅ C‚ÇÅ A‚ÇÇ B‚ÇÇ C‚ÇÇ : ùìê}
  (f‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ) (g‚ÇÅ : B‚ÇÅ ‚ü∂ C‚ÇÅ) (w‚ÇÅ : f‚ÇÅ ‚â´ g‚ÇÅ = 0)
  (f‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ) (g‚ÇÇ : B‚ÇÇ ‚ü∂ C‚ÇÇ) (w‚ÇÇ : f‚ÇÇ ‚â´ g‚ÇÇ = 0)
  (a : A‚ÇÅ ‚ü∂ A‚ÇÇ) (b : B‚ÇÅ ‚ü∂ B‚ÇÇ) (c : C‚ÇÅ ‚ü∂ C‚ÇÇ)
  (sq1 : commsq f‚ÇÅ a b f‚ÇÇ) (sq2 : commsq g‚ÇÅ b c g‚ÇÇ) :
  homology.map' _ _ sq2.op sq1.op ‚â´ (has_homology.homology_op_iso f‚ÇÅ g‚ÇÅ w‚ÇÅ).hom =
  (has_homology.homology_op_iso _ _ _).hom ‚â´ (homology.map' w‚ÇÅ w‚ÇÇ sq1 sq2).op :=
begin
  suffices : (homology.map' w‚ÇÅ w‚ÇÇ sq1 sq2).op =
    (homology.has _ _ _).op.map (homology.has _ _ _).op sq2.op sq1.op,
  { erw [this, has_homology.map_comp_map, has_homology.map_comp_map],
    apply (homology.has _ _ _).ext_œÄ,
    apply (homology.has _ _ _).op.ext_Œπ,
    simp only [has_homology.œÄ_map, has_homology.lift_comp_Œπ, iso.refl_hom],
    erw [has_homology.lift_comp_Œπ],
    congr' 2, rw [category.id_comp, category.comp_id], },
  apply (homology.has _ _ _).op.ext_œÄ,
  apply (homology.has _ _ _).op.ext_Œπ,
  simp only [has_homology.œÄ_map, has_homology.lift_comp_Œπ],
  dsimp only [has_homology.op, kernel_op_op_hom, cokernel_op_op_inv],
  simp only [‚Üê op_comp, homology.map', category.assoc, has_homology.œÄ_map_assoc,
    has_homology.lift_comp_Œπ_assoc, limits.kernel.lift_Œπ_assoc, limits.cokernel.œÄ_desc],
  simp only [op_comp, category.assoc],
  refl,
end

lemma is_quasi_iso_of_op {X Y : (chain_complex ùìê ‚Ñ§)·µí·µñ} (f : X ‚ü∂ Y)
  (h : is_quasi_iso ((quotient _ _).map (homological_complex.op_functor.map f))) :
  is_quasi_iso ((quotient _ _).map f.unop) :=
begin
  refine ‚ü®Œª i, _‚ü©,
  obtain ‚ü®i, rfl‚ü© : ‚àÉ j, j+1=i := ‚ü®i-1, sub_add_cancel _ _‚ü©,
  rw [‚Üê homotopy_category.homology_functor_map_factors, homology_iso_map (i+1+1) (i+1) i],
  swap, {dsimp, refl}, swap, {dsimp, refl},
  apply_with is_iso.comp_is_iso {instances:=ff}, { apply_instance },
  apply_with is_iso.comp_is_iso {instances:=ff}, swap, { apply_instance },
  have aux := @is_quasi_iso.cond _ _ _ _ _ _ _ _ h (i+1),
  rw [‚Üê homotopy_category.homology_functor_map_factors, homology_iso_map i (i+1) (i+1+1)] at aux,
  swap, {dsimp, refl}, swap, {dsimp, refl},
  replace aux := @is_iso.of_is_iso_comp_left _ _ _ _ _ _ _ _ aux,
  replace aux := @is_iso.of_is_iso_comp_right _ _ _ _ _ _ _ _ aux,
  rw [‚Üê is_iso_op_iff],
  refine is_iso_of_square _ (has_homology.homology_op_iso _ _ _).hom (has_homology.homology_op_iso _ _ _).hom  _ _ aux _ _,
  swap, { apply_instance }, swap, { apply_instance },
  rw [homology.map_eq, homology.map_eq, ‚Üê homology_map_homology_op_iso],
  congr' 2,
end
