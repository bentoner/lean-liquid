import category_theory.Fintype
import data.real.nnreal
import laurent_measures.basic
import order.filter.at_top_bot

/-
We define the map Œ∏ : (laurent_measures r `singleton`) ‚Üí ‚Ñù and we show it is surjective.
TO DO :
* Prove `lemma has_sum_pow_floor` and deduce `lemma has_sum_pow_floor_norm` from it
* Upgrade Œ∏ to a `comp_haus_blah` morphism
* Finish the proof of surjectivity for negative reals using linearity
-/

open filter function classical
open_locale topological_space classical nnreal

section thm69_surjective

example (x : ‚Ñù) : 0 ‚â§ x - 1 ‚Üí 1 ‚â§ x := sub_nonneg.mp

lemma sub_one_lt_nat_floor (x : ‚Ñù‚â•0) (hx : x ‚â† 0) : x - 1 < ‚åäx.1‚åã‚Çä :=
begin
  simp only [‚Üê nnreal.coe_lt_coe],
  by_cases h_one : x - 1 ‚â§ 0,
  {sorry },
  { rw nnreal.coe_sub,
    rw nnreal.val_eq_coe,
    sorry,
    simp only [not_le, zero_add, nnreal.sub_le_iff_le_add] at h_one,
    exact le_of_lt h_one },
end

lemma nat_floor_le' (x : ‚Ñù‚â•0) : (‚åä(x.1)‚åã‚Çä : ‚Ñù‚â•0) ‚â§ x :=
  by {simp only [‚Üê nnreal.coe_le_coe, nnreal.coe_nat_cast], from nat_floor_le x.2}

lemma converges_floor_nat (x : ‚Ñù‚â•0) (r' : ‚Ñù‚â•0) [fact (r' < 1)] --[fact (r'.1 ‚â† 0)]
  (h_nz : r' ‚â† 0) : tendsto (Œªn : ‚Ñï, (nat_floor (x.1 / r'.1 ^ n) : ‚Ñù‚â•0) * r' ^ n) at_top (ùìù x) :=
begin
  by_cases hx : x = 0, sorry,--trivial case if x=0,
  replace hx : ‚àÄ n : ‚Ñï, x / r' ^ n ‚â† 0, sorry,--if x ‚â† 0, then x / r' ^ n ‚â† 0
  haveI : ‚àÄ n : ‚Ñï, invertible (r' ^ n) := Œª n, invertible_of_nonzero (pow_ne_zero n _),
  have h_pos : ‚àÄ n : ‚Ñï,  0 < (r' ^ n) := Œª n, pow_pos ((ne.symm h_nz).le_iff_lt.mp r'.2) n,
  have h‚ÇÅ : ‚àÄ n : ‚Ñï, (x - r' ^ n) ‚â§ (nat_floor (x.1 / r'.1 ^ n) : ‚Ñù‚â•0) * r' ^ n,
  { intro n,
    have := (mul_le_mul_right $ h_pos n).mpr (le_of_lt (sub_one_lt_nat_floor (x / r' ^ n) (hx n))),
    rw [nnreal.val_eq_coe, nnreal.coe_div, nnreal.coe_pow] at this,
    calc (x - r' ^ n)  = ( x / r' ^ n - 1) * (r' ^ n) : by sorry
                   ... ‚â§ (nat_floor ( x.1 / r'.1 ^ n) * (r' ^ n)) : this },
  have HH : tendsto (Œªn : ‚Ñï, x - r' ^ n) at_top (ùìù x),
  { suffices : tendsto (Œªn : ‚Ñï, r'.1 ^ n) at_top (ùìù 0),
    { have h_geom := tendsto.mul_const (-1 : ‚Ñù) this,
      replace h_geom := tendsto.const_add x.1 h_geom,
      simp_rw [pi.add_apply, zero_mul, add_zero, mul_neg_one,
        tactic.ring.add_neg_eq_sub, nnreal.val_eq_coe] at h_geom,
      apply nnreal.tendsto_coe.mp,
      sorry,
      -- simp_rw [‚Üê nnreal.coe_pow, ‚Üê nnreal.coe_sub] at h_geom,
      -- convert h_geom -> bad idea!
      },
    have h_abs : abs r'.1 < 1 := by {simp, norm_cast, from fact.out _},
    replace h_abs := tendsto_pow_at_top_nhds_0_of_abs_lt_1 (h_abs),
    simp_rw [‚Üê one_div_pow],
    exact h_abs },
  have h‚ÇÇ : ‚àÄ n : ‚Ñï, (nat_floor ((x : ‚Ñù) / r' ^ n ): ‚Ñù‚â•0) * (r' ^ n) ‚â§ x,
  { intro n,
    have := (mul_le_mul_right $ h_pos n).mpr (nat_floor_le' (x / r' ^ n)),
    rw [nnreal.val_eq_coe, nnreal.coe_div, nnreal.coe_pow] at this,
    calc (nat_floor (x.1 / r'.1 ^ n) : ‚Ñù‚â•0) * (r' ^ n) ‚â§ (x / r' ^ n) * (r' ^ n) : this
                                        ... = x : div_mul_cancel_of_invertible x (r' ^ n) },
  apply tendsto_of_tendsto_of_tendsto_of_le_of_le HH tendsto_const_nhds h‚ÇÅ h‚ÇÇ,
  simpa only [nnreal.val_eq_coe, nnreal.coe_eq_zero, ne.def, not_false_iff],
end

lemma converges_floor (x : ‚Ñù‚â•0) :
  tendsto (Œªn : ‚Ñï, (floor (2 ^ n * x : ‚Ñù) / (2 ^ n) : ‚Ñù)) at_top (ùìù x) :=
begin
  have two_pow_pos : ‚àÄ n : ‚Ñï,  0 < (2 ^ n : ‚Ñù) := by simp only
    [forall_const, zero_lt_bit0, pow_pos, zero_lt_one],
  have h‚ÇÅ : ‚àÄ n : ‚Ñï, (x.1 - 1 / 2 ^ n) ‚â§ (floor (2 ^ n * x : ‚Ñù) / (2 ^ n) : ‚Ñù),
  { intro n,
    have := (div_le_div_right $ two_pow_pos n).mpr (le_of_lt (sub_one_lt_floor (2 ^ n * x.1))),
    calc (x.1 - 1 / 2 ^ n) = ( 2 ^ n * x.1 - 1)/ 2 ^ n : by field_simp[mul_comm]
                       ... ‚â§ (floor (2 ^ n * x.1) / (2 ^ n)) : this },
  have HH : tendsto (Œªn : ‚Ñï, (x.1 - 1 / 2 ^ n)) at_top (ùìù x),
  { suffices : tendsto (Œªn : ‚Ñï, (1 / 2 ^ n : ‚Ñù)) at_top (ùìù 0),
    { have h_geom := tendsto.mul_const (-1 : ‚Ñù) this,
      replace h_geom := tendsto.const_add x.1 h_geom,
      simp_rw [pi.add_apply, zero_mul, add_zero, mul_neg_one] at h_geom,
      exact h_geom },
    have abs_half : abs ((1:‚Ñù)/2) < 1 := by {rw [abs_div, abs_one, abs_two], exact one_half_lt_one},
    have mah := tendsto_pow_at_top_nhds_0_of_abs_lt_1 (abs_half),
    simp_rw [‚Üê one_div_pow],
    exact mah },
  have h‚ÇÇ : ‚àÄ n : ‚Ñï, ((floor (2 ^ n * x.1) ) / (2 ^ n) : ‚Ñù) ‚â§ x.1,
  { intro n,
    have := (div_le_div_right $ two_pow_pos n).mpr (floor_le (2 ^ n * x.1)),
    calc (floor (2 ^ n * x.1) / 2 ^ n : ‚Ñù)  ‚â§ (2 ^ n * x.1 / 2 ^ n) : this
                                        ... = (x.1 * 2 ^ n / 2 ^ n) : by simp only [mul_comm]
                                        ... = x.1 : by simp only [mul_div_cancel_of_invertible] },
  apply tendsto_of_tendsto_of_tendsto_of_le_of_le HH tendsto_const_nhds h‚ÇÅ h‚ÇÇ,
end

noncomputable def floor_seq (x : ‚Ñù‚â•0): ‚Ñ§ ‚Üí ‚Ñ§
| (int.of_nat n)          := nat.rec_on n
                          (floor x.1) (Œª n, floor (2 ^ n * x.1) - 2 * floor (2 ^ (n-1) * x.1))
| (int.neg_succ_of_nat n) := 0

noncomputable  def floor_seq_nat (x : ‚Ñù‚â•0): ‚Ñ§ ‚Üí ‚Ñï
| (int.of_nat n)          := nat.rec_on n
                          (nat_floor x.1) (Œª n, nat_floor (2 ^ n * x.1) - 2 * nat_floor (2 ^ (n-1) * x.1))
| (int.neg_succ_of_nat n) := 0

-- example : summable (Œª (n : ‚Ñ§), (œÜ n) * (1 / 2) ^ n) :=
-- begin
--   have hinj : function.injective (coe : ‚Ñï ‚Üí ‚Ñ§) := by {apply int.coe_nat_inj},
--   have hœÜ : ‚àÄ n : ‚Ñ§, n ‚àâ set.range (coe : ‚Ñï ‚Üí ‚Ñ§) ‚Üí œÜ n = 0,
--   { rintros n hn,
--     induction n with n,
--     { simp only [set.mem_range_self, not_true, int.of_nat_eq_coe] at hn, tauto },
--     refl },
--   replace hœÜ : ‚àÄ n : ‚Ñ§, n ‚àâ set.range (coe : ‚Ñï ‚Üí ‚Ñ§) ‚Üí œÜ n * (1 / 2) ^ n = 0,
--   { intros n hn,
--     specialize hœÜ n hn,
--     rw [hœÜ, zero_mul] },
--   apply (function.injective.summable_iff hinj hœÜ).mp,
--   have H : (Œª (n : ‚Ñ§), œÜ n * (1 / 2) ^ n) ‚àò coe = Œª (n : ‚Ñï), (1 / 2) ^ n,
--   funext a,
--   simp only [function.comp_app, gpow_coe_nat],
--   suffices : œÜ a = 1,
--   rw [this, one_mul],
--   refl,
--   rw H,
--   exact summable_geometric_two,
-- end

open_locale big_operators

-- example {f : ‚Ñï ‚Üí ‚Ñù} {r : ‚Ñù} [h : r‚â•0] :
--   has_sum f r ‚Üî tendsto (Œªn:‚Ñï, ‚àë i in finset.range n, f i) at_top (ùìù r) := by library_search


lemma has_sum_pow_floor_nat (x : ‚Ñù‚â•0) (r' : ‚Ñù‚â•0) [fact (r' < 1)] (h_nz : r' ‚â† 0)
  : has_sum (Œª n, (coe ‚àò floor_seq_nat x) n * r' ^ n) x :=
begin
  have hinj : function.injective (coe : ‚Ñï ‚Üí ‚Ñ§) := by {apply int.coe_nat_inj},
  have h_range : ‚àÄ n : ‚Ñ§, n ‚àâ set.range (coe : ‚Ñï ‚Üí ‚Ñ§) ‚Üí floor_seq_nat x n = 0, sorry,
  replace h_range : ‚àÄ n : ‚Ñ§, n ‚àâ set.range (coe : ‚Ñï ‚Üí ‚Ñ§) ‚Üí (coe ‚àò floor_seq_nat x) n * r' ^ n = 0,
  sorry,
  apply (@function.injective.has_sum_iff _ _ _ _ _ _ x _ hinj h_range).mp,
  have H : (Œª (n : ‚Ñ§), (coe ‚àò floor_seq_nat x) n * r' ^ n) ‚àò coe =
    (Œª (n : ‚Ñï), (coe ‚àò floor_seq_nat x) n * r' ^ n), sorry,
  rw H,
  apply (nnreal.has_sum_iff_tendsto_nat).mpr,
  have h_calc : ‚àÄ n : ‚Ñï,
  (finset.range n).sum (Œª (i : ‚Ñï), (coe ‚àò floor_seq_nat x) ‚Üëi * r' ^ i) =
    nat_floor (x.1 / r'.1 ^ n) * r' ^ n,
     sorry,
  simp_rw h_calc,
  -- sorry,
  apply converges_floor_nat x r' h_nz,
end

lemma has_sum_pow_floor (r' : ‚Ñù‚â•0) [fact (r' < 1)] (x : ‚Ñù‚â•0) :
  has_sum (Œª n, (coe ‚àò floor_seq x) n * r'.1 ^ n) x :=
begin
  -- apply (has_sum_iff_tendsto_nat_of_nonneg).mp,
  have hinj : function.injective (coe : ‚Ñï ‚Üí ‚Ñ§) := by {apply int.coe_nat_inj},
  have h_range : ‚àÄ n : ‚Ñ§, n ‚àâ set.range (coe : ‚Ñï ‚Üí ‚Ñ§) ‚Üí floor_seq x n = 0, sorry,
  replace h_range : ‚àÄ n : ‚Ñ§, n ‚àâ set.range (coe : ‚Ñï ‚Üí ‚Ñ§) ‚Üí (coe ‚àò floor_seq x) n * r'.1 ^ n = 0,
  sorry,
  apply (@function.injective.has_sum_iff _ _ _ _ _ _ x.1 _ hinj h_range).mp,
  have H : (Œª (n : ‚Ñ§), (coe ‚àò floor_seq x) n * r'.val ^ n) ‚àò coe =
    (Œª (n : ‚Ñï), (coe ‚àò floor_seq x) n * r'.val ^ n), sorry,
  rw H,
  sorry,
  -- apply (nnreal.has_sum_iff_tendsto_nat).mpr,
--   funext a,
--   simp only [function.comp_app, gpow_coe_nat],
--   suffices : œÜ a = 1,
--   rw [this, one_mul],
--   refl,
--   rw H,
  -- dsimp [has_sum],
  -- apply summable.has_sum_iff_tendsto_nat,
end

lemma has_sum_pow_floor_norm (r : ‚Ñù‚â•0)  [fact (r < 1)] (x : ‚Ñù‚â•0) :
  has_sum (Œª n, ‚à• ((coe : ‚Ñ§ ‚Üí ‚Ñù) ‚àò floor_seq x) n ‚à• * r ^ n) x.1:=
begin
  sorry,--will be an easy consequence of the previous one
end

lemma has_sum_pow_floor_norm_nat (r : ‚Ñù‚â•0)  [fact (r < 1)] (x : ‚Ñù‚â•0) :
  has_sum (Œª n, ‚à• ((coe : ‚Ñï ‚Üí ‚Ñù) ‚àò floor_seq_nat x) n ‚à• * r ^ n) x.1:=
begin
  sorry,--will be an easy consequence of the previous one
end

def laurent_measures.to_Rfct (r : ‚Ñù‚â•0) [fact (r < 1)] :
  (laurent_measures r (Fintype.of punit)) ‚Üí (‚Ñ§ ‚Üí ‚Ñù) := Œª ‚ü®F, _‚ü©, coe ‚àò (F punit.star)

noncomputable def Œ∏ (r' : ‚Ñù‚â•0) [fact (r' < 1)] (r : ‚Ñù‚â•0) [fact (r < 1)] :
 (laurent_measures r (Fintype.of punit)) ‚Üí ‚Ñù := Œª F, tsum (Œª n, (F.to_Rfct r n) * (r'.1) ^ n)

lemma Œ∏_surj_on_nonneg (r' : ‚Ñù‚â•0) [fact (r' < 1)] (r : ‚Ñù‚â•0) [fact (r < 1)] (x : ‚Ñù‚â•0) :
  ‚àÉ (F : laurent_measures r (Fintype.of punit)), (Œ∏ r' r F) = x :=
begin
  let F‚ÇÄ : Fintype.of punit ‚Üí ‚Ñ§ ‚Üí ‚Ñ§ := Œª a, (floor_seq x),
  have Hr : ‚àÄ (s : Fintype.of punit), summable (Œª (n : ‚Ñ§), ‚à•F‚ÇÄ s n‚à• * ‚Üër ^ n),
  { intro s,
    apply has_sum.summable (has_sum_pow_floor_norm r x) },
  let F : laurent_measures r (Fintype.of punit) := ‚ü®F‚ÇÄ, Hr‚ü©,
  use F,
  have : summable (Œª (n : ‚Ñ§), (F.to_Rfct r n) * (r'.1) ^ n) :=
    has_sum.summable (has_sum_pow_floor r' x),
  unfold Œ∏,
  unfold tsum,
  rw [dif_pos this],
  exact has_sum.unique (some_spec this) (has_sum_pow_floor r' x),
end

lemma Œ∏_surj_on_nonneg_nat (r' : ‚Ñù‚â•0) [fact (r' < 1)] (r : ‚Ñù‚â•0) [fact (r < 1)] (x : ‚Ñù‚â•0) :
  ‚àÉ (F : laurent_measures r (Fintype.of punit)), (Œ∏ r' r F) = x :=
begin
  let F‚ÇÄ : Fintype.of punit ‚Üí ‚Ñ§ ‚Üí ‚Ñ§ := Œª a m, int.of_nat (floor_seq_nat x m),
  have Hr : ‚àÄ (s : Fintype.of punit), summable (Œª (n : ‚Ñ§), ‚à•F‚ÇÄ s n‚à• * ‚Üër ^ n),
  { intro s,
    apply has_sum.summable (has_sum_pow_floor_norm_nat r x) },
  let F : laurent_measures r (Fintype.of punit) := ‚ü®F‚ÇÄ, Hr‚ü©,
  use F,
  have : summable (Œª (n : ‚Ñ§), (F.to_Rfct r n) * (r'.1) ^ n) := sorry,
    -- has_sum.summable (has_sum_pow_floor_nat r' x),
  unfold Œ∏,
  unfold tsum,
  rw [dif_pos this],
  sorry,
  -- exact has_sum.unique (some_spec this) (has_sum_pow_floor_norm_nat r' x),
end

lemma Œ∏_surj (r' : ‚Ñù‚â•0) [fact (r' < 1)] (r : ‚Ñù‚â•0) [fact (r < 1)] : surjective (Œ∏ r' r) :=
begin
  intro x,
  by_cases hx : 0 ‚â§ x,
  { exact Œ∏_surj_on_nonneg r' r ‚ü®x, hx‚ü©},
  replace hx := le_of_lt (neg_pos_of_neg (lt_of_not_ge hx)),
  obtain ‚ü®F, hF‚ü© := Œ∏_surj_on_nonneg r' r ‚ü®-x,hx‚ü©,
  use -F,
  sorry,--better to do it later, once Œ∏ becomes a comp_haus_blah morphism, in particular linear
end

end thm69_surjective
