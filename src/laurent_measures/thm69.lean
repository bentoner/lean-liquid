-- import for_mathlib.short_exact_sequence
import data.int.interval
import data.finset.nat_antidiagonal
import laurent_measures.aux_lemmas
import laurent_measures.basic
import laurent_measures.theta
import linear_algebra.basic
import order.filter.at_top_bot tactic.linarith


/-
This file introduces the maps
* `Œ∏`, which is the specialization of evaluation-at-Œæ map `œë` from `laurent_measures.theta`
  at `Œæ=1/2`.
* `œï` which corresponds to multiplying a Laurent series in `‚Ñí S = (laurent_measures r S)`
  for `r = 2^(1/p)` by `2T-1`.
* `œà` corresponds to multiplying a Laurent series by `(2T-1)^-1`. It is defined only on series
  vanishing at `1/2`, so that it again takes values in `‚Ñí S`
* The maps `Œò`, `Œ¶` and `Œ®` are the "measurifications" of `Œ∏`, `œï` and `œà`,
  so they are morphisms in the right category.

**The main results are ...**
-/

noncomputable theory

open nnreal theta laurent_measures aux_thm69 finset
open_locale nnreal classical big_operators topological_space

section mem_exact

parameter {p : ‚Ñù‚â•0}

def r : ‚Ñù‚â•0 := (1 / 2) ^ (p:‚Ñù)

variables [fact(0 < p)] [fact (p < 1)]
variable (S : Fintype)

lemma r_half : 1 / 2 < r :=
begin
  calc (1/2:‚Ñù‚â•0)
      = (1/2) ^ (1:‚Ñù) : (rpow_one (1/2:‚Ñù‚â•0)).symm
  ... < r : rpow_lt_rpow_of_exponent_gt (half_pos zero_lt_one) (half_lt_self one_ne_zero) _,
  rw [‚Üê nnreal.coe_one, nnreal.coe_lt_coe],
  exact fact.out _
end

lemma r_pos : 0 < r := lt_of_le_of_lt zero_le' r_half

lemma r_lt_one : r < 1 :=
begin
  refine rpow_lt_one zero_le' (half_lt_self one_ne_zero) _,
  rw nnreal.coe_pos,
  exact fact.out _
end

lemma r_ineq : 0 < (r : ‚Ñù) ‚àß (r : ‚Ñù) < 1:=
by { rw [nnreal.coe_pos, ‚Üê nnreal.coe_one, nnreal.coe_lt_coe], exact ‚ü®r_pos, r_lt_one‚ü© }

local notation `‚Ñ≥` := real_measures p
local notation `‚Ñí` := laurent_measures r

def laurent_measures.d {S}(F : ‚Ñí S) : ‚Ñ§ := (exists_bdd_filtration r_ineq.1 r_ineq.2 F).some

lemma lt_d_eq_zero (F : ‚Ñí S) (s : S) (n : ‚Ñ§) :
  n < F.d ‚Üí F s n = 0 := (exists_bdd_filtration r_ineq.1 r_ineq.2 F).some_spec s n

def Œ∏ : ‚Ñí S ‚Üí ‚Ñ≥ S := œë (1 / 2 : ‚Ñù) r p S

def œï : ‚Ñí S ‚Üí ‚Ñí S :=
Œª F,
{ to_fun := Œª s n, 2 * F s (n - 1) - F s n,
  summable' := Œª s, begin
    let f‚ÇÅ : S ‚Üí ‚Ñ§ ‚Üí ‚Ñ§ := Œª s n, 2 * F s (n - 1) - F s n,
    let g‚ÇÅ : ‚Ñ§ ‚Üí ‚Ñù := Œª n, ‚à• 2 * F s (n - 1) ‚à• * r ^ n + ‚à• F s n ‚à• * r ^ n,
    have Hf_le_g : ‚àÄ b : ‚Ñ§, ‚à• f‚ÇÅ s b ‚à• * r ^ b ‚â§ g‚ÇÅ b,
    { intro b,
      dsimp [f‚ÇÅ, g‚ÇÅ],
      rw ‚Üê add_mul,
      have rpow_pos : 0 < (r : ‚Ñù) ^ b := by { apply zpow_pos_of_pos, rw nnreal.coe_pos,
        exact r_ineq.1, },
      apply (mul_le_mul_right rpow_pos).mpr,
      exact norm_sub_le (2 * F s (b - 1)) (F s b) },
    apply summable_of_nonneg_of_le _ Hf_le_g,
    { apply summable.add,
      have : ‚àÄ b : ‚Ñ§, ‚à• F s (b - 1) ‚à• * r ^ b = r * ‚à• F s (b - 1) ‚à• * r ^ (b - 1),
      { intro b,
        rw [mul_assoc, mul_comm (r : ‚Ñù), mul_assoc, ‚Üê zpow_add_one‚ÇÄ, sub_add_cancel b 1],
        rw [ne.def, nnreal.coe_eq_zero],
        apply ne_of_gt,
        exact r_ineq.1 },
      simp_rw [‚Üê int.norm_cast_real, int.cast_mul, normed_field.norm_mul, int.norm_cast_real,
        mul_assoc],
      apply @summable.mul_left ‚Ñù _ _ _ _ (Œª (b : ‚Ñ§), ‚à•F s (b - 1) ‚à• * ‚Üër ^ b ) (‚à• (2 : ‚Ñ§) ‚à•),
      simp_rw [this, mul_assoc],
      apply @summable.mul_left ‚Ñù _ _ _ _ (Œª (b : ‚Ñ§), ‚à•F s (b - 1)‚à• * ‚Üër ^ (b - 1)) r,
      have h_comp : (Œª (b : ‚Ñ§), ‚à•F s (b - 1)‚à• * ‚Üër ^ (b - 1)) =
        (Œª (b : ‚Ñ§), ‚à•F s b‚à• * ‚Üër ^ b) ‚àò (Œª n, n - 1) := rfl,
      rw h_comp,
      apply summable.comp_injective _ sub_left_injective,
      repeat {apply_instance},
      repeat {exact F.summable s}, },
    { intro b,
      apply mul_nonneg,
      apply norm_nonneg,
      rw ‚Üê nnreal.coe_zpow,
      exact (r ^ b).2 },
  end }

lemma injective_œï (F : ‚Ñí S) (H : œï S F = 0) : F = 0 := sorry

/-
open filter
open_locale filter

lemma aux_coe_nat_int_at_top : map (coe : ‚Ñï ‚Üí ‚Ñ§) at_top = at_top :=
begin
  ext s,
  simp only [set.mem_preimage, mem_at_top_sets, ge_iff_le, filter.mem_map],
  split,
  { rintros ‚ü®a, ha‚ü©,
    use a,
    intros b hb,
    lift b to ‚Ñï,
    apply ha,
    exact_mod_cast hb,
    linarith },
  { rintro ‚ü®a, ha‚ü©,
    use a.nat_abs,
    intros b hb,
    apply ha,
    apply int.le_nat_abs.trans,
    exact_mod_cast hb }
end

lemma aux_int_filter {X : Type*} {f : ‚Ñ§ ‚Üí X} (F : filter X) : tendsto (Œª n : ‚Ñï, f n) at_top F ‚Üî
  tendsto f at_top F :=
begin
  convert_to map (f ‚àò coe) (at_top : filter ‚Ñï) ‚â§ F ‚Üî tendsto f at_top F,
  simpa [‚Üê filter.map_map, aux_coe_nat_int_at_top],
end

lemma map_add_at_top_eq_int (k : ‚Ñ§) :
  map (Œª a : ‚Ñ§, a + k) (at_top : filter ‚Ñ§) = (at_top : filter ‚Ñ§) :=
-- map_at_top_eq_of_gc (Œªa, a - k) k
--   (assume a b h, add_le_add_right h k)
--   (assume a b h, (le_tsub_iff_right h).symm)
--   (assume a h, by rw [tsub_add_cancel_of_le h])

lemma tendsto_add_top_iff_int (f : ‚Ñ§ ‚Üí ‚Ñù) (d : ‚Ñ§) (a : ‚Ñù) : tendsto (Œª n : ‚Ñï, f n) at_top (ùìù a) ‚Üî
  tendsto (Œª n : ‚Ñï, f (n + d)) at_top (ùìù a) :=
begin
  rw aux_int_filter,
  convert_to tendsto f at_top (ùìù a) ‚Üî tendsto (Œª n, f (n + d)) at_top (ùìù a),
  have := @aux_int_filter _ (Œª n, f (n + d)) (ùìù a),
  { simp only at this,
    rwa ‚Üê iff_eq_eq },
  { rw [iff.comm, ‚Üê tendsto_map'_iff, map_add_at_top_eq_int] },
end

-- set_option trace.simp_lemmas true
-/


-- lemma summable_smaller_radius (F : ‚Ñí S) (s : S) :
--   summable (Œª n, (F s n : ‚Ñù) * (1 / 2) ^ n) :=
-- begin
--  suffices abs_sum : summable (Œª n, ‚à• ((F s n) : ‚Ñù) ‚à• * (1 / 2) ^ n),
--   { apply summable_of_summable_norm,
--     simp_rw [normed_field.norm_mul, normed_field.norm_zpow, normed_field.norm_div, real.norm_two,
--       norm_one, abs_sum] },
--     have pos_half : ‚àÄ n : ‚Ñï, 0 ‚â§ ‚à• F s n ‚à• * (1 / 2) ^ n,
--     { intro n,
--       apply mul_nonneg (norm_nonneg (F s n)),
--       simp only [one_div, zero_le_one, inv_nonneg, zero_le_bit0, pow_nonneg] },
--     have half_le_r : ‚àÄ n : ‚Ñï, ‚à• F s n ‚à• * (1 / 2) ^ n ‚â§ ‚à• F s n ‚à• * r ^ n,
--     { intro n,
--       apply monotone_mul_left_of_nonneg (norm_nonneg (F s n)),
--       apply pow_le_pow_of_le_left,
--       simp only [one_div, zero_le_one, inv_nonneg, zero_le_bit0],
--       exact le_of_lt r_half },
--     have h_nat_half : summable (Œª n : ‚Ñï, ‚à• F s n ‚à• * (1 / 2 : ‚Ñù‚â•0) ^ n) :=
--       summable_of_nonneg_of_le pos_half half_le_r ((int.summable_iff_on_nat F.d _).mp (F.2 s)),
--     apply (int.summable_iff_on_nat F.d _).mpr h_nat_half,
--     all_goals {apply lt_d_eq_zero},
-- end

lemma Œ∏_œï_complex (F : ‚Ñí S) : (Œ∏ S ‚àò œï S) F = 0 :=
begin
  funext s,
  convert_to ‚àë' (n : ‚Ñ§), ((2 * F s (n - 1) - F s n) : ‚Ñù) * (1 / 2) ^ n = 0,
  { apply tsum_congr,
    intro b,
    rw ‚Üê inv_eq_one_div,
    apply (mul_left_inj' (@zpow_ne_zero ‚Ñù _ _ b (inv_ne_zero two_ne_zero))).mpr,
    have : (2 : ‚Ñù) * (F s (b - 1)) = ((2 : ‚Ñ§) * (F s (b - 1))),
    { rw [‚Üê int.cast_one, int.cast_bit0] },
    rw [this, ‚Üê int.cast_mul, ‚Üê int.cast_sub],
    refl },
  -- have fae := @summable_smaller_radius _ _ F.d (F.2 s) (lt_d_eq_zero _ _ _) r_half,
  have h_pos : has_sum (Œª n, ((2 * F s (n - 1)) : ‚Ñù) * (1 / 2) ^ n)
    (@summable_smaller_radius _ _ F.d (F.2 s) (lt_d_eq_zero _ _ _) r_half).some,
  { let e : ‚Ñ§ ‚âÉ ‚Ñ§ := ‚ü®Œª n : ‚Ñ§, n - 1, Œª n, n + 1, by {intro, simp}, by {intro, simp}‚ü©,
    convert (equiv.has_sum_iff e).mpr (@summable_smaller_radius _ _ F.d (F.2 s)
      (lt_d_eq_zero _ _ _) r_half).some_spec using 1,
    ext n,
    have div_half : ‚àÄ b : ‚Ñ§, (1 / 2 : ‚Ñù) ^ b * (2 : ‚Ñù) = (1 / 2) ^ (b - 1),
    { intro b,
      rw [‚Üê inv_eq_one_div, @zpow_sub_one‚ÇÄ ‚Ñù _ _ (inv_ne_zero two_ne_zero) b],
      apply (mul_right_inj' (@zpow_ne_zero ‚Ñù _ _ b (inv_ne_zero two_ne_zero))).mpr,
      exact (inv_inv‚ÇÄ 2).symm },
    rw [mul_comm, ‚Üê mul_assoc, div_half, mul_comm],
    refl, },
  simp_rw [sub_mul],
  rw [tsum_sub h_pos.summable, sub_eq_zero, h_pos.tsum_eq],
  exacts [(@summable_smaller_radius _ _ F.d (F.2 s)
    (lt_d_eq_zero _ _ _) r_half).some_spec.tsum_eq.symm,
    (@summable_smaller_radius _ _ F.d (F.2 s) (lt_d_eq_zero _ _ _) r_half)],
end


lemma tsum_reindex (F : ‚Ñí S) (N : ‚Ñ§) (s : S) : ‚àë' (l : ‚Ñï), (F s (N + l) : ‚Ñù) * (2 ^ l)‚Åª¬π =
 2 ^ N * ‚àë' (m : {m : ‚Ñ§ // N ‚â§ m}), (F s m : ‚Ñù) * (2 ^ m.1)‚Åª¬π :=
begin
  have h_sum := @summable_smaller_radius _ _ F.d (F.2 s) (lt_d_eq_zero _ _ _) r_half,
  simp_rw [one_div, inv_zpow'] at h_sum,
  have h_shift := int_tsum_shift (Œª n, (F s n : ‚Ñù) * (2 ^ (-n))) N,
  simp only at h_shift,
  simp_rw [subtype.val_eq_coe, ‚Üê zpow_neg‚ÇÄ],
  rw [‚Üê h_shift, ‚Üê _root_.tsum_mul_left, tsum_congr],
  intro n,
  nth_rewrite_rhs 0 [mul_comm],
  rw [mul_assoc, ‚Üê (zpow_add‚ÇÄ (@two_ne_zero ‚Ñù _ _)), neg_add_rev, neg_add_cancel_comm, zpow_neg‚ÇÄ,
    zpow_coe_nat, add_comm],
end

def œà (F : ‚Ñí S) (hF : Œ∏ S F = 0) : ‚Ñí S :=
begin
  let b : S ‚Üí ‚Ñ§ ‚Üí ‚Ñ§ := Œª s n,
    if hn : n - F.d ‚â• 0 then - ‚àë l in range ((int.eq_coe_of_zero_le hn).some.succ),
      (F s (n -l) * (2 ^ l))
    else 0,
  use b,
  intro s,
  have h_Œ∏ : ‚àÄ n : ‚Ñ§, ‚à• b s n ‚à• * r ^ (n : ‚Ñ§)  =
    (1 / 2) * ‚à• tsum (Œª i : ‚Ñï, ((F s (n + 1 + i)) : ‚Ñù) * (1 / 2) ^ i) ‚à• * r ^ (n : ‚Ñ§),
  { dsimp only [b],
    intro n,
    simp only [one_div, sub_nonneg, ge_iff_le, inv_pow‚ÇÄ, mul_eq_mul_right_iff],
    apply or.intro_left,
    by_cases h_event : n - F.d < 0,
    { replace h_event := not_le_of_gt h_event,
      rw sub_nonneg at h_event,
      rw [dif_neg h_event, tsum_reindex],
      simp only [subtype.val_eq_coe, norm_zero],
      suffices : ‚àë' (m : {m // n + 1 ‚â§ m}), (F s ‚Üëm : ‚Ñù) * (2 ^ (- ‚Üëm)) =
        ‚àë' (m : ‚Ñ§), (F s m) * (2 ^ (-m)),
      { simp_rw [‚Üê zpow_neg‚ÇÄ],
        rw this,
        simp only [Œ∏, œë, one_div, inv_zpow'] at hF,
        replace hF := congr_fun hF s,
        rw real_measures.zero_apply at hF,
        simp only [zero_eq_mul, mul_eq_zero, norm_eq_zero],
        repeat {apply or.intro_right},
        apply hF, },
      { rw tsum_eq_tsum_of_has_sum_iff_has_sum,
        intro z,
        apply @has_sum_subtype_iff_of_support_subset _ _ _ _ (Œª m, (F s m : ‚Ñù) * (2 ^ (- m))) z
          {m : ‚Ñ§ | n + 1 ‚â§ m},
        rw function.support_subset_iff',
        intros a ha,
        simp only [int.cast_eq_zero, inv_eq_zero, mul_eq_zero],
        apply or.intro_left,
        simp only [not_le, set.mem_set_of_eq, int.lt_add_one_iff] at ha,
        apply lt_d_eq_zero,
        rw ‚Üê sub_nonneg at h_event,
        replace h_event := sub_neg.mp (not_le.mp h_event),
        exact lt_of_le_of_lt ha h_event,
        } },
    { rw not_lt at h_event,
      let m := (int.eq_coe_of_zero_le h_event).some,
      rw sub_nonneg at h_event,
      rw dif_pos h_event,
      simp_rw [‚Üê int.norm_cast_real, int.cast_neg, int.cast_sum, int.cast_mul, int.cast_pow,
        int.cast_two],
      rw ‚Üê sub_nonneg at h_event,
      rw [sum_range_sum_Icc (coe ‚àò (F s)) n F.d h_event,
        sum_Icc_sum_tail (F s) n F.d _ (lt_d_eq_zero S F s) h_event],
      { rw [‚Üê (abs_eq_self.mpr (inv_nonneg.mpr (@zero_le_two ‚Ñù _))), ‚Üê real.norm_eq_abs,
          ‚Üê normed_field.norm_mul, real.norm_eq_abs, real.norm_eq_abs, abs_eq_abs,
          ‚Üê (sub_add_cancel n 1), (sub_eq_add_neg n 1), (add_assoc n _), (add_comm n _),
          (add_assoc (-1 : ‚Ñ§) _ _), (add_comm 1 n), zpow_add‚ÇÄ (@two_ne_zero ‚Ñù _ _),
          ‚Üê (add_assoc (-1 : ‚Ñ§) _ _), neg_add_cancel_comm, ‚Üê int.succ, mul_assoc, zpow_neg‚ÇÄ,
          zpow_one],
        apply or.intro_left,
        rw ‚Üê tsum_reindex S F n.succ s },
      { simp only [Œ∏, œë, one_div] at hF,
        replace hF := congr_fun hF s,
        simp only [real_measures.zero_apply, inv_eq_one_div] at hF,
        simp_rw [‚Üê inv_zpow‚ÇÄ, inv_eq_one_div],
        exact (summable.has_sum_iff (@summable_smaller_radius _ _ F.d (F.2 s) (lt_d_eq_zero _ _ _)
          r_half)).mpr hF }}},
  have : ‚àÄ (n : ‚Ñ§), n < F.d ‚Üí ‚à•‚àë' (i : ‚Ñï), (F s (n + 1 + i) : ‚Ñù) * (1 / 2) ^ i‚à• = 0,
  { intros n hn,
    replace hn := not_le_of_gt (sub_neg.mpr hn),
    specialize h_Œ∏ n,
    simp only [mul_eq_mul_right_iff, zpow_ne_zero n (nnreal.coe_ne_zero.mpr (ne_of_lt r_pos).symm),
      or_false] at h_Œ∏,
    convert_to 1 / 2 * ‚à•‚àë' (i : ‚Ñï), (F s (n + 1 + i) : ‚Ñù) * (1 / 2) ^ i‚à• = 0 using 0,
    simp only [one_div, mul_eq_zero, inv_eq_zero, bit0_eq_zero, one_ne_zero, false_or],
    rw [‚Üê h_Œ∏, norm_eq_zero],
    dsimp [b],
    rw dif_neg hn },
  refine (summable_congr h_Œ∏).mpr
    (aux_thm69.summable_convolution r_pos r_half (F s) F.d (F.2 s) (lt_d_eq_zero S F s)
    this),
end

theorem Œ∏_œï_exact (F : ‚Ñí S) (hF : Œ∏ S F = 0) : ‚àÉ G, œï S G = F :=
begin
  use œà S F hF,
  ext s n,
  dsimp [œï, œà],
  simp,
  by_cases hn : F.d ‚â§ n - 1,
  { --have hx' := hx.trans (sub_le_self x zero_le_one),
    rw [dif_pos hn, dif_pos $ hn.trans $ sub_le_self n zero_le_one, neg_eq_neg_one_mul, ‚Üê mul_assoc,
      mul_comm (2 : ‚Ñ§) (-1 : ‚Ñ§), mul_assoc, mul_sum, ‚Üê neg_eq_neg_one_mul,
      neg_sub_neg, finset.sum_range_succ', sub_eq_iff_eq_add'],
    simp only [pow_zero, sub_zero, mul_one, int.coe_nat_zero, int.coe_nat_add, int.coe_nat_one,
      add_comm _ (1:‚Ñ§), ‚Üê sub_sub n 1],
    congr' 1,
    refine finset.sum_congr _ _,
    { congr' 1,
      apply int.coe_nat_inj,
      rw ‚Üê sub_nonneg at hn,
      have := (int.eq_coe_of_zero_le hn).some_spec,
      simp only [int.coe_nat_succ, ‚Üê sub_eq_iff_eq_add],
      convert this using 1,
      transitivity n - F.d - 1,
      { congr' 1,
        have : 0 ‚â§ n - F.d, { linarith },
        symmetry, exact (int.eq_coe_of_zero_le this).some_spec },
      { ring_nf } },
    { intros i hi, rw pow_succ, ring_nf, }, },
  { rw [dif_neg hn, mul_zero, zero_sub],
    by_cases hn' : F.d ‚â§ n,
    { rw [dif_pos hn', neg_neg],
      have hn'' : F.d = n,
      -- rw not_le at hn,
      apply eq_of_le_of_not_lt hn',
      rw not_lt,
      exact int.le_of_sub_one_lt (not_le.mp hn),
      -- rw neg_neg,
      sorry,

    },
    { rw dif_neg hn',
      exact (lt_d_eq_zero S F s n (not_le.mp hn')).symm }}
end

end mem_exact

-- def Œò : comphaus_filtered_pseudo_normed_group_hom (laurent_measures r S) (‚Ñ≥ p S) :=
--   { to_fun := Œ∏ p r S,
--     bound' := Œ∏_bound p r S,
--     continuous' := , -- [FAE] I guess that this is Prop 7.2 (4) of `Analytic.pdf`
--     -- .. to_add_hom_meas_Œ∏ Œæ r S p,
--     map_add' := (to_add_hom_Œ∏ p r S).2,
--     map_zero' :=  }


-- lemma chain_complex_thm69 (F : laurent_measures r S) : Œò p r S (ùëì ‚Ä¢ F) = 0 :=
-- begin
--   funext s,
--   -- simp only [real_measures.zero_apply],
--   -- dsimp [Œò],
--   -- dsimp [to_meas_Œ∏],
--   -- dsimp [Œ∏],
--   -- dsimp [has_scalar],
--   -- rw pi.has_scalar,
-- end


-- From here onwards, the bundled version
-- variable [imCHFPNG : has_images (CompHausFiltPseuNormGrp.{u})]
-- variable [zerCHFPNG : has_zero_morphisms (CompHausFiltPseuNormGrp.{u})]
-- variable [kerCHFPNG : has_kernels (CompHausFiltPseuNormGrp.{u})]



-- def SES_thm69 (S : Fintype) : @category_theory.short_exact_sequence CompHausFiltPseuNormGrp.{u} _
--   imCHFPNG zerCHFPNG kerCHFPNG :=
-- { fst := bundled.of (laurent_measures r S),
--   snd := bundled.of (laurent_measures r S),
--   trd := bundled.of (‚Ñ≥ p S),
--   f :=
--   begin
--     let œÜ := Œª (F : laurent_measures r S), (ker_Œ∏‚ÇÇ_generator r) ‚Ä¢ F,
--     use œÜ,-- [FAE] These four are the properties that the scalar multiplication by a measure on the
--     --singleton (as endomorphism of S-measures) must satisfy
--   end,
--   g := @Œò r _ S p _ _ _,
--   mono' :=
--   epi' :=
--   exact' := }
-- end SES_thm69
