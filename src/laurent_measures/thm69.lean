import category_theory.Fintype
import data.real.nnreal
import laurent_measures.basic
import topology.basic
import order.filter.at_top_bot
import analysis.special_functions.exp_log


noncomputable theory

open set real (log) finset filter
open_locale topological_space nnreal big_operators filter classical

namespace thm71

section surjectivity

parameter (x : ‚Ñù‚â•0)
variables (y : ‚Ñù‚â•0) --(N : ‚Ñï)

def N : ‚Ñï := ‚åà(x‚Åª¬π : ‚Ñù)‚åâ‚Çä

lemma N_inv_le : x ‚â• 1 / N := sorry


--The minimal integer such that the corresponding coefficient in the Laurent series for y is ‚â† 0
def deg : ‚Ñ§ := ‚åä(log y) / (log x)‚åã

lemma xpow_le : x ^ (deg y) ‚â§ y := sorry

lemma deg_is_min : ‚àÄ k < deg y, x ^ k > y := sorry

def a (m : ‚Ñ§) := ‚åä (y / x ^ m : ‚Ñù)‚åã‚Çä

lemma a_bdd : a y (deg y) < N  := sorry

lemma y_mul_xpow_le : ((a y (deg y) : ‚Ñù‚â•0) * x ^ (deg y)) ‚â§ y := sorry

def z (m : ‚Ñ§) := y - (a y m) * x ^ m

/--Given the bound L (eventually L = deg y), `step m` is the pair whose first element is the
(m+L)-th coefficient
-/
def step (L : ‚Ñ§) (m : ‚Ñï) : ‚Ñï √ó ‚Ñù‚â•0 := (a y (L + m), z y (L + m))

noncomputable def A : ‚Ñï ‚Üí ‚Ñï √ó ‚Ñù‚â•0
| 0         := step y (deg y) 0
| (m + 1)   := step (A m).2 (deg y) (m + 1)--let z' := (A m).2, c := n y + m + 1 in (a z' c, z z' c)

lemma deg_increasing (k : ‚Ñï) : deg (A y (k + 1)).2 > deg (A y k).2 := sorry

def coeff : ‚Ñ§ ‚Üí ‚Ñï := Œª k, if k < deg y then 0 else (A y (k + deg y ).to_nat).1

lemma surj_on_nonneg : has_sum (Œª k : ‚Ñ§, (coeff y k : ‚Ñù‚â•0) * x ^ k ) y := sorry

end surjectivity
end thm71

section fae_surjectivity

parameters (Œæ : ‚Ñù) (h_pos : 0 < Œæ) (h_small : Œæ < 1)
variable (x : ‚Ñù)

noncomputable def y : ‚Ñï ‚Üí ‚Ñù
| 0         := x
| (n + 1)   := (y n) - (‚åä(((y n) / Œæ ^ n) : ‚Ñù)‚åã : ‚Ñù) * Œæ ^ n

lemma finite_sum (n : ‚Ñï) : (y x (n + 1) : ‚Ñù) =
  x - ‚àë i in range(n + 1),  (‚åä(((y x i) / Œæ ^ i) : ‚Ñù)‚åã : ‚Ñù) * (Œæ ^ i) :=
begin
  induction n with n h_ind,
  { rw [zero_add, range_one, sum_singleton],-- ‚Üê coe_pow, ‚Üê coe_mul, ‚Üê nnreal.coe_sub,
    -- nnreal.eq_iff],
   refl },
  { replace h_ind : (x - (y x (n + 1)) : ‚Ñù) =
    ‚àë i in range(n + 1),  (‚åä(y x i / Œæ ^ i : ‚Ñù)‚åã : ‚Ñù) * Œæ ^ i := by {rw [sub_eq_iff_eq_add,
      ‚Üê sub_eq_iff_eq_add', h_ind] },
    nth_rewrite_rhs 2 [nat.succ_eq_add_one, ‚Üê nat.succ_eq_add_one, range_succ],
    rw [sum_insert, nat.succ_eq_add_one, ‚Üê sub_sub, ‚Üê h_ind, sub_sub, add_sub, add_comm _ x,
      ‚Üê add_sub, ‚Üê sub_sub, sub_self, zero_sub, neg_sub],
    refl,
    simp },
end


lemma limit (Œæ : ‚Ñù) (h_pos : 0 < Œæ) (h_small : Œæ < 1) : tendsto (Œª n, y x n) at_top (ùìù 0) :=
begin
  have h_lt : ‚àÄ n, n ‚â• 1 ‚Üí (y x n / Œæ ^ n) - 1 < ‚åä(y x n / Œæ ^ n)‚åã := (Œª n hn, sub_one_lt_floor _),
  have h_le : ‚àÄ n, n ‚â• 1 ‚Üí (‚åä(y x n / Œæ ^ n)‚åã : ‚Ñù) ‚â§ (y x n / Œæ ^ n) := (Œª n hn, floor_le _),
  replace h_lt : ‚àÄ n, n ‚â• 1 ‚Üí (y x n - Œæ ^ n) < ‚åä(y x n / Œæ ^ n)‚åã * Œæ ^ n,
  have h_one : ‚àÄ n : ‚Ñï, 0 < Œæ ^ n := (Œª n, pow_pos h_pos n),
  intros n hn,
  calc y x n -  Œæ ^ n = (y x n * Œæ ^ n / Œæ ^ n  - Œæ ^ n) : by {rw [mul_div_cancel _ (ne_of_lt (h_one n)).symm]}
                  ... = (y x n / Œæ ^ n * Œæ ^ n  - Œæ ^ n) : by {rw [mul_div_assoc, ‚Üê div_mul_eq_mul_div_comm]}
                  ... = ((y x n / Œæ ^ n) - 1 ) * Œæ ^ n : by {nth_rewrite_lhs 2 [‚Üê one_mul (Œæ ^ n)], rw ‚Üê sub_mul}
                  ... < ‚åä(y x n / Œæ ^ n)‚åã * Œæ ^ n : (mul_lt_mul_right (h_one n)).mpr (h_lt n hn),
  sorry,



end



end fae_surjectivity
