-- import for_mathlib.short_exact_sequence
import laurent_measures.basic
import laurent_measures.theta
import linear_algebra.basic


namespace thm_69

-- open category_theory category_theory.limits
open theta laurent_measures
open_locale nnreal classical big_operators


-- universe u
variables (p : ‚Ñù‚â•0) [fact (0 < p)] [fact (p < 1)]
variables (r : ‚Ñù‚â•0) [fact (0 < r)] [fact (r < 1)]
-- variables (r : ‚Ñù‚â•0) [fact ((1 / 2 : ‚Ñù) ^ p.1 = r)]

lemma r_pos : 0 < r ‚àß r < 1 := sorry

lemma r_one : r < 1 := sorry

lemma half_ineq : (1 / 2 : ‚Ñù) < r :=
begin
  sorry,
end

noncomputable theory

section ker_theta_half

example (a : ‚Ñ§) : ‚à• (2 : ‚Ñù) * a ‚à• = 2 * ‚à• a ‚à• :=
begin
  rw normed_field.norm_mul,
  rw real.norm_two,
  field_simp,
  exact int.norm_cast_real a,
  -- simp only [normed_field.norm_mul, mul_eq_mul_left_iff, or_false, bit0_eq_zero, one_ne_zero, real.norm_two],
end

def œï : (laurent_measures r (Fintype.of punit)) ‚Üí (laurent_measures r (Fintype.of punit)) :=
begin
  rintro ‚ü®f,hF‚ü©,
  let f‚ÇÅ : (Fintype.of punit) ‚Üí ‚Ñ§ ‚Üí ‚Ñ§ := Œª s n, 2* f s (n - 1) - f s n,
  use f‚ÇÅ,
  intro s,
  let g‚ÇÅ : ‚Ñ§ ‚Üí ‚Ñù := Œª n, ‚à• 2 * f s (n - 1) ‚à• * r ^ n + ‚à• f s n ‚à• * r ^ n,
  have Hf_le_g : ‚àÄ b : ‚Ñ§, ‚à• f‚ÇÅ s b ‚à• * r ^ b ‚â§ g‚ÇÅ b,
  { intro b,
    dsimp [f‚ÇÅ, g‚ÇÅ],
    rw ‚Üê add_mul,
    have rpow_pos : 0 < (r : ‚Ñù) ^ b := by { apply zpow_pos_of_pos, rw nnreal.coe_pos,
      exact fact.out _ },
    apply (mul_le_mul_right rpow_pos).mpr,
    exact norm_sub_le (2 * f s (b - 1)) (f s b) },
  apply summable_of_nonneg_of_le _ Hf_le_g,
  { apply summable.add,
    have : ‚àÄ b : ‚Ñ§, ‚à• f s (b - 1) ‚à• * r ^ b = r * ‚à• f s (b - 1) ‚à• * r ^ (b - 1),
    { intro b,
      nth_rewrite_rhs 0 mul_assoc,
      nth_rewrite_rhs 0 mul_comm,
      nth_rewrite_rhs 0 mul_assoc,
      rw [‚Üê zpow_add_one‚ÇÄ, sub_add_cancel b 1],
      rw [ne.def, nnreal.coe_eq_zero],
      apply ne_of_gt,
      exact fact.out _ },
    simp_rw [‚Üê int.norm_cast_real, int.cast_mul, normed_field.norm_mul, int.norm_cast_real,
      mul_assoc],
    apply @summable.mul_left ‚Ñù _ _ _ _ (Œª (b : ‚Ñ§), ‚à•f s (b - 1) ‚à• * ‚Üër ^ b ) (‚à• (2 : ‚Ñ§) ‚à•),
    simp_rw [this, mul_assoc],
    apply @summable.mul_left ‚Ñù _ _ _ _ (Œª (b : ‚Ñ§), ‚à•f s (b - 1)‚à• * ‚Üër ^ (b - 1)) r,
    have h_comp : (Œª (b : ‚Ñ§), ‚à•f s (b - 1)‚à• * ‚Üër ^ (b - 1)) =
      (Œª (b : ‚Ñ§), ‚à•f s b‚à• * ‚Üër ^ b) ‚àò (Œª n, n - 1) := rfl,
    rw h_comp,
    apply summable.comp_injective _ sub_left_injective,
    repeat {apply_instance},
    repeat {specialize hF s, exact hF}, },
  { intro b,
    apply mul_nonneg,
    apply norm_nonneg,
    rw ‚Üê nnreal.coe_zpow,
    exact (r ^ b).2 },
end

def Œ∏‚Çó : (laurent_measures r (Fintype.of punit)) ‚Üí‚Çó[‚Ñ§] ‚Ñù :=
{ to_fun := Œª F, tsum (Œª n, (F punit.star n) * (1 / 2 : ‚Ñù) ^ n),
  map_add' :=
   begin
    intros F G,
    rw ‚Üê tsum_add,
    apply tsum_congr,
    intro m,
    rw [‚Üê add_mul, mul_eq_mul_right_iff],
    apply or.intro_left,
    rw [‚Üê int.cast_add, int.cast_inj],
    apply laurent_measures.add_apply,
    sorry, sorry,
  end,
  map_smul' := sorry }

--for MATHLIB?
variables [Œ± : Type*] [add_group Œ±] [topological_space Œ±] [has_continuous_add Œ±] [has_sub Œ±]

-- lemma has_sum.int_even_add_odd {f : ‚Ñ§ ‚Üí Œ±} {a b : Œ±} (he : has_sum (Œª k, f (2 * k)) a)
--   (ho : has_sum (Œª k, f (2 * k + 1)) b) :
--   has_sum f (a + b) :=
-- begin
--   have := mul_right_injective‚ÇÄ (@two_ne_zero ‚Ñ§ _ _),
--   replace he := this.has_sum_range_iff.2 he,
--   replace ho := ((add_left_injective 1).comp this).has_sum_range_iff.2 ho,
--   refine he.add_is_compl _ ho,
--   simpa [(‚àò)] using int.is_compl_even_odd,
-- end
--

lemma Œ∏_œï_complex (F : laurent_measures r (Fintype.of punit)) : (Œ∏‚Çó r ‚àò œï r) F = 0 :=
begin
  rcases F with ‚ü®f, hf‚ü©,
  convert_to ‚àë' (n : ‚Ñ§), ((2 * f punit.star (n - 1) - f punit.star n) : ‚Ñù) * (1 / 2) ^ n = 0,
  { apply tsum_congr,
    intro b,
    rw ‚Üê inv_eq_one_div,
    apply (mul_left_inj' (@zpow_ne_zero ‚Ñù _ _ b (inv_ne_zero two_ne_zero))).mpr,
    have : (2 : ‚Ñù) * (f punit.star (b - 1)) = ((2 : ‚Ñ§) * (f punit.star (b -1))) := by {rw [‚Üê int.cast_one, int.cast_bit0] },
    rw [this, ‚Üê int.cast_mul, ‚Üê int.cast_sub],
    refl },
  have h_neg : summable (Œª n, ((f punit.star n) : ‚Ñù) * (1 / 2) ^ n),
  { specialize hf punit.star,
    apply summable_of_summable_norm,
    --`[FAE]` if the sum were over ‚Ñï, life would be easy
    sorry},
  have h_pos : has_sum (Œª n, ((2 * f punit.star (n - 1)) : ‚Ñù) * (1 / 2) ^ n) h_neg.some,
  { have div_half : ‚àÄ b : ‚Ñ§, (1 / 2 : ‚Ñù) ^ b * (2 : ‚Ñù) = (1 / 2) ^ ( b - 1),
    { intro b,
      rw [‚Üê inv_eq_one_div, @zpow_sub_one‚ÇÄ ‚Ñù _ _ (inv_ne_zero two_ne_zero) b],
      apply (mul_right_inj' (@zpow_ne_zero ‚Ñù _ _ b (inv_ne_zero two_ne_zero))).mpr,
      exact (inv_inv‚ÇÄ 2).symm },
    have h_comp : (Œª (b : ‚Ñ§), ((f punit.star (b - 1)) : ‚Ñù ) * (1 / 2) ^ (b - 1)) =
      (Œª (b : ‚Ñ§), ((f punit.star b) : ‚Ñù) * (1 / 2) ^ b) ‚àò (Œª n, n - 1) := rfl,
    simp_rw [mul_comm, ‚Üê mul_assoc, div_half, mul_comm, h_comp],
    let e : ‚Ñ§ ‚âÉ ‚Ñ§ := ‚ü®Œª n : ‚Ñ§, n - 1, Œª n, n + 1, by {intro, simp}, by {intro, simp}‚ü©,
    apply (equiv.has_sum_iff e).mpr,
    exact h_neg.some_spec },
  simp_rw [sub_mul, tsum_sub h_pos.summable h_neg, sub_eq_zero],
  --'[FAE]' It should now just be a matter of combining h_neg with h_pos (which says that the two sums coincide, so their difference is 0)
  -- have foo := h_pos.tsum_eq,
  -- have boo := h_neg.has_sum.tsum_eq,
  -- have too := h_pos.unique foo,
  -- rw foo,

  -- apply boo.unique,
  -- apply tsum.eq,
  -- exact boo,

  -- have := tsum_sub h_pos h_neg,
  -- rw this,
  -- simp_rw ‚Üê sub_mul at this,
  -- apply tsum_sub (Œª s n, 2 * f s (n - 1)) (Œª s n, f s n),
  -- simp [pi.has_sub],
  sorry,

end


lemma Œ∏_œï_exact (F : laurent_measures r (Fintype.of punit)) (hF : Œ∏‚Çó r F = 0) :
  ‚àÉ G, œï r G = F := sorry


end ker_theta_half

section SES_thm69

local notation `‚Ñ≥` := real_measures

variable (S : Fintype)
-- variables (p : ‚Ñù‚â•0) [fact (0 < p)] [fact (p ‚â§ 1)] [fact ((1/2 : ‚Ñù) ^ (p : ‚Ñù) = r)]

include r

/-- This `Œ∏‚ÇÇ` is the "measurification" of the map `Œ∏‚Çó` of
Theorem 6.9. Thus, `to_meas_Œ∏` is the map inducing the isomorphism of Theorem 6.9 (2)-/
def Œ∏‚ÇÇ : laurent_measures r S ‚Üí ‚Ñ≥ p S :=
Œª F s, Œ∏‚Çó r ‚ü®(Œª _, F s), (Œª _, F.2 s)‚ü©

lemma Œ∏‚ÇÇ_zero :
 (Œ∏‚ÇÇ p r S (0 : laurent_measures r S)) = 0 := sorry

lemma Œ∏‚ÇÇ_add (F G : laurent_measures r S) :
 (Œ∏‚ÇÇ p r S (F + G)) = (Œ∏‚ÇÇ p r S F) + (Œ∏‚ÇÇ p r S G) := sorry

/--This `lemma to_meas_Œ∏_bound` is precisely Prop 7.2 (3) of `Analytic.pdf`-/
lemma Œ∏‚ÇÇ_bound : ‚àÉ (C : ‚Ñù‚â•0), ‚àÄ (c : ‚Ñù‚â•0) (F : laurent_measures r S),
  ‚à• F ‚à• ‚â§ c ‚Üí ‚à• Œ∏‚ÇÇ p r S F ‚à•‚Çä ‚â§ C * c := sorry

def to_add_hom_Œ∏‚ÇÇ : add_hom (laurent_measures r S) (‚Ñ≥ p S) :=
add_monoid_hom.mk' (Œª F, Œ∏‚ÇÇ p r S F)
begin
    intros a b,
    have := Œ∏‚ÇÇ_add p r S a b,
    exact this,
  end

def Œò : comphaus_filtered_pseudo_normed_group_hom (laurent_measures r S) (‚Ñ≥ p S) :=
  { to_fun := Œ∏‚ÇÇ p r S,
    bound' := Œ∏‚ÇÇ_bound p r S,
    continuous' := sorry, -- [FAE] I guess that this is Prop 7.2 (4) of `Analytic.pdf`
    -- .. to_add_hom_meas_Œ∏ Œæ r S p,
    map_add' := (to_add_hom_Œ∏‚ÇÇ p r S).2,
    map_zero' := sorry }


-- lemma chain_complex_thm69 (F : laurent_measures r S) : Œò p r S (ùëì ‚Ä¢ F) = 0 :=
-- begin
--   funext s,
--   sorry,
--   -- simp only [real_measures.zero_apply],
--   -- dsimp [Œò],
--   -- dsimp [to_meas_Œ∏],
--   -- dsimp [Œ∏],
--   -- dsimp [has_scalar],
--   -- rw pi.has_scalar,
-- end


/-
From here onwards, the bundled version
-/
-- variable [imCHFPNG : has_images (CompHausFiltPseuNormGrp.{u})]
-- variable [zerCHFPNG : has_zero_morphisms (CompHausFiltPseuNormGrp.{u})]
-- variable [kerCHFPNG : has_kernels (CompHausFiltPseuNormGrp.{u})]



-- def SES_thm69 (S : Fintype) : @category_theory.short_exact_sequence CompHausFiltPseuNormGrp.{u} _
--   imCHFPNG zerCHFPNG kerCHFPNG :=
-- { fst := bundled.of (laurent_measures r S),
--   snd := bundled.of (laurent_measures r S),
--   trd := bundled.of (‚Ñ≥ p S),
--   f :=
--   begin
--     let œÜ := Œª (F : laurent_measures r S), (ker_Œ∏‚ÇÇ_generator r) ‚Ä¢ F,
--     use œÜ,
--     sorry,
--     sorry,
--     sorry,
--     sorry,-- [FAE] These four are the properties that the scalar multiplication by a measure on the
--     --singleton (as endomorphism of S-measures) must satisfy
--   end,
--   g := @Œò r _ S p _ _ _,
--   mono' := sorry,
--   epi' := sorry,
--   exact' := sorry }

end SES_thm69

end thm_69
