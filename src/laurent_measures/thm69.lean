import category_theory.Fintype
import data.real.nnreal
import laurent_measures.basic
import order.filter.at_top_bot

/-
We define the map Œ∏ : (laurent_measures r `singleton`) ‚Üí ‚Ñù and we show it is surjective.
TO DO :
* Prove `lemma has_sum_pow_floor` and deduce `lemma has_sum_pow_floor_norm` from it
* Upgrade Œ∏ to a `comp_haus_blah` morphism
* Finish the proof of surjectivity for negative reals using linearity
-/

open filter function classical
open_locale topological_space classical nnreal

section thm69_surjective

lemma converges_floor (x : ‚Ñù‚â•0) :
  tendsto (Œªn : ‚Ñï, (floor (2 ^ n * x : ‚Ñù) / (2 ^ n) : ‚Ñù)) at_top (ùìù x) :=
begin
  have two_pow_pos : ‚àÄ n : ‚Ñï,  0 < (2 ^ n : ‚Ñù) := by simp only
    [forall_const, zero_lt_bit0, pow_pos, zero_lt_one],
  have h‚ÇÅ : ‚àÄ n : ‚Ñï, (x.1 - 1 / 2 ^ n) ‚â§ (floor (2 ^ n * x : ‚Ñù) / (2 ^ n) : ‚Ñù),
  { intro n,
    have := (div_le_div_right $ two_pow_pos n).mpr (le_of_lt (sub_one_lt_floor (2 ^ n * x.1))),
    calc (x.1 - 1 / 2 ^ n) = ( 2 ^ n * x.1 - 1)/ 2 ^ n : by field_simp[mul_comm]
                       ... ‚â§ (floor (2 ^ n * x.1) / (2 ^ n)) : this },
  have HH : tendsto (Œªn : ‚Ñï, (x.1 - 1 / 2 ^ n)) at_top (ùìù x),
  { suffices : tendsto (Œªn : ‚Ñï, (1 / 2 ^ n : ‚Ñù)) at_top (ùìù 0),
    { have h_geom := tendsto.mul_const (-1 : ‚Ñù) this,
      replace h_geom := tendsto.const_add x.1 h_geom,
      simp_rw [pi.add_apply, zero_mul, add_zero, mul_neg_one] at h_geom,
      exact h_geom },
    have abs_half : abs ((1:‚Ñù)/2) < 1 := by {rw [abs_div, abs_one, abs_two], exact one_half_lt_one},
    have mah := tendsto_pow_at_top_nhds_0_of_abs_lt_1 (abs_half),
    simp_rw [‚Üê one_div_pow],
    exact mah },
  have h‚ÇÇ : ‚àÄ n : ‚Ñï, ((floor (2 ^ n * x.1) ) / (2 ^ n) : ‚Ñù) ‚â§ x.1,
  { intro n,
    have := (div_le_div_right $ two_pow_pos n).mpr (floor_le (2 ^ n * x.1)),
    calc (floor (2 ^ n * x.1) / 2 ^ n : ‚Ñù)  ‚â§ (2 ^ n * x.1 / 2 ^ n) : this
                                        ... = (x.1 * 2 ^ n / 2 ^ n) : by simp only [mul_comm]
                                        ... = x.1 : by simp only [mul_div_cancel_of_invertible] },
  apply tendsto_of_tendsto_of_tendsto_of_le_of_le HH tendsto_const_nhds h‚ÇÅ h‚ÇÇ,
end

noncomputable def sum_floor (x : ‚Ñù‚â•0): ‚Ñ§ ‚Üí ‚Ñ§
| (int.of_nat n)          := nat.rec_on n
                          (floor x.1) (Œª n, floor (2 ^ (nat.succ n) * x.1) - floor (2 ^ n * x.1))
| (int.neg_succ_of_nat n) := 0


lemma has_sum_pow_floor (r' : ‚Ñù‚â•0) [fact (r' < 1)] (x : ‚Ñù‚â•0) :
  has_sum (Œª n, (coe ‚àò sum_floor x) n * r'.1 ^ n) x.1 :=
begin
  sorry,
end

lemma has_sum_pow_floor_norm (r : ‚Ñù‚â•0)  [fact (r < 1)] (x : ‚Ñù‚â•0) :
  has_sum (Œª n, ‚à• ((coe : ‚Ñ§ ‚Üí ‚Ñù) ‚àò sum_floor x) n ‚à• * r ^ n) x.1:=
begin
  sorry,--will be an easy consequence of the previous one
end

def laurent_measures.to_Rfct (r : ‚Ñù‚â•0) [fact (r < 1)] :
  (laurent_measures r (Fintype.of punit)) ‚Üí (‚Ñ§ ‚Üí ‚Ñù) := Œª ‚ü®F, _‚ü©, coe ‚àò (F punit.star)

noncomputable def Œ∏ (r' : ‚Ñù‚â•0) [fact (r' < 1)] (r : ‚Ñù‚â•0) [fact (r < 1)] :
 (laurent_measures r (Fintype.of punit)) ‚Üí ‚Ñù := Œª F, tsum (Œª n, (F.to_Rfct r n) * (r'.1) ^ n)

lemma Œ∏_surj_on_nonneg (r' : ‚Ñù‚â•0) [fact (r' < 1)] (r : ‚Ñù‚â•0) [fact (r < 1)] (x : ‚Ñù‚â•0) :
  ‚àÉ (F : laurent_measures r (Fintype.of punit)), (Œ∏ r' r F) = x :=
begin
  let F‚ÇÄ : Fintype.of punit ‚Üí ‚Ñ§ ‚Üí ‚Ñ§ := Œª a, (sum_floor x),
  have Hr : ‚àÄ (s : Fintype.of punit), summable (Œª (n : ‚Ñ§), ‚à•F‚ÇÄ s n‚à• * ‚Üër ^ n),
  { intro s,
    apply has_sum.summable (has_sum_pow_floor_norm r x) },
  let F : laurent_measures r (Fintype.of punit) := ‚ü®F‚ÇÄ, Hr‚ü©,
  use F,
  have : summable (Œª (n : ‚Ñ§), (F.to_Rfct r n) * (r'.1) ^ n) :=
    has_sum.summable (has_sum_pow_floor r' x),
  unfold Œ∏,
  unfold tsum,
  rw [dif_pos this],
  exact has_sum.unique (some_spec this) (has_sum_pow_floor r' x),
end

lemma Œ∏_surj (r' : ‚Ñù‚â•0) [fact (r' < 1)] (r : ‚Ñù‚â•0) [fact (r < 1)] : surjective (Œ∏ r' r) :=
begin
  intro x,
  by_cases hx : 0 ‚â§ x,
  { exact Œ∏_surj_on_nonneg r' r ‚ü®x, hx‚ü©},
  replace hx := le_of_lt (neg_pos_of_neg (lt_of_not_ge hx)),
  obtain ‚ü®F, hF‚ü© := Œ∏_surj_on_nonneg r' r ‚ü®-x,hx‚ü©,
  use -F,
  sorry,--better to do it later, once Œ∏ becomes a comp_haus_blah morphism, in particular linear
end

end thm69_surjective
