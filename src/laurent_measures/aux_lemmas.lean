-- import topology.algebra.infinite_sum
import data.finset.nat_antidiagonal
import analysis.normed_space.basic
import analysis.specific_limits

noncomputable theory

open metric finset --filter
open_locale nnreal classical big_operators topological_space

namespace aux_thm69

section equivalences_def

-- for mathlib?
def range_equiv_Icc {n d : ‚Ñ§} (m : ‚Ñï) (hm : n - d = m) :
  range m.succ ‚âÉ (Icc d n) :=
begin
  refine ‚ü®Œª a, ‚ü®a + d, mem_Icc.mpr ‚ü®_, _‚ü©‚ü©, _, _, _‚ü©,
  { exact (le_add_iff_nonneg_left _).mpr (int.of_nat_nonneg _) },
  { refine add_le_of_le_sub_right _,
    exact (int.coe_nat_le.mpr (nat.le_of_lt_succ $ (@mem_range m.succ a).mp a.2)).trans hm.ge },
  { rintro ‚ü®a, hha‚ü©,
    refine ‚ü®(a - d).nat_abs, mem_range_succ_iff.mpr _‚ü©,
    lift (a - d) to ‚Ñï using (sub_nonneg.mpr ((mem_Icc).mp hha).1) with ad had,
    rw [int.nat_abs_of_nat, ‚Üê (int.coe_nat_le_coe_nat_iff _ _), had, ‚Üê hm],
    exact sub_le_sub_right ((mem_Icc).mp hha).2 _ },
  { exact Œª x, subtype.ext (by simp) },
  { rintro ‚ü®x, hx‚ü©,
    simp [int.nat_abs_of_nonneg (sub_nonneg.mpr (mem_Icc.mp hx).1), sub_add_cancel] }
end

--for `mathlib`?
def equiv_bdd_integer_nat (N : ‚Ñ§) : ‚Ñï ‚âÉ {x // N ‚â§ x} :=
begin
  fconstructor,
  { exact Œª n, ‚ü®n + N, le_add_of_nonneg_left (int.coe_nat_nonneg n)‚ü© },
  { rintro ‚ü®x, hx‚ü©,
    use (int.eq_coe_of_zero_le (sub_nonneg.mpr hx)).some },
  { intro a,
    simp_rw [add_tsub_cancel_right],
    exact (int.coe_nat_inj $ Exists.some_spec $ int.eq_coe_of_zero_le $ int.of_nat_nonneg a).symm },
  { rintro ‚ü®_, hx‚ü©,
    simp only,
    exact add_eq_of_eq_sub ((int.eq_coe_of_zero_le (sub_nonneg.mpr hx)).some_spec).symm }
end

def equiv_Icc_bdd_nonneg {d : ‚Ñ§} (hd : 0 ‚â§ d) : {x // d ‚â§ x } ‚âÉ
  {x // x ‚àâ range (int.eq_coe_of_zero_le hd).some}:=
begin
  fconstructor,
  { rintro ‚ü®_, h‚ü©,
    have := (int.eq_coe_of_zero_le (hd.trans h)).some_spec,
    rw [(int.eq_coe_of_zero_le hd).some_spec, this, int.coe_nat_le, ‚Üê not_lt, ‚Üê mem_range] at h,
    exact ‚ü®_, h‚ü© },
  { rintro ‚ü®_, h‚ü©,
    rw [mem_range, nat.lt_iff_add_one_le, not_le, nat.lt_add_one_iff, ‚Üê int.coe_nat_le,
      ‚Üê (int.eq_coe_of_zero_le hd).some_spec] at h,
    exact ‚ü®_, h‚ü© },
  { rintro ‚ü®_, h‚ü©,
    simp only [int.coe_nat_inj', int.of_nat_eq_coe],
    exact (int.eq_coe_of_zero_le (hd.trans h)).some_spec.symm },
  { rintro ‚ü®_, h‚ü©,
    simp only [int.coe_nat_inj', int.of_nat_eq_coe],
    exact ((@exists_eq' _ _).some_spec).symm },
end

def T {d : ‚Ñ§} (hd : d < 0) : finset {x : ‚Ñ§ // d ‚â§ x} := Ico ‚ü®d, le_of_eq rfl‚ü© ‚ü®0, le_of_lt hd‚ü©

def equiv_Ico_nat_neg {d : ‚Ñ§} (hd : d < 0) : { y : {x : ‚Ñ§ // d ‚â§ x } // y ‚àâ T hd } ‚âÉ ‚Ñï :=
begin
  fconstructor,
  { rintro ‚ü®‚ü®a, ha‚ü©, hx‚ü©,
    have : 0 ‚â§ a,
    simpa only [subtype.mk_le_mk, subtype.mk_lt_mk, not_and, not_lt, ha, forall_true_left] using (not_iff_not_of_iff mem_Ico).mp hx,
    use (int.eq_coe_of_zero_le this).some },
  { intro n,
    use n,
    have : d ‚â§ n,
    repeat { exact le_of_lt (lt_of_lt_of_le hd (int.of_nat_nonneg n))},
    apply (not_iff_not_of_iff mem_Ico).mpr,
    simp only [subtype.mk_lt_mk, not_and, not_lt, implies_true_iff, int.coe_nat_nonneg] at * },
    { rintro ‚ü®‚ü®x, hx‚ü©, h‚ü©,
      simp only,
      have := (not_iff_not_of_iff mem_Ico).mp h,
      simp only [subtype.mk_le_mk, not_and, not_lt, hx, forall_true_left] at this,
      exact (Exists.some_spec (int.eq_coe_of_zero_le this)).symm },
    { intro n,
      simp only [int.coe_nat_inj'],
      exact ((@exists_eq' _ _).some_spec).symm },
end

def R {d n : ‚Ñ§} (hn : 0 ‚â§ n - d) : finset {x : ‚Ñ§ // d ‚â§ x} := Icc ‚ü®d, le_of_eq rfl‚ü© ‚ü®n, int.le_of_sub_nonneg hn‚ü©

def equiv_Icc_R {d n : ‚Ñ§} (hn : 0 ‚â§ n - d) : Icc d n ‚âÉ R hn :=
begin
  fconstructor,
  { rintro ‚ü®m, hm‚ü©,
    replace hm := mem_Icc.mp hm,
    use ‚ü®m, hm.1‚ü©,
    dsimp [R],
    rw mem_Icc,
    use and.intro (subtype.mk_le_mk.mpr hm.1) (subtype.mk_le_mk.mpr hm.2) },
  { dsimp [R],
    rintro ‚ü®‚ü®x, hx‚ü©, h‚ü©,
    rw mem_Icc at h,
    use x,
    rw mem_Icc,
    use and.intro hx (subtype.mk_le_mk.mp h.2) },
  { simp only [id.def],
    rintro ‚ü®‚ü®x, hx‚ü©, h‚ü©,
    all_goals {simp only}, },
  { simp only [id.def],
    dsimp [R],
    rintro ‚ü®‚ü®x, hx‚ü©, h‚ü©,
    simp only },
end

def equiv_compl_R_bdd {d n : ‚Ñ§} (hn : 0 ‚â§ n - d): {a : ‚Ñ§ // n.succ ‚â§ a } ‚âÉ
  ((R hn)·∂ú : set {x : ‚Ñ§ // d ‚â§ x}) :=
begin
  fconstructor,
  { rintro ‚ü®m, hm‚ü©,
    have hd : d ‚â§ m := (int.le_add_one (int.le_of_sub_nonneg hn)).trans hm,
    use ‚ü®m, hd‚ü©,
    dsimp only [R],
    simpa [mem_coe, set.mem_compl_eq, mem_Icc, subtype.mk_le_mk, not_and, hd, forall_true_left, not_le, int.lt_iff_add_one_le, hm] },
  { rintro ‚ü®‚ü®x, hx‚ü©, h_mem‚ü©,
    dsimp only [R] at h_mem,
    simp only [subtype.mk_le_mk, coe_Icc, not_and, not_le, set.mem_compl_eq, set.mem_Icc, hx, forall_true_left, int.lt_iff_add_one_le] at h_mem,
    use ‚ü®x, h_mem‚ü© },
  { rintro ‚ü®_, _‚ü©, simp only [id.def] },
  { rintro ‚ü®‚ü®_, _‚ü©, _‚ü©, simpa }
end

def nat_lt_nat := { x : ‚Ñï √ó ‚Ñï // x.snd < x.fst }
local notation `ùíÆ` := nat_lt_nat

--move me in the section below
lemma summable.summable_on_ùíÆ (f g : ‚Ñï ‚Üí ‚Ñù) (hf : summable (Œª n, ‚à• f n ‚à•))
  (hg : summable (Œª n, ‚à• g n ‚à•)) : summable (Œª x : ‚Ñï √ó ‚Ñï, f (x.fst + 1 + x.snd) * g (x.snd)) :=
begin
  sorry
end

end equivalences_def

section equivalences_lemma

--for mathlib?
lemma sum_reverse {Œ≤ : Type*} [add_comm_group Œ≤] (f : ‚Ñ§ ‚Üí Œ≤) (n : ‚Ñï) :
  ‚àë l in (range n.succ), (f (n - l)) = ‚àë l in (range n.succ), f l :=
begin
  induction n with n hn generalizing f,
  { simp only [zero_sub, int.coe_nat_zero, sum_singleton, neg_zero, range_one] },
  { rw [sum_range_succ', sum_range_succ (f ‚àò coe)],
    simp only [‚Üêhn, int.coe_nat_zero, add_sub_add_right_eq_sub, function.comp_app, sub_zero,
      int.coe_nat_succ] }
end

lemma sum_range_sum_Icc' {Œ± : Type*} [field Œ±] (f : ‚Ñ§ ‚Üí Œ±) {n d : ‚Ñ§} (hn : 0 ‚â§ n - d) :
 ‚àë l in (range (int.eq_coe_of_zero_le hn).some.succ), (f (n - l)) * 2 ^ l =
 ‚àë k in (Icc d n), (f k) * 2 ^ (n - k) :=
begin
  let m := (int.eq_coe_of_zero_le hn).some,
  have h := (int.eq_coe_of_zero_le hn).some_spec.symm,
  have sum_swap : ‚àë (l : ‚Ñï) in range m.succ, f (n - l) * 2 ^ l =
    ‚àë (l : ‚Ñï) in range m.succ, f (l + d) * 2 ^ (m - l),
  { convert (sum_reverse (Œª l, f (n - l) * 2 ^ l) m).symm using 1,
    { simp_rw ‚Üê zpow_coe_nat },
    refine sum_congr rfl (Œª x hx, _),
    congr' 1,
    { rw [sub_sub_assoc_swap, add_comm n, add_sub_assoc],
      exact congr_arg f ((add_right_inj _).mpr (eq_sub_iff_add_eq.mpr (eq_sub_iff_add_eq'.mp h))) },
    { simp only [‚Üê zpow_of_nat, int.of_nat_eq_coe, ‚Üê int.sub_nat_nat_eq_coe, int.sub_nat_nat_of_le
        (nat.lt_succ_iff.mp (mem_range.mp hx))] } },
  rw [sum_swap, ‚Üê sum_finset_coe, ‚Üê sum_finset_coe _ (Icc _ _)],
  refine fintype.sum_equiv (range_equiv_Icc _ h.symm) _ _ (Œª x, _),
  dsimp [range_equiv_Icc],
  rw [‚Üê sub_sub, sub_right_comm, ‚Üê zpow_coe_nat],
  refine congr_arg ((*) _) (congr_arg (pow 2) _),
  have := @nat.cast_sub ‚Ñ§ _ _ _ _ (mem_range_succ_iff.mp x.2),
  simpa only [this, h, int.nat_cast_eq_coe_nat, sub_left_inj, subtype.val_eq_coe],
end

lemma sum_range_sum_Icc (f : ‚Ñ§ ‚Üí ‚Ñù) (n d : ‚Ñ§) (hn : 0 ‚â§ n - d) :
 ‚àë l in (range (int.eq_coe_of_zero_le hn).some.succ), (f (n - l)) * 2 ^ l =
 ‚àë k in (Icc d n), (f k) * 2 ^ (n - k) :=
sum_range_sum_Icc' f hn


lemma equiv_Icc_bdd_nonneg_apply {d : ‚Ñ§} (hd : 0 ‚â§ d) (x : {x // d ‚â§ x}) :
  ((equiv_Icc_bdd_nonneg hd x) : ‚Ñ§) = x.1 :=
begin
  rcases x with ‚ü®_, h‚ü©,
  exact (Exists.some_spec (int.eq_coe_of_zero_le (hd.trans h))).symm,
end


lemma equiv_Ico_nat_neg_apply {d : ‚Ñ§} (hd : d < 0) {y : {x : ‚Ñ§ // d ‚â§ x}} (h : y ‚àâ T hd) : y.1 = (equiv_Ico_nat_neg hd) ‚ü®y, h‚ü© :=
begin
  rcases y with ‚ü®_, hy‚ü©,
  have := (not_iff_not_of_iff mem_Ico).mp h,
  simp only [subtype.mk_le_mk, subtype.mk_lt_mk, not_and, not_lt, hy, forall_true_left] at this,
  exact (Exists.some_spec (int.eq_coe_of_zero_le this))
end

lemma equiv_Icc_R_apply {d n : ‚Ñ§} (hn : 0 ‚â§ n - d) (x : Icc d n) : ((equiv_Icc_R hn x) : ‚Ñ§) =
  (x : ‚Ñ§) := by {rcases x, refl}

lemma equiv_compl_R_bdd_apply {d n : ‚Ñ§} (hn : 0 ‚â§ n - d) (x : {a : ‚Ñ§ // n.succ ‚â§ a }) :
(equiv_compl_R_bdd hn x : ‚Ñ§) = (x : ‚Ñ§) := by {rcases x with ‚ü®y, hy‚ü©, simpa}

lemma sum_Icc_sum_tail (f : ‚Ñ§ ‚Üí ‚Ñ§) (n d : ‚Ñ§)
  (hf : (has_sum (Œª x : ‚Ñ§, (f x : ‚Ñù) * (2 ^ x)‚Åª¬π) 0))
  (hd : ‚àÄ n : ‚Ñ§, n < d ‚Üí f n = 0)
  (hn : 0 ‚â§ n - d) : - ‚àë k in (Icc d n), ((f k) : ‚Ñù) * 2 ^ (n - k) =
  2 ^ n * tsum (Œª x : {a : ‚Ñ§ // n.succ ‚â§ a }, (f x : ‚Ñù) * (2 ^ x.1)‚Åª¬π) :=
begin
  simp_rw [zpow_sub‚ÇÄ (@two_ne_zero ‚Ñù _ _), div_eq_mul_inv, ‚Üê mul_assoc, (mul_comm _ ((2 : ‚Ñù) ^ n)), mul_assoc, ‚Üê mul_sum, neg_mul_eq_mul_neg, mul_eq_mul_left_iff],
  apply or.intro_left,
  have H_supp : function.support (Œª n : ‚Ñ§, (f n  : ‚Ñù) * (2 ^ n)‚Åª¬π) ‚äÜ { a : ‚Ñ§ | d ‚â§ a},
  { rw function.support_subset_iff,
    intro _,
    rw [‚Üê not_imp_not, not_not, mul_eq_zero],
    intro hx,
    simp only [not_le, set.mem_set_of_eq] at hx,
    apply or.intro_left,
    exact int.cast_eq_zero.mpr (hd _ hx), },
  rw ‚Üê (@has_sum_subtype_iff_of_support_subset ‚Ñù ‚Ñ§ _ _ (Œª n : ‚Ñ§, ( f n ) * (2 ^ n)‚Åª¬π) _ _ H_supp) at hf,
  let g := (Œª n : {x : ‚Ñ§ // d ‚â§ x}, ( f n : ‚Ñù) * (2 ^ n.1)‚Åª¬π),
  have hg : has_sum g 0 := hf,
  have := @sum_add_tsum_compl _ _ _ _ _ g _ (R hn) hg.summable,
  rw [hg.tsum_eq, add_eq_zero_iff_eq_neg] at this,
  replace this := neg_eq_iff_neg_eq.mpr this.symm,
  convert this using 1,
  { simp only [neg_inj],
    have h_R := @fintype.sum_equiv (Icc d n) (R hn) _ _ _ _ (equiv_Icc_R hn) ((Œª x : ‚Ñ§, ((f x : ‚Ñù) * (2 ^ x)‚Åª¬π)) ‚àò coe) (g ‚àò coe),
    rw @sum_subtype ‚Ñù ‚Ñ§ _ (‚àà Icc d n) _ (Icc d n) _ (Œª x, ((f x) : ‚Ñù) * (2 ^x)‚Åª¬π),
    rw @sum_subtype ‚Ñù _ _ (‚àà R hn) _ (R hn) _ (Œª x, g x),
    simp only,
    refine h_R _,
    { intro x,
      dsimp [g],
      rw [‚Üê coe_coe, equiv_Icc_R_apply hn x] },
    all_goals { intro _, refl } },
  { dsimp only [g],
    refine eq.trans _ (@equiv.tsum_eq _ _ _ _ _ _ (equiv_compl_R_bdd hn) (Œª x, (f x : ‚Ñù) * (2 ^ (x.1 : ‚Ñ§))‚Åª¬π)),
    apply tsum_congr,
    intro x,
    simp_rw [‚Üê coe_coe],
    nth_rewrite_rhs 0 [subtype.val_eq_coe],
    rw [‚Üê coe_coe, equiv_compl_R_bdd_apply hn x, ‚Üê subtype.val_eq_coe], }
end

end equivalences_lemma

section summability

lemma summable_shift (f : ‚Ñ§ ‚Üí ‚Ñù) (N : ‚Ñ§) :
  summable (Œª x : ‚Ñï, f (x + N)) ‚Üî summable (Œª x : {x // N ‚â§ x}, f x) :=
@equiv.summable_iff _ _ _ _ _ (Œª x : {x // N ‚â§ x}, f x) (equiv_bdd_integer_nat N)


lemma int_tsum_shift (f : ‚Ñ§ ‚Üí ‚Ñù) (N : ‚Ñ§) :
  ‚àë' (x : ‚Ñï), f (x + N) = ‚àë' (x : {x // N ‚â§ x}), f x :=
begin
  apply (equiv.refl ‚Ñù).tsum_eq_tsum_of_has_sum_iff_has_sum rfl,
  intro _,
  apply (@equiv.has_sum_iff ‚Ñù _ ‚Ñï _ _ (f ‚àò coe) _ ((equiv_bdd_integer_nat N))),
end

-- lemma aux_summable_iff_on_nat' {f : ‚Ñ§ ‚Üí ‚Ñ§} {œÅ : ‚Ñù‚â•0} (d : ‚Ñ§) (h : ‚àÄ n : ‚Ñ§, n < d ‚Üí f n = 0) :
--   summable (Œª n, ‚à• f n ‚à• * œÅ ^ n) ‚Üî summable (Œª n : ‚Ñï, ‚à• f (n + d) ‚à• * œÅ ^ (n + d : ‚Ñ§)) :=
-- begin
--   have hf : function.support (Œª n : ‚Ñ§, ‚à• f n ‚à• * œÅ ^ n) ‚äÜ { a : ‚Ñ§ | d ‚â§ a},
--   { rw function.support_subset_iff,
--     intro x,
--     rw [‚Üê not_imp_not, not_not, mul_eq_zero],
--     intro hx,
--     simp only [not_le, set.mem_set_of_eq] at hx,
--     apply or.intro_left,
--     rw norm_eq_zero,
--     exact h x hx },
--   have h1 := Œª a : ‚Ñù,
--     @has_sum_subtype_iff_of_support_subset ‚Ñù ‚Ñ§ _ _ (Œª n : ‚Ñ§, ‚à• f n ‚à• * œÅ ^ n) _ _ hf,
--   have h2 := Œª a : ‚Ñù,
--     @equiv.has_sum_iff ‚Ñù {b : ‚Ñ§ // d ‚â§ b} ‚Ñï _ _ ((Œª n, ‚à• f n ‚à• * œÅ ^ n) ‚àò coe) _
--     (equiv_bdd_integer_nat d),
--   exact exists_congr (Œª a, ((h2 a).trans (h1 a)).symm),
-- end

lemma aux_summable_iff_on_nat {f : ‚Ñ§ ‚Üí ‚Ñù} {œÅ : ‚Ñù‚â•0} (d : ‚Ñ§) (h : ‚àÄ n : ‚Ñ§, n < d ‚Üí f n = 0) :
  summable (Œª n, ‚à• f n ‚à• * œÅ ^ n) ‚Üî summable (Œª n : ‚Ñï, ‚à• f (n + d) ‚à• * œÅ ^ (n + d : ‚Ñ§)) :=
begin
  have hf : function.support (Œª n : ‚Ñ§, ‚à• f n ‚à• * œÅ ^ n) ‚äÜ { a : ‚Ñ§ | d ‚â§ a},
  { rw function.support_subset_iff,
    intro x,
    rw [‚Üê not_imp_not, not_not, mul_eq_zero],
    intro hx,
    simp only [not_le, set.mem_set_of_eq] at hx,
    apply or.intro_left,
    rw norm_eq_zero,
    exact h x hx },
  have h1 := Œª a : ‚Ñù,
    @has_sum_subtype_iff_of_support_subset ‚Ñù ‚Ñ§ _ _ (Œª n : ‚Ñ§, ‚à• f n ‚à• * œÅ ^ n) _ _ hf,
  have h2 := Œª a : ‚Ñù,
    @equiv.has_sum_iff ‚Ñù {b : ‚Ñ§ // d ‚â§ b} ‚Ñï _ _ ((Œª n, ‚à• f n ‚à• * œÅ ^ n) ‚àò coe) _
    (equiv_bdd_integer_nat d),
  exact exists_congr (Œª a, ((h2 a).trans (h1 a)).symm),
end


lemma summable_iff_on_nat {f : ‚Ñ§ ‚Üí ‚Ñù} {œÅ : ‚Ñù‚â•0} (d : ‚Ñ§) (h : ‚àÄ n : ‚Ñ§, n < d ‚Üí f n = 0) :
  summable (Œª n, ‚à• f n ‚à• * œÅ ^ n) ‚Üî summable (Œª n : ‚Ñï, ‚à• f n ‚à• * œÅ ^ (n : ‚Ñ§)) := --sorry
begin
  apply (aux_summable_iff_on_nat d h).trans,
  -- apply (aux_summable_iff_on_nat' d h).trans,
  simp only [@summable_shift (Œª n, ‚à• f n ‚à• * œÅ ^n) d, zpow_coe_nat],
  by_cases hd : 0 ‚â§ d,
  { set m := (int.eq_coe_of_zero_le hd).some,
    convert (@equiv.summable_iff _ _ _ _ _ (Œª x : {x : ‚Ñï // x ‚àâ range m},
      ‚à• f x ‚à• * œÅ ^ (x : ‚Ñ§)) (equiv_Icc_bdd_nonneg hd)).trans (@finset.summable_compl_iff _ _ _ _ _
      (Œª n : ‚Ñï, ‚à• f n ‚à• * œÅ ^ n) (range m)),
    ext ‚ü®_, _‚ü©,
    simp only [function.comp_app, subtype.coe_mk, ‚Üê zpow_coe_nat, ‚Üê coe_coe,
      equiv_Icc_bdd_nonneg_apply] },
  { rw not_le at hd,
    have h_fin := @finset.summable_compl_iff _ _ _ _ _
      (Œª n : {x // d ‚â§ x }, ‚à• f n ‚à• * œÅ ^ (n : ‚Ñ§)) (T hd),
    apply ((@finset.summable_compl_iff _ _ _ _ _
      (Œª n : {x // d ‚â§ x }, ‚à• f n ‚à• * œÅ ^ (n : ‚Ñ§)) (T hd)).symm).trans,
    refine iff.trans _ (@equiv.summable_iff _ _ _ _ _ (Œª n : ‚Ñï, ‚à• f n ‚à• * œÅ ^ n)
      (equiv_Ico_nat_neg hd)),
    apply summable_congr,
    rintro ‚ü®‚ü®x, hx‚ü©, h‚ü©,
    simp only [function.comp_app, subtype.coe_mk, ‚Üê (equiv_Ico_nat_neg_apply hd h),
      subtype.val_eq_coe, ‚Üê zpow_coe_nat] }
end

lemma int.summable_iff_on_nat {f : ‚Ñ§ ‚Üí ‚Ñ§} {œÅ : ‚Ñù‚â•0} (d : ‚Ñ§) (h : ‚àÄ n : ‚Ñ§, n < d ‚Üí f n = 0) :
summable (Œª n, ‚à• f n ‚à• * œÅ ^ n) ‚Üî summable (Œª n : ‚Ñï, ‚à• f n ‚à• * œÅ ^ (n : ‚Ñ§)) :=
  begin
    apply summable_iff_on_nat d,
    simpa only [int.cast_eq_zero],
  end

-- lemma goofy {r : ‚Ñù‚â•0} (f : ‚Ñ§ ‚Üí ‚Ñ§) (hf : summable (Œª n, ‚à• f n ‚à• * r ^ n)) (b : ‚Ñï)
-- : (Œª n : ‚Ñï, (2 * r : ‚Ñù) ^ n * ‚à•‚àë' (x : ‚Ñï), (1 / 2 : ‚Ñù) ^ (n + 1 + x : ‚Ñ§) * (f (n + 1 + x : ‚Ñ§))‚à•) b
--   ‚â§ (Œª n : ‚Ñï, (2 * r : ‚Ñù) ^ n * ‚à•‚àë' (x : ‚Ñï), (1 / 2 : ‚Ñù) ^ (x + 1) * (f (x + 1))‚à•) b:=
-- begin
-- end

-- lemma half_ne_zero : (1 / 2 : ‚Ñù) ‚â† 0 := by {simp only [one_div, ne.def, inv_eq_zero, bit0_eq_zero,
--     one_ne_zero, not_false_iff]}

lemma heather {r : ‚Ñù‚â•0} (f : ‚Ñ§ ‚Üí ‚Ñ§) : --(h : summable (Œª kl: ‚Ñï √ó ‚Ñï, (1 / 2 : ‚Ñù) *
  -- ‚à• f (kl.fst + 1 + kl.snd) ‚à• * r ^ (kl.snd) )) :
  summable (Œª (n : ‚Ñï), 1 / 2 * ‚àë' (i : ‚Ñï), (f (n + 1 + i) : ‚Ñù) * (1 / 2) ^ i * ‚Üër ^ n) :=
begin
  have easy : ‚àÄ (n : ‚Ñï), summable (Œª (i : ‚Ñï), (f (n + 1 + i) : ‚Ñù) *
    (1 / 2) ^ i * ‚Üër ^ n),
  { intro n,
    apply summable.mul_right,
    sorry,
  },
  set œï := (Œª lj: ‚Ñï √ó ‚Ñï, (1 / 2 : ‚Ñù) * f (lj.fst + 1 + lj.snd) * (1 / 2)^(lj.snd) * r ^ (lj.fst) ),
  set œà := (Œª n : ‚Ñï, (1/2 : ‚Ñù) * ‚àë' (i : ‚Ñï), (f (n + 1 + i) : ‚Ñù) * (1 / 2)^i * r^n),
  have crux : summable œï, sorry,
  have H : ‚àÄ b : ‚Ñï, has_sum (Œª i : ‚Ñï, œï(b, i)) (œà b),
  { intro n,
    dsimp [œï, œà, tsum],
    rw [dif_pos (easy n)],
    simp_rw mul_assoc,
    rw [‚Üê has_sum_mul_left_iff (ne_of_gt (@one_half_pos ‚Ñù _))],
    exact Exists.some_spec _, },
  have := has_sum.prod_fiberwise crux.has_sum H,
  -- have hope := @has_sum.prod_fiberwise _ _ _ _ _ _ _ œï œà (‚àë' mn : ‚Ñï √ó ‚Ñï, œï mn) crux.has_sum H,
  exact this.summable,
end

lemma heather' {r : ‚Ñù‚â•0} (f : ‚Ñ§ ‚Üí ‚Ñ§) :
  summable (Œª (n : ‚Ñï), 1 / 2 * ‚à• ‚àë' (i : ‚Ñï), (f (n + 1 + i) : ‚Ñù) * (1 / 2) ^ i ‚à• * ‚Üër ^ n) :=
begin
  have easy : ‚àÄ (n : ‚Ñï), summable (Œª (i : ‚Ñï), ‚à• (f (n + 1 + i) : ‚Ñù) *
    (1 / 2) ^ i ‚à• * ‚Üër ^ n),
  { intro n,
    apply summable.mul_right,
    sorry,
  },
  set œï := (Œª lj: ‚Ñï √ó ‚Ñï, (1 / 2 : ‚Ñù) * ‚à• f (lj.fst + 1 + lj.snd) * (1/2)^(lj.snd) ‚à• * r ^ (lj.fst) ),
  set œà := (Œª n : ‚Ñï, (1/2 : ‚Ñù) * ‚à• ‚àë' (i : ‚Ñï), (f (n + 1 + i) : ‚Ñù) * (1/2)^i ‚à• * r^n),
  have crux : summable œï, sorry,
  have H : ‚àÄ b : ‚Ñï, has_sum (Œª i : ‚Ñï, œï(b, i)) (œà b),
  { intro n,
    dsimp [œï, œà, tsum],
    sorry,
    -- rw [dif_pos (easy n)],
    -- simp_rw mul_assoc,
    -- rw [‚Üê has_sum_mul_left_iff (ne_of_gt (@one_half_pos ‚Ñù _))],
    --exact Exists.some_spec _,
    },
  have := has_sum.prod_fiberwise crux.has_sum H,
  -- have hope := @has_sum.prod_fiberwise _ _ _ _ _ _ _ œï œà (‚àë' mn : ‚Ñï √ó ‚Ñï, œï mn) crux.has_sum H,
  exact this.summable,
end

-- lemma aux_pos_terms {r : ‚Ñù‚â•0} (f : ‚Ñ§ ‚Üí ‚Ñ§) (n : ‚Ñï) : 0 ‚â§ (2 * r : ‚Ñù) ^ n *
--   ‚à•‚àë' (x : ‚Ñï), (1 / 2 : ‚Ñù) ^ (n + 1 + x) * ‚Üë(f (n + 1 + x))‚à• :=

lemma summable_convolution {r : ‚Ñù‚â•0} (hr‚ÇÄ: 0 < r) (hr‚ÇÇ : 1 / 2 < r) (f : ‚Ñ§ ‚Üí ‚Ñ§) (d : ‚Ñ§)
  (hf : summable (Œª n, ‚à• f n ‚à• * r ^ n)) --(hd : ‚àÄ n : ‚Ñ§, n < d ‚Üí f n = 0)
  (hd : ‚àÄ (n : ‚Ñ§), n < d ‚Üí ‚à•‚àë' (i : ‚Ñï), (f (n + 1 + i) : ‚Ñù) * (1 / 2) ^ i‚à• = 0)
    :
  summable (Œª n : ‚Ñ§, (1 / 2) * ‚à• tsum (Œª i : ‚Ñï, ((f (n + 1 + i)) : ‚Ñù) * (1 / 2) ^ i) ‚à• * r ^ n) :=
begin
  suffices h_on_nat : summable (Œª (n : ‚Ñï),
    (1 / 2) * ‚à•‚àë' (i : ‚Ñï), (f (n + 1 + i) : ‚Ñù) * (1 / 2) ^ i‚à• * (r : ‚Ñù) ^ n),
  { simp_rw mul_assoc at ‚ä¢ h_on_nat,
    rw [‚Üê summable_mul_left_iff (ne_of_gt (@one_half_pos ‚Ñù _))] at ‚ä¢ h_on_nat,
    refine (@summable_iff_on_nat (Œª n, ‚àë' (i : ‚Ñï), (f (n + 1 + i)) * (1 / 2) ^ i)
      r d _).mpr h_on_nat,
    intros n hn,
    exact norm_eq_zero.mp (hd n hn) },
  apply heather',
end

#exit
sorry;{
  { have half_norm : (1 / 2 : ‚Ñù) = ‚à• (1 / 2  : ‚Ñù) ‚à• := by { simp only [one_div,
    normed_field.norm_inv, real.norm_two]},
    rw half_norm,
    simp_rw [mul_comm, ‚Üê normed_field.norm_mul, ‚Üê tsum_mul_left, ‚Üê mul_assoc],
    rw ‚Üê half_norm,
    simp_rw [‚Üê (pow_succ (1 / 2 : ‚Ñù) _)],
    convert_to summable (Œª (lj : ‚Ñï √ó ‚Ñï), (1 / 2 : ‚Ñù) * ‚à• (f (lj.fst + 1 + lj.snd) : ‚Ñù) *
      (1 / 2) ^ (lj.snd) ‚à• * r ^ (lj.fst)) using 0,
    sorry,
    sorry, },
    -- convert_to summable (Œª (n : ‚Ñï), ‚à•‚àë' (x : ‚Ñï), ( 1 / (2 * r : ‚Ñù))^ (x + 1) * (r: ‚Ñù) ^ (n + 1 + x : ‚Ñ§)
    --   * (f (n + 1 + x))‚à•),
    -- sorry,



    --wrong
    -- convert_to summable (Œª (n : ‚Ñï), ((2 : ‚Ñù) * r) ^ n * ‚à•‚àë' (x : ‚Ñï), (1 / 2 : ‚Ñù) ^ (n + 1 + x : ‚Ñ§)
    --   * (f (n + 1 + x))‚à•),
    -- { funext n,
    --   nth_rewrite_rhs 0 [mul_pow],
    --   nth_rewrite_rhs 1 [mul_comm],
    --   nth_rewrite_rhs 0 [mul_assoc],
    --   rw mul_eq_mul_left_iff,
    --   apply or.intro_left,
    --   nth_rewrite_rhs 0 [‚Üê inv_inv‚ÇÄ (2 : ‚Ñù)],
    --   nth_rewrite_rhs 0 [‚Üê zpow_neg_one],
    --   nth_rewrite_rhs 0 [‚Üê zpow_of_nat],
    --   nth_rewrite_rhs 0 [‚Üê zpow_mul‚ÇÄ],
    --   nth_rewrite_rhs 0 [inv_eq_one_div],
    --   rw [neg_one_mul, int.of_nat_eq_coe, half_norm, ‚Üê normed_field.norm_zpow,
    --     ‚Üê normed_field.norm_mul ((1 / 2 : ‚Ñù) ^ (- ‚Üën)) _, ‚Üê half_norm],
    --   simp_rw [‚Üê tsum_mul_left, ‚Üê mul_assoc, ‚Üê zpow_add‚ÇÄ $ one_div_ne_zero $ @two_ne_zero ‚Ñù _ _,
    --    add_assoc, neg_add_cancel_left, add_comm _ 1],
    --   refl },

    --   apply summable_of_nonneg_of_le _ (goofy f hf),
    --   { have temp : ‚à• (2 * r : ‚Ñù) ‚à• < 1, sorry,
    --     apply summable.mul_right,
    --     exact summable_geometric_of_norm_lt_1 temp,
    --     --refine (summable_geometric_of_norm_lt_1 _).mul_right,
    --   -- apply geom
    --     },--intro b, exact aux_pos_terms f b},
    --   { intro b,
    --     have : (0 : ‚Ñù) < (2 * ‚Üër) ^ b,
    --     { apply pow_pos,
    --       apply mul_pos,
    --       simp only [zero_lt_bit0, zero_lt_one, nnreal.coe_pos],
    --       simpa only [nnreal.coe_pos] },
    --   exact aux_pos_terms f b }},

  }
end

end summability

end aux_thm69
