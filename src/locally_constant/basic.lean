import topology.subset_properties
import topology.algebra.monoid

variables {X Y Z : Type*} [topological_space X]

-- move this
section for_mathlib

def finite_of_is_compact_of_discrete [discrete_topology X] (s : set X) (hs : is_compact s) :
  s.finite :=
begin
  have := hs.elim_finite_subcover (Œª x : X, ({x} : set X))
    (Œª x, is_open_discrete _),
  simp only [set.subset_univ, forall_prop_of_true, set.Union_of_singleton] at this,
  rcases this with ‚ü®t, ht‚ü©,
  suffices : (‚ãÉ (i : X) (H : i ‚àà t), {i} : set X) = (t : set X),
  { rw this at ht, exact t.finite_to_set.subset ht },
  ext x,
  simp only [exists_prop, set.mem_Union, set.mem_singleton_iff, exists_eq_right', finset.mem_coe]
end

noncomputable
def fintype_of_univ_finite (H : set.finite (set.univ : set Y)) :
  fintype Y :=
begin
  choose t ht using H.exists_finset,
  refine ‚ü®t, _‚ü©,
  simpa only [set.mem_univ, iff_true] using ht
end

noncomputable
def fintype_of_compact_of_discrete [compact_space X] [discrete_topology X] :
  fintype X :=
fintype_of_univ_finite $ finite_of_is_compact_of_discrete _ compact_univ

end for_mathlib

open_locale topological_space

def is_locally_constant (f : X ‚Üí Y) : Prop := ‚àÄ s, is_open (f ‚Åª¬π' s)

namespace is_locally_constant

lemma exists_open {f : X ‚Üí Y} (hf : is_locally_constant f) (x : X) :
  ‚àÉ (U : set X) (hU : is_open U) (hx : x ‚àà U), ‚àÄ x' ‚àà U, f x' = f x :=
‚ü®f ‚Åª¬π' {(f x)}, hf _, set.mem_singleton _, Œª x' hx', set.mem_singleton_iff.mp hx'‚ü©

lemma exists_nhds {f : X ‚Üí Y} (hf : is_locally_constant f) (x : X) :
  ‚àÉ U ‚àà ùìù x, ‚àÄ x' ‚àà U, f x' = f x :=
let ‚ü®U, hU, hx, H‚ü© := hf.exists_open x in ‚ü®U, mem_nhds_sets hU hx, H‚ü©

lemma iff_exists_open (f : X ‚Üí Y) :
  is_locally_constant f ‚Üî ‚àÄ x, ‚àÉ (U : set X) (hU : is_open U) (hx : x ‚àà U), ‚àÄ x' ‚àà U, f x' = f x :=
begin
  refine ‚ü®exists_open, _‚ü©,
  assume h s,
  rw is_open_iff_forall_mem_open,
  assume x hx,
  obtain ‚ü®U, hU, hxU, H‚ü© := h x,
  refine ‚ü®U, _, hU, hxU‚ü©,
  assume x' hx',
  simp only [*, set.mem_preimage] at *,
end

lemma iff_exists_nhds (f : X ‚Üí Y) :
  is_locally_constant f ‚Üî ‚àÄ x, ‚àÉ U ‚àà ùìù x, ‚àÄ x' ‚àà U, f x' = f x :=
begin
  refine ‚ü®exists_nhds, _‚ü©,
  assume h,
  rw iff_exists_open,
  assume x,
  obtain ‚ü®U, hU, H‚ü© := h x,
  obtain ‚ü®V, hVU, hV, hxV‚ü© : ‚àÉ (V : set X) (H : V ‚äÜ U), is_open V ‚àß x ‚àà V,
  by rwa mem_nhds_sets_iff at hU,
  refine ‚ü®V, hV, hxV, _‚ü©,
  assume x' hx',
  solve_by_elim only [H, hxV, hx', hVU]
end

lemma of_constant (f : X ‚Üí Y) (h : ‚àÉ y, ‚àÄ x, f x = y) :
  is_locally_constant f :=
begin
  obtain ‚ü®y, hy‚ü© := h,
  rw iff_exists_nhds,
  intro x,
  refine ‚ü®set.univ, filter.univ_mem_sets, _‚ü©,
  rintro x -,
  rw [hy, hy]
end

lemma const (y : Y) : is_locally_constant (function.const X y) :=
of_constant _ ‚ü®y, Œª _, rfl‚ü©

lemma continuous {_ : topological_space Y} {f : X ‚Üí Y} (hf : is_locally_constant f) :
  continuous f :=
‚ü®Œª U hU, hf _‚ü©

lemma iff_continuous {_ : topological_space Y} [discrete_topology Y] (f : X ‚Üí Y) :
  is_locally_constant f ‚Üî _root_.continuous f :=
‚ü®continuous, Œª h s, h.is_open_preimage s (is_open_discrete _)‚ü©

lemma apply_eq_of_is_preconnected {f : X ‚Üí Y} (hf : is_locally_constant f)
  (s : set X) (hs : is_preconnected s) (x y : X) (hx : x ‚àà s) (hy : y ‚àà s) :
  f y = f x :=
begin
  letI : topological_space Y := ‚ä•,
  haveI : discrete_topology Y := ‚ü®rfl‚ü©,
  have aux := is_preconnected.image hs f hf.continuous.continuous_on {f x} (f '' s \ {f x})
    (is_open_discrete _) (is_open_discrete _),
  simp only [set.union_diff_self, ‚Üê set.inter_diff_assoc, set.inter_self, set.inter_diff_self,
    set.inter_empty, ‚Üê @set.ne_empty_iff_nonempty _ ‚àÖ, eq_self_iff_true, not_true, ne.def] at aux,
  classical, by_contra hxy,
  exact aux (set.subset_union_right _ _)
    ‚ü®f x, set.mem_inter (set.mem_image_of_mem f hx) (set.mem_singleton _)‚ü©
    ‚ü®f y, set.mem_diff_singleton.mpr ‚ü®set.mem_image_of_mem f hy, hxy‚ü©‚ü©
end

lemma range_finite [compact_space X] {f : X ‚Üí Y} (hf : is_locally_constant f) :
  (set.range f).finite :=
begin
  letI : topological_space Y := ‚ä•,
  haveI : discrete_topology Y := ‚ü®rfl‚ü©,
  rw @iff_continuous X Y ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫ at hf,
  exact finite_of_is_compact_of_discrete _ (compact_range hf)
end


@[to_additive]
lemma one [has_one Y] : is_locally_constant (1 : X ‚Üí Y) := const 1

@[to_additive]
lemma inv [has_inv Y] ‚¶Éf : X ‚Üí Y‚¶Ñ (hf : is_locally_constant f) :
  is_locally_constant f‚Åª¬π :=
begin
  intro s,
  suffices : f‚Åª¬π ‚Åª¬π' s = f ‚Åª¬π' (has_inv.inv ‚Åª¬π' s), by { rw this, exact hf _ },
  ext, simp only [set.mem_preimage, pi.inv_apply],
end

@[to_additive]
lemma mul [has_mul Y] ‚¶Éf g : X ‚Üí Y‚¶Ñ (hf : is_locally_constant f) (hg : is_locally_constant g) :
  is_locally_constant (f * g) :=
begin
  letI : topological_space Y := ‚ä•,
  haveI : discrete_topology Y := ‚ü®rfl‚ü©,
  rw @iff_continuous X Y ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫ at hf hg ‚ä¢,
  exact hf.mul hg
end

-- to additive doesn't want to generate this
-- also, `[has_sub Y]` doesn't work :sad:
lemma sub [add_group Y] ‚¶Éf g : X ‚Üí Y‚¶Ñ (hf : is_locally_constant f) (hg : is_locally_constant g) :
  is_locally_constant (f - g) :=
begin
  rw iff_exists_open at hf hg ‚ä¢,
  intro x,
  obtain ‚ü®U, hU, hxU, HU‚ü© := hf x,
  obtain ‚ü®V, hV, hxV, HV‚ü© := hg x,
  use [U ‚à© V, is_open_inter hU hV, ‚ü®hxU, hxV‚ü©],
  rintro x' ‚ü®hx'U, hx'V‚ü©,
  simp only [pi.sub_apply, HU x' hx'U, HV x' hx'V]
end

@[to_additive]
lemma div [group Y] ‚¶Éf g : X ‚Üí Y‚¶Ñ (hf : is_locally_constant f) (hg : is_locally_constant g) :
  is_locally_constant (f / g) :=
begin
  rw iff_exists_open at hf hg ‚ä¢,
  intro x,
  obtain ‚ü®U, hU, hxU, HU‚ü© := hf x,
  obtain ‚ü®V, hV, hxV, HV‚ü© := hg x,
  use [U ‚à© V, is_open_inter hU hV, ‚ü®hxU, hxV‚ü©],
  rintro x' ‚ü®hx'U, hx'V‚ü©,
  simp only [pi.div_apply, HU x' hx'U, HV x' hx'V]
end

end is_locally_constant

structure locally_constant (X Y : Type*) [topological_space X] :=
(to_fun : X ‚Üí Y)
(is_locally_constant : is_locally_constant to_fun)

namespace locally_constant

instance : has_coe_to_fun (locally_constant X Y) := ‚ü®_, locally_constant.to_fun‚ü©

initialize_simps_projections locally_constant (to_fun ‚Üí apply)

@[simp] lemma to_fun_eq_coe (f : locally_constant X Y) : f.to_fun = f := rfl

@[simp] lemma coe_mk (f : X ‚Üí Y) (h) : ‚áë(‚ü®f, h‚ü© : locally_constant X Y) = f := rfl

theorem congr_fun {f g : locally_constant X Y} (h : f = g) (x : X) : f x = g x :=
congr_arg (Œª h : locally_constant X Y, h x) h

theorem congr_arg (f : locally_constant X Y) {x y : X} (h : x = y) : f x = f y :=
congr_arg (Œª x : X, f x) h

theorem coe_inj ‚¶Éf g : locally_constant X Y‚¶Ñ (h : (f : X ‚Üí Y) = g) : f = g :=
by cases f; cases g; cases h; refl

@[ext] theorem ext ‚¶Éf g : locally_constant X Y‚¶Ñ (h : ‚àÄ x, f x = g x) : f = g :=
coe_inj (funext h)

theorem ext_iff {f g : locally_constant X Y} : f = g ‚Üî ‚àÄ x, f x = g x :=
‚ü®Œª h x, h ‚ñ∏ rfl, Œª h, ext h‚ü©

lemma continuous [topological_space Y] (f : locally_constant X Y) : continuous f :=
f.is_locally_constant.continuous

/-- The constant locally constant function on `X` with value `y : Y`. -/
def const (X : Type*) {Y : Type*} [topological_space X] (y : Y) :
  locally_constant X Y :=
‚ü®function.const X y, is_locally_constant.const _‚ü©

lemma range_finite [compact_space X] (f : locally_constant X Y) :
  (set.range f).finite :=
f.is_locally_constant.range_finite

def map (f : Y ‚Üí Z) : locally_constant X Y ‚Üí locally_constant X Z :=
Œª g, ‚ü®f ‚àò g, Œª s, by { rw set.preimage_comp, apply g.is_locally_constant }‚ü©

open_locale classical

noncomputable
def comap [topological_space Y] (f : X ‚Üí Y) :
  locally_constant Y Z ‚Üí locally_constant X Z :=
if hf : _root_.continuous f
then Œª g, ‚ü®g ‚àò f, Œª s,
  by { rw set.preimage_comp, apply hf.is_open_preimage, apply g.is_locally_constant }‚ü©
else
begin
  by_cases H : nonempty X,
  { introsI g, exact const X (g $ f $ classical.arbitrary X) },
  { intro g, refine ‚ü®Œª x, (H ‚ü®x‚ü©).elim, _‚ü©,
    intro s, rw is_open_iff_nhds, intro x, exact (H ‚ü®x‚ü©).elim }
end

end locally_constant
