import Lbar.ext_aux1

noncomputable theory

universes v u u'

open opposite category_theory category_theory.limits category_theory.preadditive
open_locale nnreal zero_object

variables (r r' : ‚Ñù‚â•0)
variables [fact (0 < r)] [fact (r < r')] [fact (r < 1)]

section

open bounded_homotopy_category

variables (BD : breen_deligne.data)
variables (Œ∫ Œ∫‚ÇÇ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ (c : ‚Ñù‚â•0), BD.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables [‚àÄ (c : ‚Ñù‚â•0), BD.suitable (Œ∫‚ÇÇ c)] [‚àÄ n, fact (monotone (function.swap Œ∫‚ÇÇ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')
variables (V : SemiNormedGroup.{u}) [complete_space V] [separated_space V]

set_option pp.universes true

-- jmc: is this helpful??
-- @[reassoc]
-- def preadditive_yoneda_obj_obj_CondensedSet_to_Condensed_Ab_natural
--   (M : Condensed.{u} Ab.{u+1}) (X Y : Profinite) (f : X ‚ü∂ Y) :
--   (preadditive_yoneda_obj_obj_CondensedSet_to_Condensed_Ab M Y).hom ‚â´ M.val.map f.op =
--   ((preadditive_yoneda.obj M).map (CondensedSet_to_Condensed_Ab.map $ Profinite_to_Condensed.map f).op) ‚â´
--    (preadditive_yoneda_obj_obj_CondensedSet_to_Condensed_Ab M X).hom :=
-- by admit

lemma QprimeFP_map (c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) (h : c‚ÇÅ ‚ü∂ c‚ÇÇ) :
  (QprimeFP r' BD Œ∫ M).map h = of'_hom ((QprimeFP_int r' BD Œ∫ _).map h) := rfl

variables [fact (0 < r')] [fact (r' < 1)]

lemma ExtQprime_iso_aux_system_obj_natrality (c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) (h : c‚ÇÅ ‚ü∂ c‚ÇÇ) (n : ‚Ñï) :
  (ExtQprime_iso_aux_system_obj r' BD Œ∫ M V c‚ÇÇ n).hom ‚â´
  (homology_functor _ _ _).map
  ((system_of_complexes.to_Ab _).map h.op)  =
  ((Ext n).map ((QprimeFP r' BD Œ∫ _).map h).op).app _ ‚â´
  (ExtQprime_iso_aux_system_obj r' BD Œ∫ M V c‚ÇÅ n).hom :=
begin
  dsimp only [ExtQprime_iso_aux_system_obj,
    iso.trans_hom, id, functor.map_iso_hom],
  haveI : ((homotopy_category.quotient.{u+1 u+2 0}
    (Condensed.{u u+1 u+2} Ab.{u+1}) (complex_shape.up.{0} ‚Ñ§)).obj
     ((QprimeFP_int.{u} r' BD Œ∫ M).obj c‚ÇÅ)).is_bounded_above := sorry,
  haveI : ((homotopy_category.quotient.{u+1 u+2 0}
    (Condensed.{u u+1 u+2} Ab.{u+1}) (complex_shape.up.{0} ‚Ñ§)).obj
     ((QprimeFP_int.{u} r' BD Œ∫ M).obj c‚ÇÇ)).is_bounded_above := sorry,
  have := Ext_compute_with_acyclic_naturality
    ((QprimeFP_int.{u} r' BD Œ∫ M).obj c‚ÇÅ)
    ((QprimeFP_int.{u} r' BD Œ∫ M).obj c‚ÇÇ)
    V.to_Cond sorry sorry
    ((QprimeFP_int.{u} r' BD Œ∫ M).map h) n,
  dsimp only [functor.comp_map] at this,
  erw reassoc_of this, clear this,
  dsimp only [QprimeFP_int],
  simp only [category.assoc],
  congr' 1,
  dsimp only [nat_iso.app_hom],
  simp only [functor.map_comp, functor.comp_map, nat_trans.naturality,
    nat_trans.naturality_assoc],
  dsimp only [functor.op_map, quiver.hom.unop_op, functor.right_op_map],
  simp only [‚Üê functor.map_comp, ‚Üê functor.map_comp_assoc],
  dsimp [-homology_functor_map],
  --refine congr_arg2 _ _ (congr_arg2 _ rfl _),
  sorry

end

def ExtQprime_iso_aux_system (n : ‚Ñï) :
  (QprimeFP r' BD Œ∫ M).op ‚ãô (Ext n).flip.obj ((single _ 0).obj V.to_Cond) ‚âÖ
  aux_system r' BD ‚ü®M‚ü© (SemiNormedGroup.ulift.{u+1}.obj V) Œ∫ ‚ãô
    (forget‚ÇÇ _ Ab).map_homological_complex _ ‚ãô homology_functor _ _ n :=
nat_iso.of_components (Œª c, ExtQprime_iso_aux_system_obj r' BD Œ∫ M V (unop c) n)
begin
  intros c‚ÇÅ c‚ÇÇ h,
  dsimp [-homology_functor_map],
  rw ‚Üê ExtQprime_iso_aux_system_obj_natrality,
  refl,
end

/-- The `Tinv` map induced by `M` -/
def ExtQprime.Tinv
  [‚àÄ c n, fact (Œ∫‚ÇÇ c n ‚â§ Œ∫ c n)] [‚àÄ c n, fact (Œ∫‚ÇÇ c n ‚â§ r' * Œ∫ c n)]
  (n : ‚Ñ§) :
  (QprimeFP r' BD Œ∫ M).op ‚ãô (Ext n).flip.obj ((single _ 0).obj V.to_Cond) ‚ü∂
  (QprimeFP r' BD Œ∫‚ÇÇ M).op ‚ãô (Ext n).flip.obj ((single _ 0).obj V.to_Cond) :=
whisker_right (nat_trans.op $ QprimeFP.Tinv BD _ _ M) _

/-- The `T_inv` map induced by `V` -/
def ExtQprime.T_inv [normed_with_aut r V]
  [‚àÄ c n, fact (Œ∫‚ÇÇ c n ‚â§ Œ∫ c n)] [‚àÄ c n, fact (Œ∫‚ÇÇ c n ‚â§ r' * Œ∫ c n)]
  (n : ‚Ñ§) :
  (QprimeFP r' BD Œ∫ M).op ‚ãô (Ext n).flip.obj ((single _ 0).obj V.to_Cond) ‚ü∂
  (QprimeFP r' BD Œ∫‚ÇÇ M).op ‚ãô (Ext n).flip.obj ((single _ 0).obj V.to_Cond) :=
whisker_right (nat_trans.op $ QprimeFP.Œπ BD _ _ M) _ ‚â´ whisker_left _ ((Ext n).flip.map $ (single _ _).map $
  (Condensed.of_top_ab_map (normed_with_aut.T.inv).to_add_monoid_hom
  (normed_group_hom.continuous _)))

def ExtQprime.Tinv2 [normed_with_aut r V]
  [‚àÄ c n, fact (Œ∫‚ÇÇ c n ‚â§ Œ∫ c n)] [‚àÄ c n, fact (Œ∫‚ÇÇ c n ‚â§ r' * Œ∫ c n)]
  (n : ‚Ñ§) :
  (QprimeFP r' BD Œ∫ M).op ‚ãô (Ext n).flip.obj ((single _ 0).obj V.to_Cond) ‚ü∂
  (QprimeFP r' BD Œ∫‚ÇÇ M).op ‚ãô (Ext n).flip.obj ((single _ 0).obj V.to_Cond) :=
ExtQprime.Tinv r' BD Œ∫ Œ∫‚ÇÇ M V n - ExtQprime.T_inv r r' BD Œ∫ Œ∫‚ÇÇ M V n

lemma ExtQprime_iso_aux_system_comm_Tinv
  [‚àÄ c n, fact (Œ∫‚ÇÇ c n ‚â§ Œ∫ c n)] [‚àÄ c n, fact (Œ∫‚ÇÇ c n ‚â§ r' * Œ∫ c n)] (n : ‚Ñï) :
  (ExtQprime_iso_aux_system r' BD Œ∫ M V n).hom ‚â´
  whisker_right (aux_system.Tinv.{u} r' BD ‚ü®M‚ü© (SemiNormedGroup.ulift.{u+1}.obj V) Œ∫‚ÇÇ Œ∫)
    ((forget‚ÇÇ _ _).map_homological_complex _ ‚ãô homology_functor Ab.{u+1} (complex_shape.up ‚Ñï) n) =
  ExtQprime.Tinv r' BD Œ∫ Œ∫‚ÇÇ M V n ‚â´
  (ExtQprime_iso_aux_system r' BD Œ∫‚ÇÇ M V n).hom :=
sorry


-- lemma ExtQprime_iso_aux_system_comm_T_inv [normed_with_aut r V] (n : ‚Ñï) (c : ‚Ñù‚â•0·µí·µñ) :
--   (ExtQprime_iso_aux_system_obj.{u} r' BD Œ∫‚ÇÇ M V (unop.{1} c) n).hom ‚â´
--     ((forget‚ÇÇ.{u+2 u+2 u+1 u+1 u+1} SemiNormedGroup.{u+1} Ab.{u+1}).map_homological_complex (complex_shape.up.{0} ‚Ñï) ‚ãô
--    homology_functor.{u+1 u+2 0} Ab.{u+1} (complex_shape.up.{0} ‚Ñï) n).map
--   ((aux_system.res.{u u+1} r' BD ‚ü®M‚ü© (SemiNormedGroup.ulift.{u+1 u}.obj V) Œ∫‚ÇÇ Œ∫).app c) =
--   ((Ext.{u+1 u+2} ‚Üën).flip.map
--       ((single.{u+1 u+2} (Condensed.{u u+1 u+2} Ab.{u+1}) 0).map
--           (Condensed.of_top_ab_map.{u} (normed_group_hom.to_add_monoid_hom.{u u} normed_with_aut.T.{u}.inv) _))).app
--       ((QprimeFP.{u} r' BD Œ∫‚ÇÇ M).op.obj c) ‚â´
--     (ExtQprime_iso_aux_system_obj.{u} r' BD Œ∫‚ÇÇ M V (unop.{1} c) n).hom :=
-- sorry

lemma ExtQprime_iso_aux_system_comm [normed_with_aut r V]
  [‚àÄ c n, fact (Œ∫‚ÇÇ c n ‚â§ Œ∫ c n)] [‚àÄ c n, fact (Œ∫‚ÇÇ c n ‚â§ r' * Œ∫ c n)] (n : ‚Ñï) :
  (ExtQprime_iso_aux_system r' BD Œ∫ M V n).hom ‚â´
  whisker_right (aux_system.Tinv2.{u} r r' BD ‚ü®M‚ü© (SemiNormedGroup.ulift.{u+1}.obj V) Œ∫‚ÇÇ Œ∫)
    ((forget‚ÇÇ _ _).map_homological_complex _ ‚ãô homology_functor Ab.{u+1} (complex_shape.up ‚Ñï) n) =
  ExtQprime.Tinv2 r r' BD Œ∫ Œ∫‚ÇÇ M V n ‚â´
  (ExtQprime_iso_aux_system r' BD Œ∫‚ÇÇ M V n).hom :=
begin
  ext c : 2, dsimp only [aux_system.Tinv2, ExtQprime.Tinv2, nat_trans.comp_app, whisker_right_app],
  simp only [sub_comp, nat_trans.app_sub, functor.map_sub, comp_sub],
  refine congr_arg2 _ _ _,
  { rw [‚Üê nat_trans.comp_app, ‚Üê ExtQprime_iso_aux_system_comm_Tinv], refl },
  rw [nat_trans.comp_app, functor.map_comp, ExtQprime.T_inv,
    nat_trans.comp_app, whisker_right_app, whisker_left_app, category.assoc],
  dsimp only [ExtQprime_iso_aux_system, nat_iso.of_components.hom_app, aux_system,
    aux_system.res, functor.comp_map],
  sorry
end

lemma ExtQprime_iso_aux_system_comm' [normed_with_aut r V]
  [‚àÄ c n, fact (Œ∫‚ÇÇ c n ‚â§ Œ∫ c n)] [‚àÄ c n, fact (Œ∫‚ÇÇ c n ‚â§ r' * Œ∫ c n)] (n : ‚Ñï) :
  whisker_right (aux_system.Tinv2.{u} r r' BD ‚ü®M‚ü© (SemiNormedGroup.ulift.{u+1}.obj V) Œ∫‚ÇÇ Œ∫)
    ((forget‚ÇÇ _ _).map_homological_complex _ ‚ãô homology_functor Ab.{u+1} (complex_shape.up ‚Ñï) n) ‚â´
  (ExtQprime_iso_aux_system r' BD Œ∫‚ÇÇ M V n).inv =
  (ExtQprime_iso_aux_system r' BD Œ∫ M V n).inv ‚â´
  ExtQprime.Tinv2 r r' BD Œ∫ Œ∫‚ÇÇ M V n :=
begin
  rw [iso.comp_inv_eq, category.assoc, iso.eq_inv_comp],
  apply ExtQprime_iso_aux_system_comm
end

end

section

def _root_.category_theory.functor.map_commsq
  {C D : Type*} [category C] [abelian C] [category D] [abelian D] (F : C ‚•§ D) {X Y Z W : C}
  {f‚ÇÅ : X ‚ü∂ Y} {g‚ÇÅ : X ‚ü∂ Z} {g‚ÇÇ : Y ‚ü∂ W} {f‚ÇÇ : Z ‚ü∂ W} (sq : commsq f‚ÇÅ g‚ÇÅ g‚ÇÇ f‚ÇÇ) :
  commsq (F.map f‚ÇÅ) (F.map g‚ÇÅ) (F.map g‚ÇÇ) (F.map f‚ÇÇ) :=
commsq.of_eq $ by rw [‚Üê F.map_comp, sq.w, F.map_comp]

end

section

variables {r'}
variables (BD : breen_deligne.package)
variables (Œ∫ Œ∫‚ÇÇ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ (c : ‚Ñù‚â•0), BD.data.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables [‚àÄ (c : ‚Ñù‚â•0), BD.data.suitable (Œ∫‚ÇÇ c)] [‚àÄ n, fact (monotone (function.swap Œ∫‚ÇÇ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')
variables (V : SemiNormedGroup.{u}) [complete_space V] [separated_space V]

open bounded_homotopy_category

-- move me
instance eval'_is_bounded_above :
  ((homotopy_category.quotient (Condensed Ab) (complex_shape.up ‚Ñ§)).obj
    ((BD.eval' freeCond').obj M.to_Condensed)).is_bounded_above :=
by { delta breen_deligne.package.eval', refine ‚ü®‚ü®1, _‚ü©‚ü©, apply chain_complex.bounded_by_one }

variables (Œπ : ulift.{u+1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ)

def Ext_Tinv2
  {ùìê : Type*} [category ùìê] [abelian ùìê] [enough_projectives ùìê]
  {A B V : bounded_homotopy_category ùìê}
  (Tinv : A ‚ü∂ B) (Œπ : A ‚ü∂ B) (T_inv : V ‚ü∂ V) (i : ‚Ñ§) :
  ((Ext i).obj (op B)).obj V ‚ü∂ ((Ext i).obj (op A)).obj V :=
(((Ext i).map Tinv.op).app V - (((Ext i).map Œπ.op).app V ‚â´ ((Ext i).obj _).map T_inv))

open category_theory.preadditive

def Ext_Tinv2_commsq
  {ùìê : Type*} [category ùìê] [abelian ùìê] [enough_projectives ùìê]
  {A‚ÇÅ B‚ÇÅ A‚ÇÇ B‚ÇÇ V : bounded_homotopy_category ùìê}
  (Tinv‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ) (Œπ‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ)
  (Tinv‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ) (Œπ‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ)
  (f : A‚ÇÅ ‚ü∂ A‚ÇÇ) (g : B‚ÇÅ ‚ü∂ B‚ÇÇ) (sqT : f ‚â´ Tinv‚ÇÇ = Tinv‚ÇÅ ‚â´ g) (sqŒπ : f ‚â´ Œπ‚ÇÇ = Œπ‚ÇÅ ‚â´ g)
  (T_inv : V ‚ü∂ V) (i : ‚Ñ§) :
  commsq
    (((Ext i).map g.op).app V)
    (Ext_Tinv2 Tinv‚ÇÇ Œπ‚ÇÇ T_inv i)
    (Ext_Tinv2 Tinv‚ÇÅ Œπ‚ÇÅ T_inv i)
    (((Ext i).map f.op).app V) :=
commsq.of_eq
begin
  delta Ext_Tinv2,
  simp only [comp_sub, sub_comp, ‚Üê nat_trans.comp_app, ‚Üê functor.map_comp, ‚Üê op_comp, sqT,
    ‚Üê nat_trans.naturality, ‚Üê nat_trans.naturality_assoc, category.assoc, sqŒπ],
end

open category_theory.preadditive

lemma auux
  {ùìê : Type*} [category ùìê] [abelian ùìê] [enough_projectives ùìê]
  {A‚ÇÅ B‚ÇÅ A‚ÇÇ B‚ÇÇ : cochain_complex ùìê ‚Ñ§}
  [((homotopy_category.quotient ùìê (complex_shape.up ‚Ñ§)).obj A‚ÇÅ).is_bounded_above]
  [((homotopy_category.quotient ùìê (complex_shape.up ‚Ñ§)).obj B‚ÇÅ).is_bounded_above]
  [((homotopy_category.quotient ùìê (complex_shape.up ‚Ñ§)).obj A‚ÇÇ).is_bounded_above]
  [((homotopy_category.quotient ùìê (complex_shape.up ‚Ñ§)).obj B‚ÇÇ).is_bounded_above]
  {f‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ} {f‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ} {Œ± : A‚ÇÅ ‚ü∂ A‚ÇÇ} {Œ≤ : B‚ÇÅ ‚ü∂ B‚ÇÇ}
  (sq1 : commsq f‚ÇÅ Œ± Œ≤ f‚ÇÇ) :
  of_hom f‚ÇÅ ‚â´ of_hom Œ≤ = of_hom Œ± ‚â´ of_hom f‚ÇÇ :=
begin
  have := sq1.w,
  apply_fun (Œª f, (homotopy_category.quotient _ _).map f) at this,
  simp only [functor.map_comp] at this,
  exact this,
end

@[simp] lemma of_hom_id
  {ùìê : Type*} [category ùìê] [abelian ùìê] [enough_projectives ùìê]
  {A : cochain_complex ùìê ‚Ñ§}
  [((homotopy_category.quotient ùìê (complex_shape.up ‚Ñ§)).obj A).is_bounded_above] :
  of_hom (ùüô A) = ùüô _ :=
by { delta of_hom, rw [category_theory.functor.map_id], refl }

lemma Ext_iso_of_bicartesian_of_bicartesian
  {ùìê : Type*} [category ùìê] [abelian ùìê] [enough_projectives ùìê]
  {A‚ÇÅ B‚ÇÅ C A‚ÇÇ B‚ÇÇ : cochain_complex ùìê ‚Ñ§}
  [((homotopy_category.quotient ùìê (complex_shape.up ‚Ñ§)).obj A‚ÇÅ).is_bounded_above]
  [((homotopy_category.quotient ùìê (complex_shape.up ‚Ñ§)).obj B‚ÇÅ).is_bounded_above]
  [((homotopy_category.quotient ùìê (complex_shape.up ‚Ñ§)).obj C).is_bounded_above]
  [((homotopy_category.quotient ùìê (complex_shape.up ‚Ñ§)).obj A‚ÇÇ).is_bounded_above]
  [((homotopy_category.quotient ùìê (complex_shape.up ‚Ñ§)).obj B‚ÇÇ).is_bounded_above]
  {f‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ} {g‚ÇÅ : B‚ÇÅ ‚ü∂ C} (w‚ÇÅ : ‚àÄ n, short_exact (f‚ÇÅ.f n) (g‚ÇÅ.f n))
  {f‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ} {g‚ÇÇ : B‚ÇÇ ‚ü∂ C} (w‚ÇÇ : ‚àÄ n, short_exact (f‚ÇÇ.f n) (g‚ÇÇ.f n))
  (Œ± : A‚ÇÅ ‚ü∂ A‚ÇÇ) (Œ≤ : B‚ÇÅ ‚ü∂ B‚ÇÇ) (Œ≥ : C ‚ü∂ C)
  (ŒπA : A‚ÇÅ ‚ü∂ A‚ÇÇ) (ŒπB : B‚ÇÅ ‚ü∂ B‚ÇÇ)
  (sq1 : commsq f‚ÇÅ Œ± Œ≤ f‚ÇÇ) (sq2 : commsq g‚ÇÅ Œ≤ Œ≥ g‚ÇÇ)
  (sq1' : commsq f‚ÇÅ ŒπA ŒπB f‚ÇÇ) (sq2' : commsq g‚ÇÅ ŒπB (ùüô _) g‚ÇÇ)
  (V : bounded_homotopy_category ùìê) (T_inv : V ‚ü∂ V)
  (i : ‚Ñ§)
  (H1 : (Ext_Tinv2_commsq (of_hom Œ±) (of_hom ŒπA) (of_hom Œ≤) (of_hom ŒπB) (of_hom f‚ÇÅ) (of_hom f‚ÇÇ)
    (auux sq1) (auux sq1') T_inv i).bicartesian)
  (H2 : (Ext_Tinv2_commsq (of_hom Œ±) (of_hom ŒπA) (of_hom Œ≤) (of_hom ŒπB) (of_hom f‚ÇÅ) (of_hom f‚ÇÇ)
    (auux sq1) (auux sq1') T_inv (i+1)).bicartesian) :
  is_iso (Ext_Tinv2 (of_hom Œ≥) (ùüô _) T_inv (i+1)) :=
begin
  have LES‚ÇÅ := (((Ext_five_term_exact_seq' _ _ i V w‚ÇÅ).drop 2).pair.cons (Ext_five_term_exact_seq' _ _ (i+1) V w‚ÇÅ)),
  replace LES‚ÇÅ := (((Ext_five_term_exact_seq' _ _ i V w‚ÇÅ).drop 1).pair.cons LES‚ÇÅ).extract 0 4,
  have LES‚ÇÇ := (((Ext_five_term_exact_seq' _ _ i V w‚ÇÇ).drop 2).pair.cons (Ext_five_term_exact_seq' _ _ (i+1) V w‚ÇÇ)).extract 0 4,
  replace LES‚ÇÇ := (((Ext_five_term_exact_seq' _ _ i V w‚ÇÇ).drop 1).pair.cons LES‚ÇÇ).extract 0 4,
  refine iso_of_bicartesian_of_bicartesian LES‚ÇÇ LES‚ÇÅ _ _ _ _ H1 H2,
  { apply commsq.of_eq, delta Ext_Tinv2, clear LES‚ÇÅ LES‚ÇÇ,
    rw [sub_comp, comp_sub, ‚Üê functor.flip_obj_map, ‚Üê functor.flip_obj_map],
    rw ‚Üê Ext_Œ¥_natural i V _ _ _ _ Œ± Œ≤ Œ≥ sq1.w sq2.w w‚ÇÅ w‚ÇÇ,
    congr' 1,
    rw [‚Üê nat_trans.naturality, ‚Üê functor.flip_obj_map, category.assoc,
      Ext_Œ¥_natural i V _ _ _ _ ŒπA ŒπB (ùüô _) sq1'.w sq2'.w w‚ÇÅ w‚ÇÇ],
    simp only [op_id, category_theory.functor.map_id, nat_trans.id_app,
      category.id_comp, of_hom_id, category.comp_id],
    erw [category.id_comp],
    symmetry,
    apply Ext_Œ¥_natural', },
  { apply Ext_Tinv2_commsq,
    { exact auux sq2 },
    { exact auux sq2' }, },
end

end
