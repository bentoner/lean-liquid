import pseudo_normed_group.category.CompHausFiltPseuNormGrpWithTinv
/-!

# The category of profinitely filtered pseudo-normed groups (and friends).

The category of profinite pseudo-normed groups, and the category of
profinitely filtered pseudo-normed groups equipped with an action of T‚Åª¬π.

-/
universe variables u

open category_theory
open_locale nnreal

local attribute [instance] type_pow

noncomputable theory

/-- The category of profinitely filtered pseudo-normed groups with action of `T‚Åª¬π`. -/
def ProFiltPseuNormGrpWithTinv (r : ‚Ñù‚â•0) : Type (u+1) :=
bundled (@profinitely_filtered_pseudo_normed_group_with_Tinv r)

namespace ProFiltPseuNormGrpWithTinv

variables (r' : ‚Ñù‚â•0)

local attribute [instance] CompHausFiltPseuNormGrpWithTinv.bundled_hom

def bundled_hom : bundled_hom.parent_projection
  (@profinitely_filtered_pseudo_normed_group_with_Tinv.to_comphaus_filtered_pseudo_normed_group_with_Tinv r') := ‚ü®‚ü©

local attribute [instance] bundled_hom

/-
instance bundled_hom : bundled_hom (@comphaus_filtered_pseudo_normed_group_with_Tinv_hom r') :=
‚ü®@comphaus_filtered_pseudo_normed_group_with_Tinv_hom.to_fun r',
 @comphaus_filtered_pseudo_normed_group_with_Tinv_hom.id r',
 @comphaus_filtered_pseudo_normed_group_with_Tinv_hom.comp r',
 @comphaus_filtered_pseudo_normed_group_with_Tinv_hom.coe_inj r'‚ü©
-/

attribute [derive [Œª Œ±, has_coe_to_sort Œ± (Sort*), large_category, concrete_category]]
  ProFiltPseuNormGrpWithTinv

/-- Construct a bundled `ProFiltPseuNormGrpWithTinv` from the underlying type and typeclass. -/
def of (r' : ‚Ñù‚â•0) (M : Type u) [profinitely_filtered_pseudo_normed_group_with_Tinv r' M] :
  ProFiltPseuNormGrpWithTinv r' :=
bundled.of M

instance : has_zero (ProFiltPseuNormGrpWithTinv r') :=
‚ü®{ Œ± := punit, str := punit.profinitely_filtered_pseudo_normed_group_with_Tinv r' }‚ü©

instance : inhabited (ProFiltPseuNormGrpWithTinv r') := ‚ü®0‚ü©

instance (M : ProFiltPseuNormGrpWithTinv r') :
  profinitely_filtered_pseudo_normed_group_with_Tinv r' M := M.str

@[simp] lemma coe_of (V : Type u) [profinitely_filtered_pseudo_normed_group_with_Tinv r' V] :
  (ProFiltPseuNormGrpWithTinv.of r' V : Type u) = V := rfl

@[simp] lemma of_coe (M : ProFiltPseuNormGrpWithTinv r') : of r' M = M :=
by { cases M, refl }

@[simp] lemma coe_id (V : ProFiltPseuNormGrpWithTinv r') : ‚áë(ùüô V) = id := rfl

@[simp] lemma coe_comp {A B C : ProFiltPseuNormGrpWithTinv r'} (f : A ‚ü∂ B) (g : B ‚ü∂ C) :
  ‚áë(f ‚â´ g) = g ‚àò f := rfl

@[simp] lemma coe_comp_apply {A B C : ProFiltPseuNormGrpWithTinv r'} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (x : A) :
  (f ‚â´ g) x = g (f x) := rfl
open pseudo_normed_group

section

variables (M : Type*) [profinitely_filtered_pseudo_normed_group_with_Tinv r' M] (c : ‚Ñù‚â•0)
include r'

instance : t2_space (Top.of (filtration M c)) := by { dsimp, apply_instance }
instance : totally_disconnected_space (Top.of (filtration M c)) := by { dsimp, apply_instance }
instance : compact_space (Top.of (filtration M c)) := by { dsimp, apply_instance }

end

-- @[simps] def Filtration (c : ‚Ñù‚â•0) : ProFiltPseuNormGrp ‚•§ Profinite :=
-- { obj := Œª M, ‚ü®Top.of (filtration M c)‚ü©,
--   map := Œª M‚ÇÅ M‚ÇÇ f, ‚ü®f.level c, f.level_continuous c‚ü©,
--   map_id' := by { intros, ext, refl },
--   map_comp' := by { intros, ext, refl } }


open pseudo_normed_group comphaus_filtered_pseudo_normed_group_with_Tinv_hom

open profinitely_filtered_pseudo_normed_group_with_Tinv (Tinv)

variables {r'}
variables {M M‚ÇÅ M‚ÇÇ : ProFiltPseuNormGrpWithTinv.{u} r'}
variables {f : M‚ÇÅ ‚ü∂ M‚ÇÇ}

/-- The isomorphism induced by a bijective `comphaus_filtered_pseudo_normed_group_with_Tinv_hom`
whose inverse is strict. -/
def iso_of_equiv_of_strict (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ) (he : ‚àÄ x, f x = e x)
  (strict : ‚àÄ ‚¶Éc x‚¶Ñ, x ‚àà filtration M‚ÇÇ c ‚Üí e.symm x ‚àà filtration M‚ÇÅ c) :
  M‚ÇÅ ‚âÖ M‚ÇÇ :=
{ hom := f,
  inv := inv_of_equiv_of_strict e he strict,
  hom_inv_id' := by { ext x, simp [inv_of_equiv_of_strict, he] },
  inv_hom_id' := by { ext x, simp [inv_of_equiv_of_strict, he] } }

@[simp]
lemma iso_of_equiv_of_strict.apply (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ) (he : ‚àÄ x, f x = e x)
  (strict : ‚àÄ ‚¶Éc x‚¶Ñ, x ‚àà filtration M‚ÇÇ c ‚Üí e.symm x ‚àà filtration M‚ÇÅ c) (x : M‚ÇÅ) :
  (iso_of_equiv_of_strict e he strict).hom x = f x := rfl

@[simp]
lemma iso_of_equiv_of_strict_symm.apply (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ) (he : ‚àÄ x, f x = e x)
  (strict : ‚àÄ ‚¶Éc x‚¶Ñ, x ‚àà filtration M‚ÇÇ c ‚Üí e.symm x ‚àà filtration M‚ÇÅ c) (x : M‚ÇÇ) :
  (iso_of_equiv_of_strict e he strict).symm.hom x = e.symm x := rfl

def iso_of_equiv_of_strict'
  (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ)
  (strict' : ‚àÄ c x, x ‚àà filtration M‚ÇÅ c ‚Üî e x ‚àà filtration M‚ÇÇ c)
  (continuous' : ‚àÄ c, continuous (pseudo_normed_group.level e (Œª c x, (strict' c x).1) c))
  (map_Tinv' : ‚àÄ x, e (Tinv x) = Tinv (e x)) :
  M‚ÇÅ ‚âÖ M‚ÇÇ :=
@iso_of_equiv_of_strict r' M‚ÇÅ M‚ÇÇ
 {to_fun := e,
  strict' := Œª c x, (strict' c x).1,
  continuous' := continuous',
  map_Tinv' := map_Tinv',
  ..e.to_add_monoid_hom } e (Œª _, rfl)
  (by { intros c x hx, rwa [strict', e.apply_symm_apply] })

@[simp]
lemma iso_of_equiv_of_strict'_hom_apply
  (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ)
  (strict' : ‚àÄ c x, x ‚àà filtration M‚ÇÅ c ‚Üî e x ‚àà filtration M‚ÇÇ c)
  (continuous' : ‚àÄ c, continuous (pseudo_normed_group.level e (Œª c x, (strict' c x).1) c))
  (map_Tinv' : ‚àÄ x, e (Tinv x) = Tinv (e x))
  (x : M‚ÇÅ) :
  (iso_of_equiv_of_strict' e strict' continuous' map_Tinv').hom x = e x := rfl

@[simp]
lemma iso_of_equiv_of_strict'_inv_apply
  (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ)
  (strict' : ‚àÄ c x, x ‚àà filtration M‚ÇÅ c ‚Üî e x ‚àà filtration M‚ÇÇ c)
  (continuous' : ‚àÄ c, continuous (pseudo_normed_group.level e (Œª c x, (strict' c x).1) c))
  (map_Tinv' : ‚àÄ x, e (Tinv x) = Tinv (e x))
  (x : M‚ÇÇ) :
  (iso_of_equiv_of_strict' e strict' continuous' map_Tinv').inv x = e.symm x := rfl

variables (r')

@[simps]
def Pow (n : ‚Ñï) : ProFiltPseuNormGrpWithTinv.{u} r' ‚•§ ProFiltPseuNormGrpWithTinv.{u} r' :=
{ obj := Œª M, of r' $ M ^ n,
  map := Œª M‚ÇÅ M‚ÇÇ f, profinitely_filtered_pseudo_normed_group_with_Tinv.pi_map r' _ _ (Œª i, f),
  map_id' := Œª M, by { ext, refl },
  map_comp' := by { intros, ext, refl } }

@[simps]
def Pow_Pow_X_equiv (N n : ‚Ñï) :
  M ^ (N * n) ‚âÉ+ (M ^ N) ^ n :=
{ to_fun := ((equiv.curry _ _ _).symm.trans (((equiv.prod_comm _ _).trans fin_prod_fin_equiv).arrow_congr (equiv.refl _))).symm,
  map_add' := Œª x y, by { ext, refl },
  .. ((equiv.curry _ _ _).symm.trans (((equiv.prod_comm _ _).trans fin_prod_fin_equiv).arrow_congr (equiv.refl _))).symm }

open profinitely_filtered_pseudo_normed_group
open comphaus_filtered_pseudo_normed_group

@[simps]
def Pow_Pow_X (N n : ‚Ñï) (M : ProFiltPseuNormGrpWithTinv.{u} r') :
  (Pow r' N ‚ãô Pow r' n).obj M ‚âÖ (Pow r' (N * n)).obj M :=
iso.symm $
iso_of_equiv_of_strict'
  (Pow_Pow_X_equiv r' N n)
  begin
    intros c x,
    dsimp,
    split; intro h,
    { intros i j, exact h (fin_prod_fin_equiv (j, i)) },
    { intro ij,
      have := h (fin_prod_fin_equiv.symm ij).2 (fin_prod_fin_equiv.symm ij).1,
      dsimp [-fin_prod_fin_equiv_symm_apply] at this,
      simpa only [prod.mk.eta, equiv.apply_symm_apply] using this, },
  end
  begin
    intro c, dsimp,
    rw [‚Üê (filtration_pi_homeo (Œª _, M ^ N) c).comp_continuous_iff,
        ‚Üê (filtration_pi_homeo (Œª _, M) c).symm.comp_continuous_iff'],
    apply continuous_pi,
    intro i,
    rw [‚Üê (filtration_pi_homeo (Œª _, M) c).comp_continuous_iff],
    apply continuous_pi,
    intro j,
    have := @continuous_apply _ (Œª _, filtration M c) _ (fin_prod_fin_equiv (j, i)),
    dsimp [function.comp] at this ‚ä¢,
    simpa only [subtype.coe_eta],
  end
  (by { intros, ext, refl })

@[simps hom inv]
def Pow_mul (N n : ‚Ñï) : Pow r' (N * n) ‚âÖ Pow r' N ‚ãô Pow r' n :=
nat_iso.of_components (Œª M, (Pow_Pow_X r' N n M).symm)
begin
  intros X Y f,
  ext x i j,
  refl,
end

end ProFiltPseuNormGrpWithTinv
