import category_theory.concrete_category.bundled_hom
import topology.category.Profinite

import pseudo_normed_group.with_Tinv

/-!

# The category of profinitely filtered pseudo normed groups.

The category of profinite pseudo-normed groups, and the category of
profinitely filtered pseudo-normed groups equipped with an action of T‚Åª¬π.

-/
universe variables u

open category_theory
open_locale nnreal

/-- The category of profinitely filtered pseudo normed groups. -/
def ProFiltPseuNormGrp : Type (u+1) :=
bundled profinitely_filtered_pseudo_normed_group

/-- The category of profinitely filtered pseudo normed groups with action of `T‚Åª¬π`. -/
def ProFiltPseuNormGrpWithTinv (r : ‚Ñù‚â•0) : Type (u+1) :=
bundled (@profinitely_filtered_pseudo_normed_group_with_Tinv r)

namespace ProFiltPseuNormGrp

instance bundled_hom : bundled_hom @profinitely_filtered_pseudo_normed_group_hom :=
‚ü®@profinitely_filtered_pseudo_normed_group_hom.to_fun,
 @profinitely_filtered_pseudo_normed_group_hom.id,
 @profinitely_filtered_pseudo_normed_group_hom.comp,
 @profinitely_filtered_pseudo_normed_group_hom.coe_inj‚ü©

attribute [derive [has_coe_to_sort, large_category, concrete_category]] ProFiltPseuNormGrp

/-- Construct a bundled `ProFiltPseuNormGrp` from the underlying type and typeclass. -/
def of (M : Type u) [profinitely_filtered_pseudo_normed_group M] : ProFiltPseuNormGrp :=
bundled.of M

instance : has_zero ProFiltPseuNormGrp := ‚ü®of punit‚ü©

instance : inhabited ProFiltPseuNormGrp := ‚ü®0‚ü©

instance (M : ProFiltPseuNormGrp) : profinitely_filtered_pseudo_normed_group M := M.str

@[simp] lemma coe_of (V : Type u) [profinitely_filtered_pseudo_normed_group V] : (ProFiltPseuNormGrp.of V : Type u) = V := rfl

@[simp] lemma coe_id (V : ProFiltPseuNormGrp) : ‚áë(ùüô V) = id := rfl

@[simp] lemma coe_comp {A B C : ProFiltPseuNormGrp} (f : A ‚ü∂ B) (g : B ‚ü∂ C) :
  ‚áë(f ‚â´ g) = g ‚àò f := rfl

@[simp] lemma coe_comp_apply {A B C : ProFiltPseuNormGrp} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (x : A) :
  (f ‚â´ g) x = g (f x) := rfl

open pseudo_normed_group

section

variables (M : Type*) [profinitely_filtered_pseudo_normed_group M] (c : ‚Ñù‚â•0)

instance : t2_space (Top.of (filtration M c)) := by { dsimp, apply_instance }
instance : totally_disconnected_space (Top.of (filtration M c)) := by { dsimp, apply_instance }
instance : compact_space (Top.of (filtration M c)) := by { dsimp, apply_instance }

end

end ProFiltPseuNormGrp

namespace ProFiltPseuNormGrpWithTinv

variables (r' : ‚Ñù‚â•0)

instance bundled_hom : bundled_hom (@profinitely_filtered_pseudo_normed_group_with_Tinv_hom r') :=
‚ü®@profinitely_filtered_pseudo_normed_group_with_Tinv_hom.to_fun r',
 @profinitely_filtered_pseudo_normed_group_with_Tinv_hom.id r',
 @profinitely_filtered_pseudo_normed_group_with_Tinv_hom.comp r',
 @profinitely_filtered_pseudo_normed_group_with_Tinv_hom.coe_inj r'‚ü©

attribute [derive [has_coe_to_sort, large_category, concrete_category]] ProFiltPseuNormGrpWithTinv

/-- Construct a bundled `ProFiltPseuNormGrpWithTinv` from the underlying type and typeclass. -/
def of (r' : ‚Ñù‚â•0) (M : Type u) [profinitely_filtered_pseudo_normed_group_with_Tinv r' M] :
  ProFiltPseuNormGrpWithTinv r' :=
bundled.of M

instance : has_zero (ProFiltPseuNormGrpWithTinv r') :=
‚ü®{ Œ± := punit, str := punit.profinitely_filtered_pseudo_normed_group_with_Tinv r' }‚ü©

instance : inhabited (ProFiltPseuNormGrpWithTinv r') := ‚ü®0‚ü©

instance (M : ProFiltPseuNormGrpWithTinv r') :
  profinitely_filtered_pseudo_normed_group_with_Tinv r' M := M.str

@[simp] lemma coe_of (V : Type u) [profinitely_filtered_pseudo_normed_group_with_Tinv r' V] :
  (ProFiltPseuNormGrpWithTinv.of r' V : Type u) = V := rfl

@[simp] lemma of_coe (M : ProFiltPseuNormGrpWithTinv r') : of r' M = M :=
by { cases M, refl }

@[simp] lemma coe_id (V : ProFiltPseuNormGrpWithTinv r') : ‚áë(ùüô V) = id := rfl

@[simp] lemma coe_comp {A B C : ProFiltPseuNormGrpWithTinv r'} (f : A ‚ü∂ B) (g : B ‚ü∂ C) :
  ‚áë(f ‚â´ g) = g ‚àò f := rfl

@[simp] lemma coe_comp_apply {A B C : ProFiltPseuNormGrpWithTinv r'} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (x : A) :
  (f ‚â´ g) x = g (f x) := rfl
open pseudo_normed_group

section

variables (M : Type*) [profinitely_filtered_pseudo_normed_group_with_Tinv r' M] (c : ‚Ñù‚â•0)
include r'

instance : t2_space (Top.of (filtration M c)) := by { dsimp, apply_instance }
instance : totally_disconnected_space (Top.of (filtration M c)) := by { dsimp, apply_instance }
instance : compact_space (Top.of (filtration M c)) := by { dsimp, apply_instance }

end

-- @[simps] def Filtration (c : ‚Ñù‚â•0) : ProFiltPseuNormGrp ‚•§ Profinite :=
-- { obj := Œª M, ‚ü®Top.of (filtration M c)‚ü©,
--   map := Œª M‚ÇÅ M‚ÇÇ f, ‚ü®f.level c, f.level_continuous c‚ü©,
--   map_id' := by { intros, ext, refl },
--   map_comp' := by { intros, ext, refl } }


open pseudo_normed_group profinitely_filtered_pseudo_normed_group_with_Tinv_hom

open profinitely_filtered_pseudo_normed_group_with_Tinv (Tinv)

variables {r'}
variables {M M‚ÇÅ M‚ÇÇ : ProFiltPseuNormGrpWithTinv.{u} r'}
variables {f : M‚ÇÅ ‚ü∂ M‚ÇÇ}

/-- The isomorphism induced by a bijective `profinitely_filtered_pseudo_normed_group_with_Tinv_hom`
whose inverse is strict. -/
def iso_of_equiv_of_strict (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ) (he : ‚àÄ x, f x = e x)
  (strict : ‚àÄ ‚¶Éc x‚¶Ñ, x ‚àà filtration M‚ÇÇ c ‚Üí e.symm x ‚àà filtration M‚ÇÅ c) :
  M‚ÇÅ ‚âÖ M‚ÇÇ :=
{ hom := f,
  inv := inv_of_equiv_of_strict e he strict,
  hom_inv_id' := by { ext x, simp [inv_of_equiv_of_strict, he] },
  inv_hom_id' := by { ext x, simp [inv_of_equiv_of_strict, he] } }

@[simp]
lemma iso_of_equiv_of_strict.apply (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ) (he : ‚àÄ x, f x = e x)
  (strict : ‚àÄ ‚¶Éc x‚¶Ñ, x ‚àà filtration M‚ÇÇ c ‚Üí e.symm x ‚àà filtration M‚ÇÅ c) (x : M‚ÇÅ) :
  (iso_of_equiv_of_strict e he strict).hom x = f x := rfl

@[simp]
lemma iso_of_equiv_of_strict_symm.apply (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ) (he : ‚àÄ x, f x = e x)
  (strict : ‚àÄ ‚¶Éc x‚¶Ñ, x ‚àà filtration M‚ÇÇ c ‚Üí e.symm x ‚àà filtration M‚ÇÅ c) (x : M‚ÇÇ) :
  (iso_of_equiv_of_strict e he strict).symm.hom x = e.symm x := rfl

def iso_of_equiv_of_strict'
  (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ)
  (strict' : ‚àÄ c x, x ‚àà filtration M‚ÇÅ c ‚Üî e x ‚àà filtration M‚ÇÇ c)
  (continuous' : ‚àÄ c, continuous (pseudo_normed_group.level e (Œª c x, (strict' c x).1) c))
  (map_Tinv' : ‚àÄ x, e (Tinv x) = Tinv (e x)) :
  M‚ÇÅ ‚âÖ M‚ÇÇ :=
@iso_of_equiv_of_strict r' M‚ÇÅ M‚ÇÇ
 {to_fun := e,
  strict' := Œª c x, (strict' c x).1,
  continuous' := continuous',
  map_Tinv' := map_Tinv',
  ..e.to_add_monoid_hom } e (Œª _, rfl)
  (by { intros c x hx, rwa [strict', e.apply_symm_apply] })

end ProFiltPseuNormGrpWithTinv
