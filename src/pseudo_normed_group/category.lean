import category_theory.concrete_category.bundled_hom
import topology.category.Profinite
import data.equiv.fin
import for_mathlib.concrete
import for_mathlib.CompHaus

import pseudo_normed_group.with_Tinv

/-!

# The category of profinitely filtered pseudo-normed groups.

The category of profinite pseudo-normed groups, and the category of
profinitely filtered pseudo-normed groups equipped with an action of T‚Åª¬π.

-/
universe variables u

open category_theory
open_locale nnreal

local attribute [instance] type_pow

noncomputable theory

/-- The category of CompHaus-ly filtered pseudo-normed groups. -/
def CompHausFiltPseuNormGrp : Type (u+1) :=
bundled comphaus_filtered_pseudo_normed_group

namespace CompHausFiltPseuNormGrp

def bundled_hom : bundled_hom @comphaus_filtered_pseudo_normed_group_hom :=
‚ü®@comphaus_filtered_pseudo_normed_group_hom.to_fun,
 @comphaus_filtered_pseudo_normed_group_hom.id,
 @comphaus_filtered_pseudo_normed_group_hom.comp,
 @comphaus_filtered_pseudo_normed_group_hom.coe_inj‚ü©

local attribute [instance] bundled_hom
attribute [derive [has_coe_to_sort, large_category, concrete_category]] CompHausFiltPseuNormGrp

instance (M : CompHausFiltPseuNormGrp) : comphaus_filtered_pseudo_normed_group M := M.str

/-- Construct a bundled `CompHausFiltPseuNormGrp` from the underlying type and typeclass. -/
def of (M : Type u) [comphaus_filtered_pseudo_normed_group M] : CompHausFiltPseuNormGrp :=
bundled.of M

end CompHausFiltPseuNormGrp

/-- The category of CompHaus-ly filtered pseudo-normed groups with strict morphisms. -/
structure CompHausFiltPseuNormGrp‚ÇÅ : Type (u+1) :=
(M : Type u)
[str : comphaus_filtered_pseudo_normed_group M]
(exhaustive' : ‚àÄ m : M, ‚àÉ c, m ‚àà pseudo_normed_group.filtration M c)


namespace CompHausFiltPseuNormGrp‚ÇÅ

instance : has_coe_to_sort CompHausFiltPseuNormGrp‚ÇÅ := ‚ü®Type*, Œª M, M.M‚ü©
instance (M : CompHausFiltPseuNormGrp‚ÇÅ) : comphaus_filtered_pseudo_normed_group M := M.str

lemma exhaustive (M : CompHausFiltPseuNormGrp‚ÇÅ) (m : M) :
  ‚àÉ c, m ‚àà pseudo_normed_group.filtration M c := M.exhaustive' _

/-
def bundled_hom : bundled_hom @strict_comphaus_filtered_pseudo_normed_group_hom :=
‚ü®@strict_comphaus_filtered_pseudo_normed_group_hom.to_fun,
 @strict_comphaus_filtered_pseudo_normed_group_hom.id,
 @strict_comphaus_filtered_pseudo_normed_group_hom.comp,
 @strict_comphaus_filtered_pseudo_normed_group_hom.coe_inj‚ü©

local attribute [instance] bundled_hom
attribute [derive [has_coe_to_sort, large_category, concrete_category]] CompHausFiltPseuNormGrp‚ÇÅ
-/

instance : large_category CompHausFiltPseuNormGrp‚ÇÅ.{u} :=
{ hom := Œª A B, strict_comphaus_filtered_pseudo_normed_group_hom A B,
  id := Œª A, strict_comphaus_filtered_pseudo_normed_group_hom.id,
  comp := Œª A B C f g, g.comp f }

def enlarging_functor : CompHausFiltPseuNormGrp‚ÇÅ ‚•§ CompHausFiltPseuNormGrp :=
{ obj := Œª M, CompHausFiltPseuNormGrp.of M,
  map := Œª M‚ÇÅ M‚ÇÇ f, f.to_chfpsng_hom }

instance : concrete_category CompHausFiltPseuNormGrp‚ÇÅ.{u} :=
{ forget :=
  { obj := Œª M, M.M,
    map := Œª A B f, f },
  forget_faithful := ‚ü®‚ü© } .

def level : ‚Ñù‚â•0 ‚•§ CompHausFiltPseuNormGrp‚ÇÅ.{u} ‚•§ CompHaus :=
{ obj := Œª c,
  { obj := Œª M, CompHaus.of $ pseudo_normed_group.filtration M c,
    map := Œª A B f, ‚ü®_, f.level_continuous _‚ü© },
  map := Œª c‚ÇÅ c‚ÇÇ h,
    { app := Œª M, by letI : fact (c‚ÇÅ ‚â§ c‚ÇÇ) := ‚ü®le_of_hom h‚ü©; exact
        ‚ü®_, comphaus_filtered_pseudo_normed_group.continuous_cast_le _ _‚ü© } } .

section limits

/-!
In this section, we show (hopefully ;)) that `CompHausFiltPseuNormGrp‚ÇÅ` has limits.
-/

variables {J : Type u} [small_category J] (G : J ‚•§ CompHausFiltPseuNormGrp‚ÇÅ.{u})

open category_theory.limits

/-- This is a bifunctor which associates to each `c : ‚Ñù‚â•0` and `j : J`,
  the `c`-th term of the filtration of `G.obj j`. -/
def cone_point_diagram : as_small.{u} ‚Ñù‚â•0 ‚•§ J ‚•§ CompHaus.{u} :=
as_small.down ‚ãô level ‚ãô (whiskering_left _ _ _).obj G

def cone_point_type : Type u :=
colimit (cone_point_diagram G ‚ãô lim ‚ãô forget _)

def cone_point_type_filt (c : ‚Ñù‚â•0) : CompHaus :=
limit ((cone_point_diagram G).obj (as_small.up.obj c))

def incl (c : ‚Ñù‚â•0) : cone_point_type_filt G c ‚Üí cone_point_type G :=
colimit.Œπ (cone_point_diagram G ‚ãô lim ‚ãô forget _) (as_small.up.obj c)

lemma incl_injective (c : ‚Ñù‚â•0) : function.injective (incl G c) := sorry

lemma incl_jointly_surjective (x : cone_point_type G) :
  ‚àÉ (c : ‚Ñù‚â•0) (y : cone_point_type_filt G c), x = incl G c y := sorry

instance (c : ‚Ñù‚â•0) : has_zero ‚Ü•(cone_point_type_filt G c) :=
has_zero.mk (concrete_category.limit.mk _
  (Œª j, (0 : pseudo_normed_group.filtration _ _)) begin
    intros i j e,
    dsimp [cone_point_diagram, level],
    ext1,
    simp [(G.map e).map_zero],
  end)

instance : has_zero (cone_point_type G) := ‚ü®incl G 0 0‚ü©

-- This is the goal of this section...
instance : has_limits CompHausFiltPseuNormGrp‚ÇÅ := sorry

end limits

end CompHausFiltPseuNormGrp‚ÇÅ

/-- The category of profinitely filtered pseudo-normed groups. -/
def ProFiltPseuNormGrp : Type (u+1) :=
bundled profinitely_filtered_pseudo_normed_group

/-- The category of profinitely filtered pseudo-normed groups with action of `T‚Åª¬π`. -/
def ProFiltPseuNormGrpWithTinv (r : ‚Ñù‚â•0) : Type (u+1) :=
bundled (@profinitely_filtered_pseudo_normed_group_with_Tinv r)

namespace ProFiltPseuNormGrp

local attribute [instance] CompHausFiltPseuNormGrp.bundled_hom

def bundled_hom : bundled_hom.parent_projection
  @profinitely_filtered_pseudo_normed_group.to_comphaus_filtered_pseudo_normed_group := ‚ü®‚ü©

local attribute [instance] bundled_hom

attribute [derive [has_coe_to_sort, large_category, concrete_category]] ProFiltPseuNormGrp

instance : has_forget‚ÇÇ ProFiltPseuNormGrp CompHausFiltPseuNormGrp := bundled_hom.forget‚ÇÇ _ _

@[simps]
def to_CompHausFilt : ProFiltPseuNormGrp ‚•§ CompHausFiltPseuNormGrp := forget‚ÇÇ _ _

/-- Construct a bundled `ProFiltPseuNormGrp` from the underlying type and typeclass. -/
def of (M : Type u) [profinitely_filtered_pseudo_normed_group M] : ProFiltPseuNormGrp :=
bundled.of M

instance : has_zero ProFiltPseuNormGrp := ‚ü®of punit‚ü©

instance : inhabited ProFiltPseuNormGrp := ‚ü®0‚ü©

instance (M : ProFiltPseuNormGrp) : profinitely_filtered_pseudo_normed_group M := M.str

@[simp] lemma coe_of (V : Type u) [profinitely_filtered_pseudo_normed_group V] : (ProFiltPseuNormGrp.of V : Type u) = V := rfl

@[simp] lemma coe_id (V : ProFiltPseuNormGrp) : ‚áë(ùüô V) = id := rfl

@[simp] lemma coe_comp {A B C : ProFiltPseuNormGrp} (f : A ‚ü∂ B) (g : B ‚ü∂ C) :
  ‚áë(f ‚â´ g) = g ‚àò f := rfl

@[simp] lemma coe_comp_apply {A B C : ProFiltPseuNormGrp} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (x : A) :
  (f ‚â´ g) x = g (f x) := rfl

open pseudo_normed_group

section

variables (M : Type*) [profinitely_filtered_pseudo_normed_group M] (c : ‚Ñù‚â•0)

instance : t2_space (Top.of (filtration M c)) := by { dsimp, apply_instance }
instance : totally_disconnected_space (Top.of (filtration M c)) := by { dsimp, apply_instance }
instance : compact_space (Top.of (filtration M c)) := by { dsimp, apply_instance }

end

end ProFiltPseuNormGrp

namespace ProFiltPseuNormGrpWithTinv

variables (r' : ‚Ñù‚â•0)

instance bundled_hom : bundled_hom (@profinitely_filtered_pseudo_normed_group_with_Tinv_hom r') :=
‚ü®@profinitely_filtered_pseudo_normed_group_with_Tinv_hom.to_fun r',
 @profinitely_filtered_pseudo_normed_group_with_Tinv_hom.id r',
 @profinitely_filtered_pseudo_normed_group_with_Tinv_hom.comp r',
 @profinitely_filtered_pseudo_normed_group_with_Tinv_hom.coe_inj r'‚ü©

attribute [derive [has_coe_to_sort, large_category, concrete_category]] ProFiltPseuNormGrpWithTinv

/-- Construct a bundled `ProFiltPseuNormGrpWithTinv` from the underlying type and typeclass. -/
def of (r' : ‚Ñù‚â•0) (M : Type u) [profinitely_filtered_pseudo_normed_group_with_Tinv r' M] :
  ProFiltPseuNormGrpWithTinv r' :=
bundled.of M

instance : has_zero (ProFiltPseuNormGrpWithTinv r') :=
‚ü®{ Œ± := punit, str := punit.profinitely_filtered_pseudo_normed_group_with_Tinv r' }‚ü©

instance : inhabited (ProFiltPseuNormGrpWithTinv r') := ‚ü®0‚ü©

instance (M : ProFiltPseuNormGrpWithTinv r') :
  profinitely_filtered_pseudo_normed_group_with_Tinv r' M := M.str

@[simp] lemma coe_of (V : Type u) [profinitely_filtered_pseudo_normed_group_with_Tinv r' V] :
  (ProFiltPseuNormGrpWithTinv.of r' V : Type u) = V := rfl

@[simp] lemma of_coe (M : ProFiltPseuNormGrpWithTinv r') : of r' M = M :=
by { cases M, refl }

@[simp] lemma coe_id (V : ProFiltPseuNormGrpWithTinv r') : ‚áë(ùüô V) = id := rfl

@[simp] lemma coe_comp {A B C : ProFiltPseuNormGrpWithTinv r'} (f : A ‚ü∂ B) (g : B ‚ü∂ C) :
  ‚áë(f ‚â´ g) = g ‚àò f := rfl

@[simp] lemma coe_comp_apply {A B C : ProFiltPseuNormGrpWithTinv r'} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (x : A) :
  (f ‚â´ g) x = g (f x) := rfl
open pseudo_normed_group

section

variables (M : Type*) [profinitely_filtered_pseudo_normed_group_with_Tinv r' M] (c : ‚Ñù‚â•0)
include r'

instance : t2_space (Top.of (filtration M c)) := by { dsimp, apply_instance }
instance : totally_disconnected_space (Top.of (filtration M c)) := by { dsimp, apply_instance }
instance : compact_space (Top.of (filtration M c)) := by { dsimp, apply_instance }

end

-- @[simps] def Filtration (c : ‚Ñù‚â•0) : ProFiltPseuNormGrp ‚•§ Profinite :=
-- { obj := Œª M, ‚ü®Top.of (filtration M c)‚ü©,
--   map := Œª M‚ÇÅ M‚ÇÇ f, ‚ü®f.level c, f.level_continuous c‚ü©,
--   map_id' := by { intros, ext, refl },
--   map_comp' := by { intros, ext, refl } }


open pseudo_normed_group profinitely_filtered_pseudo_normed_group_with_Tinv_hom

open profinitely_filtered_pseudo_normed_group_with_Tinv (Tinv)

variables {r'}
variables {M M‚ÇÅ M‚ÇÇ : ProFiltPseuNormGrpWithTinv.{u} r'}
variables {f : M‚ÇÅ ‚ü∂ M‚ÇÇ}

/-- The isomorphism induced by a bijective `profinitely_filtered_pseudo_normed_group_with_Tinv_hom`
whose inverse is strict. -/
def iso_of_equiv_of_strict (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ) (he : ‚àÄ x, f x = e x)
  (strict : ‚àÄ ‚¶Éc x‚¶Ñ, x ‚àà filtration M‚ÇÇ c ‚Üí e.symm x ‚àà filtration M‚ÇÅ c) :
  M‚ÇÅ ‚âÖ M‚ÇÇ :=
{ hom := f,
  inv := inv_of_equiv_of_strict e he strict,
  hom_inv_id' := by { ext x, simp [inv_of_equiv_of_strict, he] },
  inv_hom_id' := by { ext x, simp [inv_of_equiv_of_strict, he] } }

@[simp]
lemma iso_of_equiv_of_strict.apply (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ) (he : ‚àÄ x, f x = e x)
  (strict : ‚àÄ ‚¶Éc x‚¶Ñ, x ‚àà filtration M‚ÇÇ c ‚Üí e.symm x ‚àà filtration M‚ÇÅ c) (x : M‚ÇÅ) :
  (iso_of_equiv_of_strict e he strict).hom x = f x := rfl

@[simp]
lemma iso_of_equiv_of_strict_symm.apply (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ) (he : ‚àÄ x, f x = e x)
  (strict : ‚àÄ ‚¶Éc x‚¶Ñ, x ‚àà filtration M‚ÇÇ c ‚Üí e.symm x ‚àà filtration M‚ÇÅ c) (x : M‚ÇÇ) :
  (iso_of_equiv_of_strict e he strict).symm.hom x = e.symm x := rfl

def iso_of_equiv_of_strict'
  (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ)
  (strict' : ‚àÄ c x, x ‚àà filtration M‚ÇÅ c ‚Üî e x ‚àà filtration M‚ÇÇ c)
  (continuous' : ‚àÄ c, continuous (pseudo_normed_group.level e (Œª c x, (strict' c x).1) c))
  (map_Tinv' : ‚àÄ x, e (Tinv x) = Tinv (e x)) :
  M‚ÇÅ ‚âÖ M‚ÇÇ :=
@iso_of_equiv_of_strict r' M‚ÇÅ M‚ÇÇ
 {to_fun := e,
  strict' := Œª c x, (strict' c x).1,
  continuous' := continuous',
  map_Tinv' := map_Tinv',
  ..e.to_add_monoid_hom } e (Œª _, rfl)
  (by { intros c x hx, rwa [strict', e.apply_symm_apply] })

@[simp]
lemma iso_of_equiv_of_strict'_hom_apply
  (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ)
  (strict' : ‚àÄ c x, x ‚àà filtration M‚ÇÅ c ‚Üî e x ‚àà filtration M‚ÇÇ c)
  (continuous' : ‚àÄ c, continuous (pseudo_normed_group.level e (Œª c x, (strict' c x).1) c))
  (map_Tinv' : ‚àÄ x, e (Tinv x) = Tinv (e x))
  (x : M‚ÇÅ) :
  (iso_of_equiv_of_strict' e strict' continuous' map_Tinv').hom x = e x := rfl

@[simp]
lemma iso_of_equiv_of_strict'_inv_apply
  (e : M‚ÇÅ ‚âÉ+ M‚ÇÇ)
  (strict' : ‚àÄ c x, x ‚àà filtration M‚ÇÅ c ‚Üî e x ‚àà filtration M‚ÇÇ c)
  (continuous' : ‚àÄ c, continuous (pseudo_normed_group.level e (Œª c x, (strict' c x).1) c))
  (map_Tinv' : ‚àÄ x, e (Tinv x) = Tinv (e x))
  (x : M‚ÇÇ) :
  (iso_of_equiv_of_strict' e strict' continuous' map_Tinv').inv x = e.symm x := rfl

variables (r')

@[simps]
def Pow (n : ‚Ñï) : ProFiltPseuNormGrpWithTinv.{u} r' ‚•§ ProFiltPseuNormGrpWithTinv.{u} r' :=
{ obj := Œª M, of r' $ M ^ n,
  map := Œª M‚ÇÅ M‚ÇÇ f, profinitely_filtered_pseudo_normed_group_with_Tinv.pi_map r' _ _ (Œª i, f),
  map_id' := Œª M, by { ext, refl },
  map_comp' := by { intros, ext, refl } }

@[simps]
def Pow_Pow_X_equiv (N n : ‚Ñï) :
  M ^ (N * n) ‚âÉ+ (M ^ N) ^ n :=
{ to_fun := ((equiv.curry _ _ _).symm.trans (((equiv.prod_comm _ _).trans fin_prod_fin_equiv).arrow_congr (equiv.refl _))).symm,
  map_add' := Œª x y, by { ext, refl },
  .. ((equiv.curry _ _ _).symm.trans (((equiv.prod_comm _ _).trans fin_prod_fin_equiv).arrow_congr (equiv.refl _))).symm }

open profinitely_filtered_pseudo_normed_group
open comphaus_filtered_pseudo_normed_group

@[simps]
def Pow_Pow_X (N n : ‚Ñï) (M : ProFiltPseuNormGrpWithTinv.{u} r') :
  (Pow r' N ‚ãô Pow r' n).obj M ‚âÖ (Pow r' (N * n)).obj M :=
iso.symm $
iso_of_equiv_of_strict'
  (Pow_Pow_X_equiv r' N n)
  begin
    intros c x,
    dsimp,
    split; intro h,
    { intros i j, exact h (fin_prod_fin_equiv (j, i)) },
    { intro ij,
      have := h (fin_prod_fin_equiv.symm ij).2 (fin_prod_fin_equiv.symm ij).1,
      dsimp at this, simpa only [prod.mk.eta, equiv.apply_symm_apply] using this, },
  end
  begin
    intro c, dsimp,
    rw [‚Üê (filtration_pi_homeo (Œª _, M ^ N) c).comp_continuous_iff,
        ‚Üê (filtration_pi_homeo (Œª _, M) c).symm.comp_continuous_iff'],
    apply continuous_pi,
    intro i,
    rw [‚Üê (filtration_pi_homeo (Œª _, M) c).comp_continuous_iff],
    apply continuous_pi,
    intro j,
    have := @continuous_apply _ (Œª _, filtration M c) _ (fin_prod_fin_equiv (j, i)),
    dsimp [function.comp] at this ‚ä¢,
    simpa only [subtype.coe_eta],
  end
  (by { intros, ext, refl })

@[simps hom inv]
def Pow_mul (N n : ‚Ñï) : Pow r' (N * n) ‚âÖ Pow r' N ‚ãô Pow r' n :=
nat_iso.of_components (Œª M, (Pow_Pow_X r' N n M).symm)
begin
  intros X Y f,
  ext x i j,
  refl,
end

end ProFiltPseuNormGrpWithTinv
