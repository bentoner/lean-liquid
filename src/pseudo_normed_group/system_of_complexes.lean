import for_mathlib.extend_from_nat

import system_of_complexes.basic
import pseudo_normed_group.Tinv
import pseudo_normed_group.category

open_locale classical nnreal
noncomputable theory

open opposite pseudo_normed_group category_theory category_theory.limits breen_deligne


universe variable u

namespace breen_deligne
namespace data

section
variables (BD : breen_deligne.data) (c' : ‚Ñï ‚Üí ‚Ñù‚â•0)
variables (r : ‚Ñù‚â•0) (V : NormedGroup) [normed_with_aut r V] [fact (0 < r)]
variables (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)]
variables (M : ProFiltPseuNormGrpWithTinv.{u} r') (c : ‚Ñù‚â•0)

/-- The object for the complex of normed groups
`V-hat(M_{‚â§c})^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^2)^{T‚Åª¬π} ‚ü∂ ‚Ä¶` -/
def complex_X (i : ‚Ñï) : (ProFiltPseuNormGrpWithTinv r')·µí·µñ ‚•§ NormedGroup :=
CLCFPTinv r V r' (c * c' i) (BD.X i)

-- CLCFPTinv' r V n
--   (op (Profinite.of (filtration M c)))
--   (op (Profinite.of (filtration M (r' * c))))
--   (has_hom.hom.op ‚ü®
--       profinitely_filtered_pseudo_normed_group_with_Tinv.Tinv‚ÇÄ' (r' * c) c,
--       profinitely_filtered_pseudo_normed_group_with_Tinv.Tinv‚ÇÄ'_continuous (r' * c) c‚ü©)
--   (has_hom.hom.op ‚ü®cast_le, (embedding_cast_le _ _).continuous‚ü©)

-- theorem complex_X_hom_of_eq' (c‚ÇÇ' : ‚Ñï ‚Üí ‚Ñù‚â•0) (i : ‚Ñï) (h : c * c' i = c‚ÇÇ * c‚ÇÇ' i) :

variables [BD.suitable c']

/-- The differential for the complex of normed groups
`V-hat(M_{‚â§c})^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^2)^{T‚Åª¬π} ‚ü∂ ‚Ä¶` -/
def complex_d (i j : ‚Ñï) : BD.complex_X c' r V r' c i ‚ü∂ BD.complex_X c' r V r' c j :=
(BD.d j i).eval_CLCFPTinv r V r' (c * c' i) (c * c' j)

lemma complex_d_comp_d (i j k : ‚Ñï) :
  BD.complex_d c' r V r' c i j ‚â´ BD.complex_d c' r V r' c j k = 0 :=
by simp only [complex_d, ‚Üê universal_map.eval_CLCFPTinv_comp, BD.d_comp_d,
    universal_map.eval_CLCFPTinv_zero]

end

open differential_object

variables (BD : breen_deligne.data) (c' : ‚Ñï ‚Üí ‚Ñù‚â•0) [BD.suitable c']
variables (r : ‚Ñù‚â•0) (V : NormedGroup) [normed_with_aut r V] [fact (0 < r)]
variables (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)]
variables {M M‚ÇÅ M‚ÇÇ M‚ÇÉ : ProFiltPseuNormGrpWithTinv.{u} r'} (c : ‚Ñù‚â•0)
variables (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (g : M‚ÇÇ ‚ü∂ M‚ÇÉ)

/-- The complex of normed groups `V-hat(M_{‚â§c})^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^2)^{T‚Åª¬π} ‚ü∂ ‚Ä¶` -/
def complex (r : ‚Ñù‚â•0) (V : NormedGroup) [normed_with_aut r V] [fact (0 < r)]
  (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)] (M : ProFiltPseuNormGrpWithTinv.{u} r') (c : ‚Ñù‚â•0) :
  cochain_complex ‚Ñï NormedGroup :=
{ X := Œª i, (BD.complex_X c' r V r' c i).obj (op M),
  d := Œª i j, (BD.complex_d c' r V r' c i j).app (op M),
  d_comp_d := Œª i j k, by { rw ‚Üê nat_trans.comp_app _ _ (op M), rw complex_d_comp_d, refl },
  d_eq_zero := Œª i j hij,
  begin
    have : ¬¨ differential_object.coherent_indices ff j i := ne.symm hij,
    simp only [complex_d, ‚Üê universal_map.eval_CLCFPTinv_comp, BD.d_eq_zero this,
      universal_map.eval_CLCFPTinv_zero],
    refl
  end }

namespace complex

/-- The induced map of complexes from a homomorphism `M‚ÇÅ ‚ü∂ M‚ÇÇ`. -/
-- @[simps] -- this is slow :sad:
def map : BD.complex c' r V r' M‚ÇÇ c ‚ü∂ BD.complex c' r V r' M‚ÇÅ c :=
differential_object.hom.mk'
  (Œª i, (CLCFPTinv r V r' _ _).map f.op) $ Œª _ _ _, (nat_trans.naturality _ _).symm

variables (M)

@[simp] lemma map_id : map BD c' r V r' c (ùüô M) = ùüô (BD.complex c' r V r' M c) :=
by { ext i : 2, apply category_theory.functor.map_id, }

lemma map_comp : map BD c' r V r' c (f ‚â´ g) = map BD c' r V r' c g ‚â´ map BD c' r V r' c f :=
by { ext i : 2, dsimp [map], apply category_theory.functor.map_comp }

lemma map_norm_noninc (n : ‚Ñï) : ((map BD c' r V r' c f).f n).norm_noninc :=
CLCFPTinv.map_norm_noninc _ _ _ _ _ _

end complex

/-- The system of complexes
`V-hat(M_{‚â§c})^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^2)^{T‚Åª¬π} ‚ü∂ ...`
occurring in Theorems 9.4 and 9.5 of [Analytic]. -/
@[simps]
def system (r : ‚Ñù‚â•0) (V : NormedGroup) [normed_with_aut r V] [fact (0 < r)]
  (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)] (M : ProFiltPseuNormGrpWithTinv r') :
  system_of_complexes :=
{ /- the objects, aka the constituent complexes -/
  obj := Œª c, BD.complex c' r V r' M (unop c : ‚Ñù‚â•0),
  /- the restriction maps -/
  map := Œª c‚ÇÇ c‚ÇÅ h,
  differential_object.hom.mk'
    (Œª i,
    by haveI : fact ((unop c‚ÇÅ : ‚Ñù‚â•0) ‚â§ (unop c‚ÇÇ : ‚Ñù‚â•0)) := ‚ü®h.unop.down.down‚ü©;
      exact (CLCFPTinv.res r V r' _ _ (BD.X i)).app _)
    begin
      rintro i j hij,
      dsimp [complex, complex_d],
      simp only [‚Üê nat_trans.comp_app],
      haveI H : fact ((unop c‚ÇÅ : ‚Ñù‚â•0) ‚â§ (unop c‚ÇÇ : ‚Ñù‚â•0)) := ‚ü®h.unop.down.down‚ü©,
      rw universal_map.res_comp_eval_CLCFPTinv r V r'
        (unop c‚ÇÇ * c' i) (unop c‚ÇÅ * c' i) (unop c‚ÇÇ * c' j) (unop c‚ÇÅ * c' j) (BD.d j i)
    end,
  map_id' := /- the restriction map for `c ‚â§ c` is the identity -/
  by { intro c, ext i : 2, dsimp, rw CLCFPTinv.res_refl r V r' _ _, refl },
  map_comp' := /- composition of transition maps is a transition map -/
  begin
    intros c‚ÇÉ c‚ÇÇ c‚ÇÅ h h',
    haveI H' : fact ((unop c‚ÇÅ : ‚Ñù‚â•0) ‚â§ (unop c‚ÇÇ : ‚Ñù‚â•0)) := ‚ü®h'.unop.down.down‚ü©,
    haveI H : fact ((unop c‚ÇÇ : ‚Ñù‚â•0) ‚â§ (unop c‚ÇÉ : ‚Ñù‚â•0)) := ‚ü®h.unop.down.down‚ü©,
    haveI : fact ((unop c‚ÇÅ : ‚Ñù‚â•0) ‚â§ (unop c‚ÇÉ : ‚Ñù‚â•0)) := ‚ü®H'.out.trans H.out‚ü©,
    ext i : 2, symmetry,
    exact nat_trans.congr_app (CLCFPTinv.res_comp_res r V r' _ _ _ _) _,
  end }
.

namespace system

/-- The induced map of systems of complexes from a homomorphism `M‚ÇÅ ‚ü∂ M‚ÇÇ`. -/
@[simps]
def map : BD.system c' r V r' M‚ÇÇ ‚ü∂ BD.system c' r V r' M‚ÇÅ :=
{ app := Œª c, complex.map BD c' r V r' (unop c) f,
  naturality' := Œª M‚ÇÅ M‚ÇÇ f,
    by { ext i : 2, symmetry, apply (CLCFPTinv.res _ _ _ _ _ _).naturality _ } }

@[simp] lemma map_id : map BD c' r V r' (ùüô M) = ùüô (BD.system c' r V r' M) :=
by { ext c : 2, apply complex.map_id }

lemma map_comp : map BD c' r V r' (f ‚â´ g) = map BD c' r V r' g ‚â´ map BD c' r V r' f :=
by { ext c : 2, apply complex.map_comp }

end system

/-- The system of complexes
`V-hat(M_{‚â§c})^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^2)^{T‚Åª¬π} ‚ü∂ ...`
as a functor in `M`.

See also `system`. -/
@[simps]
def System (r : ‚Ñù‚â•0) (V : NormedGroup) [normed_with_aut r V] [fact (0 < r)]
  (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)] :
  (ProFiltPseuNormGrpWithTinv r')·µí·µñ ‚•§ system_of_complexes :=
{ obj := Œª M, BD.system c' r V r' (unop M),
  map := Œª M‚ÇÅ M‚ÇÇ f, system.map BD c' r V r' f.unop,
  map_id' := Œª M, by apply system.map_id,
  map_comp' := Œª M‚ÇÅ M‚ÇÇ M‚ÇÉ f g, by apply system.map_comp }

end data

end breen_deligne

#lint- only unused_arguments def_lemma doc_blame
