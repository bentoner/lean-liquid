import pseudo_normed_group.LC
import locally_constant.Vhat

open_locale classical nnreal
noncomputable theory
local attribute [instance] type_pow

open NormedGroup opposite Profinite pseudo_normed_group category_theory breen_deligne
open profinitely_filtered_pseudo_normed_group

universe variable u
variables (r : ‚Ñù‚â•0) (V : NormedGroup)
variables (r' : ‚Ñù‚â•0) {M M‚ÇÅ M‚ÇÇ M‚ÇÉ : Type u}
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M]
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÅ]
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÇ]
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÉ]
variables (c c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ : ‚Ñù‚â•0) (l m n : ‚Ñï)
variables (f : profinitely_filtered_pseudo_normed_group_with_Tinv_hom r' M‚ÇÅ M‚ÇÇ)
variables (g : profinitely_filtered_pseudo_normed_group_with_Tinv_hom r' M‚ÇÇ M‚ÇÉ)

/-- The "functor" that sends `M` and `c` to `V-hat((filtration M c)^n)` -/
def CLCFP (V : NormedGroup) (r' : ‚Ñù‚â•0) (M : Type*) (c : ‚Ñù‚â•0) (n : ‚Ñï)
  [profinitely_filtered_pseudo_normed_group_with_Tinv r' M] :
  NormedGroup :=
Completion.obj (LCFP V r' M c n)

namespace CLCFP

@[simps]
def map : CLCFP V r' M‚ÇÇ c n ‚ü∂ CLCFP V r' M‚ÇÅ c n :=
Completion.map (LCFP.map V r' c n f)

variables (M)

@[simp] lemma map_id :
  map V r' c n (profinitely_filtered_pseudo_normed_group_with_Tinv_hom.id) =
    ùüô (CLCFP V r' M c n) :=
by { delta map, rw LCFP.map_id, apply category_theory.functor.map_id }

variables {M}

lemma map_comp : map V r' c n (g.comp f) = map V r' c n g ‚â´ map V r' c n f :=
by { delta map, rw LCFP.map_comp, apply category_theory.functor.map_comp }

lemma map_norm_noninc : (map V r' c n f).norm_noninc :=
Completion_map_norm_noninc _ $ LCFP.map_norm_noninc _ _ _ _ _

@[simps]
def res [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] : CLCFP V r' M c‚ÇÇ n ‚ü∂ CLCFP V r' M c‚ÇÅ n :=
Completion.map (LCFP.res V r' c‚ÇÅ c‚ÇÇ n)

@[simp] lemma res_refl : @res V r' M _ c c n _ = ùüô _ :=
by { delta res, rw LCFP.res_refl, apply category_theory.functor.map_id }

lemma res_comp_res [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [fact (c‚ÇÇ ‚â§ c‚ÇÉ)] [fact (c‚ÇÅ ‚â§ c‚ÇÉ)] :
  res V r' c‚ÇÇ c‚ÇÉ n ‚â´ res V r' c‚ÇÅ c‚ÇÇ n = @res V r' M _ c‚ÇÅ c‚ÇÉ n _ :=
by simp only [res, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp, LCFP.res_comp_res]

lemma res_norm_noninc [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] : (@res V r' M _ c‚ÇÅ c‚ÇÇ n _).norm_noninc :=
Completion_map_norm_noninc _ $ LCFP.res_norm_noninc _ _ _ _ _

lemma map_comp_res [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] :
  map V r' c‚ÇÇ n f ‚â´ res V r' c‚ÇÅ c‚ÇÇ n = res V r' c‚ÇÅ c‚ÇÇ n ‚â´ map V r' c‚ÇÅ n f :=
by simp only [map, res, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp, LCFP.map_comp_res]

section Tinv
open profinitely_filtered_pseudo_normed_group_with_Tinv
variables [fact (0 < r')]

@[simps]
def Tinv : CLCFP V r' M c n ‚ü∂ CLCFP V r' M (r' * c) n :=
Completion.map (LCFP.Tinv V r' c n)

lemma map_comp_Tinv :
  map V r' c n f ‚â´ Tinv V r' c n = Tinv V r' c n ‚â´ map V r' (r' * c) n f :=
by simp only [Tinv, map, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp, LCFP.map_comp_Tinv]

lemma res_comp_Tinv [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ (@Tinv V r' M _ c‚ÇÅ n _) = Tinv V r' c‚ÇÇ n ‚â´ res V r' (r' * c‚ÇÅ) (r' * c‚ÇÇ) n :=
by simp only [Tinv, res, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp, LCFP.res_comp_Tinv]

end Tinv

section T_inv

variables [normed_with_aut r V] [fact (0 < r)]

@[simps]
def T_inv : CLCFP V r' M c n ‚ü∂ CLCFP V r' M c n :=
Completion.map (LCFP.T_inv r V r' c n)

lemma map_comp_T_inv :
  map V r' c n f ‚â´ T_inv r V r' c n = T_inv r V r' c n ‚â´ map V r' c n f :=
by simp only [T_inv, map, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp, LCFP.map_comp_T_inv]

lemma res_comp_T_inv [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ (@T_inv r V r' M _ c‚ÇÅ n _ _) =
    T_inv r V r' c‚ÇÇ n ‚â´ res V r' c‚ÇÅ c‚ÇÇ n :=
by simp only [T_inv, res, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp, LCFP.res_comp_T_inv]

end T_inv

end CLCFP

namespace breen_deligne

open CLCFP
variables (M) {l m n}

namespace basic_universal_map

variables (œï : basic_universal_map m n)

@[simps]
def eval_CLCFP : CLCFP V r' M c‚ÇÇ n ‚ü∂ CLCFP V r' M c‚ÇÅ m :=
Completion.map (œï.eval_LCFP V r' M c‚ÇÅ c‚ÇÇ)

lemma map_comp_eval_CLCFP [œï.suitable c‚ÇÅ c‚ÇÇ] :
  map V r' c‚ÇÇ n f ‚â´ œï.eval_CLCFP V r' M‚ÇÅ c‚ÇÅ c‚ÇÇ = œï.eval_CLCFP V r' M‚ÇÇ c‚ÇÅ c‚ÇÇ ‚â´ map V r' c‚ÇÅ m f :=
by simp only [map, eval_CLCFP, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp, map_comp_eval_LCFP]

lemma res_comp_eval_CLCFP
  [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [œï.suitable c‚ÇÇ c‚ÇÑ] [œï.suitable c‚ÇÅ c‚ÇÉ] [fact (c‚ÇÉ ‚â§ c‚ÇÑ)] :
  res V r' c‚ÇÉ c‚ÇÑ n ‚â´ œï.eval_CLCFP V r' M c‚ÇÅ c‚ÇÉ =
    œï.eval_CLCFP V r' M c‚ÇÇ c‚ÇÑ ‚â´ res V r' c‚ÇÅ c‚ÇÇ m :=
by simp only [res, eval_CLCFP, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp,
  res_comp_eval_LCFP V r' _ c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ]

lemma Tinv_comp_eval_CLCFP [fact (0 < r')] [œï.suitable c‚ÇÅ c‚ÇÇ] :
  Tinv V r' c‚ÇÇ n ‚â´ œï.eval_CLCFP V r' M (r' * c‚ÇÅ) (r' * c‚ÇÇ) =
    œï.eval_CLCFP V r' M c‚ÇÅ c‚ÇÇ ‚â´ Tinv V r' c‚ÇÅ m :=
by simp only [Tinv, eval_CLCFP, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp,
  Tinv_comp_eval_LCFP V r' _ c‚ÇÅ c‚ÇÇ]

lemma T_inv_comp_eval_CLCFP [normed_with_aut r V] [fact (0 < r)] [œï.suitable c‚ÇÅ c‚ÇÇ] :
  T_inv r V r' c‚ÇÇ n ‚â´ œï.eval_CLCFP V r' M c‚ÇÅ c‚ÇÇ =
    œï.eval_CLCFP V r' M c‚ÇÅ c‚ÇÇ ‚â´ T_inv r V r' c‚ÇÅ m :=
by simp only [T_inv, eval_CLCFP, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp,
  T_inv_comp_eval_LCFP r V r' c‚ÇÅ c‚ÇÇ]

end basic_universal_map

namespace universal_map

variables (œï : universal_map m n)

def eval_CLCFP : CLCFP V r' M c‚ÇÇ n ‚ü∂ CLCFP V r' M c‚ÇÅ m :=
Completion.map (œï.eval_LCFP V r' M c‚ÇÅ c‚ÇÇ)

@[simp] lemma eval_CLCFP_zero :
  (0 : universal_map m n).eval_CLCFP V r' M c‚ÇÅ c‚ÇÇ = 0 :=
by simp only [eval_CLCFP, eval_LCFP_zero, NormedGroup.Completion.map_zero]

open category_theory.limits

lemma eval_CLCFP_comp (g : universal_map m n) (f : universal_map l m)
  [hg : g.suitable c‚ÇÇ c‚ÇÉ] [hf : f.suitable c‚ÇÅ c‚ÇÇ] :
  (comp g f).eval_CLCFP V r' M c‚ÇÅ c‚ÇÉ =
    g.eval_CLCFP V r' M c‚ÇÇ c‚ÇÉ ‚â´ f.eval_CLCFP V r' M c‚ÇÅ c‚ÇÇ :=
by simp only [eval_CLCFP, ‚Üê functor.map_comp, eval_LCFP_comp V r' M c‚ÇÅ c‚ÇÇ c‚ÇÉ]

lemma map_comp_eval_CLCFP [œï.suitable c‚ÇÅ c‚ÇÇ] :
  map V r' c‚ÇÇ n f ‚â´ œï.eval_CLCFP V r' M‚ÇÅ c‚ÇÅ c‚ÇÇ =
    œï.eval_CLCFP V r' M‚ÇÇ c‚ÇÅ c‚ÇÇ ‚â´ map V r' c‚ÇÅ m f :=
by simp only [eval_CLCFP, map, ‚Üê functor.map_comp, map_comp_eval_LCFP V r' c‚ÇÅ c‚ÇÇ]

lemma res_comp_eval_CLCFP
  [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [œï.suitable c‚ÇÇ c‚ÇÑ] [œï.suitable c‚ÇÅ c‚ÇÉ] [fact (c‚ÇÉ ‚â§ c‚ÇÑ)] :
  res V r' c‚ÇÉ c‚ÇÑ n ‚â´ œï.eval_CLCFP V r' M c‚ÇÅ c‚ÇÉ =
    œï.eval_CLCFP V r' M c‚ÇÇ c‚ÇÑ ‚â´ res V r' c‚ÇÅ c‚ÇÇ m :=
by simp only [eval_CLCFP, res, ‚Üê functor.map_comp, res_comp_eval_LCFP V r' _ c‚ÇÅ c‚ÇÇ]

lemma Tinv_comp_eval_CLCFP [fact (0 < r')] [œï.suitable c‚ÇÅ c‚ÇÇ] :
  Tinv V r' c‚ÇÇ n ‚â´ œï.eval_CLCFP V r' M (r' * c‚ÇÅ) (r' * c‚ÇÇ) =
    œï.eval_CLCFP V r' M c‚ÇÅ c‚ÇÇ ‚â´ Tinv V r' c‚ÇÅ m :=
by simp only [eval_CLCFP, Tinv, ‚Üê functor.map_comp, Tinv_comp_eval_LCFP V r' _ c‚ÇÅ c‚ÇÇ]

lemma T_inv_comp_eval_CLCFP [normed_with_aut r V] [fact (0 < r)] [œï.suitable c‚ÇÅ c‚ÇÇ] :
  T_inv r V r' c‚ÇÇ n ‚â´ œï.eval_CLCFP V r' M‚ÇÅ c‚ÇÅ c‚ÇÇ =
    œï.eval_CLCFP V r' M‚ÇÅ c‚ÇÅ c‚ÇÇ ‚â´ T_inv r V r' c‚ÇÅ m :=
by simp only [eval_CLCFP, T_inv, ‚Üê functor.map_comp, T_inv_comp_eval_LCFP r V r' c‚ÇÅ c‚ÇÇ]

end universal_map

end breen_deligne
