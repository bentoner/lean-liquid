import pseudo_normed_group.FiltrationPow
import locally_constant.NormedGroup
import locally_constant.Vhat

namespace category_theory
namespace nat_trans

@[simp] lemma op_comp {C D} [category C] [category D]
  {F G H : C ‚•§ D} {Œ± : F ‚ü∂ G} {Œ≤ : G ‚ü∂ H} :
  nat_trans.op (Œ± ‚â´ Œ≤) = nat_trans.op Œ≤ ‚â´ nat_trans.op Œ± := rfl

end nat_trans
end category_theory

open_locale classical nnreal big_operators
noncomputable theory
local attribute [instance] type_pow

open NormedGroup opposite Profinite pseudo_normed_group category_theory breen_deligne
open profinitely_filtered_pseudo_normed_group

universe variable u
variables (r : ‚Ñù‚â•0) (V : NormedGroup)
variables (r' : ‚Ñù‚â•0) {M M‚ÇÅ M‚ÇÇ M‚ÇÉ : Type u}
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M]
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÅ]
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÇ]
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÉ]
variables (c c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ : ‚Ñù‚â•0) (l m n : ‚Ñï)
variables (f : profinitely_filtered_pseudo_normed_group_with_Tinv_hom r' M‚ÇÅ M‚ÇÇ)
variables (g : profinitely_filtered_pseudo_normed_group_with_Tinv_hom r' M‚ÇÇ M‚ÇÉ)

/-- The functor that sends `A` to `V(A^n)` -/
def LCP (V : NormedGroup) (n : ‚Ñï) : Profinite·µí·µñ ‚•§ NormedGroup :=
(Pow n).op ‚ãô LocallyConstant.obj V

/-- The "functor" that sends `M` and `c` to `V((filtration M c)^n)` -/
def LCFP (V : NormedGroup) (r' : ‚Ñù‚â•0) (c : ‚Ñù‚â•0) (n : ‚Ñï) :
  (ProFiltPseuNormGrpWithTinv r')·µí·µñ ‚•§ NormedGroup :=
(ProFiltPseuNormGrpWithTinv.level r' c).op ‚ãô LCP V n

theorem LCFP_def (V : NormedGroup) (r' : ‚Ñù‚â•0) (c : ‚Ñù‚â•0) (n : ‚Ñï) :
  LCFP V r' c n = (FiltrationPow r' c n).op ‚ãô LocallyConstant.obj V := rfl

namespace LCFP

lemma map_norm_noninc {M‚ÇÅ M‚ÇÇ} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) :
  ((LCFP V r' c n).map f).norm_noninc :=
locally_constant.comap_hom_norm_noninc _ _

@[simps]
def res (r' : ‚Ñù‚â•0) (c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] (n : ‚Ñï) : LCFP V r' c‚ÇÅ n ‚ü∂ LCFP V r' c‚ÇÇ n :=
(whisker_right (nat_trans.op (FiltrationPow.cast_le r' c‚ÇÇ c‚ÇÅ n)) (LocallyConstant.obj V) : _)

@[simp] lemma res_refl : res V r' c c n = ùüô _ :=
by { simp [res, FiltrationPow.cast_le_refl], refl }

lemma res_comp_res [h‚ÇÅ : fact (c‚ÇÉ ‚â§ c‚ÇÇ)] [h‚ÇÇ : fact (c‚ÇÇ ‚â§ c‚ÇÅ)] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ res V r' c‚ÇÇ c‚ÇÉ n = @res V r' c‚ÇÅ c‚ÇÉ ‚ü®le_trans h‚ÇÅ.1 h‚ÇÇ.1‚ü© n :=
by simp only [res, ‚Üê whisker_right_comp, ‚Üê nat_trans.op_comp, FiltrationPow.cast_le_comp]

lemma res_app [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] (M) :
  (res V r' c‚ÇÅ c‚ÇÇ n).app M =
    (LCP V n).map (Filtration.cast_le c‚ÇÇ c‚ÇÅ (unop M : ProFiltPseuNormGrpWithTinv r')).op :=
rfl

lemma res_norm_noninc [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] (M) : ((res V r' c‚ÇÅ c‚ÇÇ n).app M).norm_noninc :=
locally_constant.comap_hom_norm_noninc _ _

section Tinv
open profinitely_filtered_pseudo_normed_group_with_Tinv
variables [fact (0 < r')]

-- @[simps]
def Tinv (c c‚ÇÇ : ‚Ñù‚â•0) [fact (c‚ÇÇ ‚â§ r' * c)] : LCFP V r' c n ‚ü∂ LCFP V r' c‚ÇÇ n :=
@whisker_right _ _ Profinite·µí·µñ _ _ _ _ _
 (nat_trans.op $ FiltrationPow.Tinv r' c‚ÇÇ c n) (LocallyConstant.obj V)

-- lemma map_comp_Tinv (c c‚ÇÇ : ‚Ñù‚â•0) [fact (c‚ÇÇ ‚â§ r' * c)] {M‚ÇÅ M‚ÇÇ} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) :
--   (LCFP V r' c n).map f ‚â´ Tinv V r' n c c‚ÇÇ _ = Tinv V r' n c c‚ÇÇ _ ‚â´ (LCFP V r' c‚ÇÇ n).map f :=
-- begin
--   dsimp [Tinv, LCFP],
--   simp only [‚Üê (LCP V n).map_comp, ‚Üê op_comp],
--   congr' 2,
--   ext ‚ü®x, hx‚ü©,
--   exact f.unop.map_Tinv x
-- end

lemma res_comp_Tinv
  [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] [fact (c‚ÇÉ ‚â§ c‚ÇÇ)] [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] [fact (c‚ÇÉ ‚â§ r' * c‚ÇÇ)] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ Tinv V r' n c‚ÇÇ c‚ÇÉ = Tinv V r' n c‚ÇÅ c‚ÇÇ ‚â´ res V r' c‚ÇÇ c‚ÇÉ n :=
begin
  simp only [Tinv, res, ‚Üê whisker_right_comp, ‚Üê nat_trans.op_comp],
  refl
end

lemma Tinv_norm_noninc [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] (M) : ((Tinv V r' n c‚ÇÅ c‚ÇÇ).app M).norm_noninc :=
locally_constant.comap_hom_norm_noninc _ _

end Tinv

section normed_with_aut

variables [normed_with_aut r V]

instance _root_.LCP.obj.normed_with_aut (A : Profinite·µí·µñ) [fact (0 < r)] :
  normed_with_aut r ((LCP V n).obj A) :=
NormedGroup.normed_with_aut_LocallyConstant _ _ _

instance [fact (0 < r)] (M) : normed_with_aut r ((LCFP V r' c n).obj M) :=
LCP.obj.normed_with_aut _ _ _ _

def T_inv' [fact (0 < r)] : LCP V n ‚ü∂ LCP V n :=
whisker_left _ (LocallyConstant.map (normed_with_aut.T.inv : V ‚ü∂ V))

def T_inv [fact (0 < r)] : LCFP V r' c n ‚ü∂ LCFP V r' c n :=
whisker_left _ (T_inv' r V n)

lemma T_inv_def [fact (0 < r)] :
  T_inv r V r' c n =
  @whisker_left _ _ Profinite·µí·µñ _ _ _ (FiltrationPow r' c n).op
  _ _ (LocallyConstant.map (normed_with_aut.T.inv : V ‚ü∂ V)) :=
rfl

lemma T_inv_app [fact (0 < r)] (M : (ProFiltPseuNormGrpWithTinv r')·µí·µñ) :
  (T_inv r V r' c n).app M =
    (T_inv' r V n).app ((ProFiltPseuNormGrpWithTinv.level r' c).op.obj M) :=
rfl

-- This does not apply to our situation
-- lemma T_inv_norm_noninc [fact (0 < r)] : (@T_inv r V r' M _ c n _ _).norm_noninc :=
-- begin
--   refine locally_constant.map_hom_norm_noninc _,
--   -- factor this out
--   intro v,
-- end

variables [fact (0 < r)]

lemma res_comp_T_inv [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ T_inv r V r' c‚ÇÇ n = T_inv r V r' c‚ÇÅ n ‚â´ res V r' c‚ÇÅ c‚ÇÇ n :=
begin
  ext M : 2,
  simp only [nat_trans.comp_app, res_app, T_inv_app],
  exact (T_inv' r V n).naturality _,
end

end normed_with_aut

end LCFP

namespace breen_deligne

open LCFP

variables (M) {l m n}

namespace basic_universal_map

variables (œï : basic_universal_map m n)

def eval_LCFP (c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) : LCFP V r' c‚ÇÅ n ‚ü∂ LCFP V r' c‚ÇÇ m :=
if H : œï.suitable c‚ÇÇ c‚ÇÅ
then by exactI whisker_right (nat_trans.op $ œï.eval_FP r' c‚ÇÇ c‚ÇÅ) (LocallyConstant.obj V)
else 0

lemma eval_LCFP_def [h : œï.suitable c‚ÇÇ c‚ÇÅ] :
  œï.eval_LCFP V r' c‚ÇÅ c‚ÇÇ =
    whisker_right (nat_trans.op $ œï.eval_FP r' c‚ÇÇ c‚ÇÅ) (LocallyConstant.obj V) :=
dif_pos h

lemma eval_LCFP_comp (f : basic_universal_map m n) (g : basic_universal_map l m)
  [hf : f.suitable c‚ÇÇ c‚ÇÅ] [hg : g.suitable c‚ÇÉ c‚ÇÇ] :
  (f.comp g).eval_LCFP V r' c‚ÇÅ c‚ÇÉ =
  f.eval_LCFP V r' c‚ÇÅ c‚ÇÇ ‚â´ g.eval_LCFP V r' c‚ÇÇ c‚ÇÉ :=
begin
  haveI : (f.comp g).suitable c‚ÇÉ c‚ÇÅ := suitable_comp c‚ÇÇ,
  simp only [eval_LCFP_def, eval_FP_comp r' _ c‚ÇÇ, nat_trans.op_comp, whisker_right_comp]
end

lemma res_comp_eval_LCFP
  [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] [fact (c‚ÇÑ ‚â§ c‚ÇÉ)] [œï.suitable c‚ÇÑ c‚ÇÇ] [œï.suitable c‚ÇÉ c‚ÇÅ] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ œï.eval_LCFP V r' c‚ÇÇ c‚ÇÑ = œï.eval_LCFP V r' c‚ÇÅ c‚ÇÉ ‚â´ res V r' c‚ÇÉ c‚ÇÑ m :=
by simp only [res, eval_LCFP_def, ‚Üê whisker_right_comp,
  ‚Üê nat_trans.op_comp, cast_le_comp_eval_FP _ c‚ÇÑ c‚ÇÉ c‚ÇÇ c‚ÇÅ]

lemma Tinv_comp_eval_LCFP [fact (0 < r')] [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] [fact (c‚ÇÑ ‚â§ r' * c‚ÇÉ)]
  [œï.suitable c‚ÇÑ c‚ÇÇ] [œï.suitable c‚ÇÉ c‚ÇÅ] :
  Tinv V r' n c‚ÇÅ c‚ÇÇ ‚â´ œï.eval_LCFP V r' c‚ÇÇ c‚ÇÑ = œï.eval_LCFP V r' c‚ÇÅ c‚ÇÉ ‚â´ Tinv V r' m c‚ÇÉ c‚ÇÑ :=
by simp only [Tinv, eval_LCFP_def, ‚Üê whisker_right_comp,
    ‚Üê nat_trans.op_comp, Tinv_comp_eval_FP _ _ c‚ÇÑ c‚ÇÉ c‚ÇÇ c‚ÇÅ]

lemma T_inv_comp_eval_LCFP [normed_with_aut r V] [fact (0 < r)] [œï.suitable c‚ÇÇ c‚ÇÅ] :
  T_inv r V r' c‚ÇÅ n ‚â´ œï.eval_LCFP V r' c‚ÇÅ c‚ÇÇ =
    œï.eval_LCFP V r' c‚ÇÅ c‚ÇÇ ‚â´ T_inv r V r' c‚ÇÇ m :=
begin
  ext M : 2,
  simp only [T_inv_def, eval_LCFP_def, nat_trans.comp_app,
    whisker_right_app, whisker_left_app, nat_trans.naturality]
end

end basic_universal_map

namespace universal_map

open free_abelian_group

variables (œï : universal_map m n)

def eval_LCFP : LCFP V r' c‚ÇÅ n ‚ü∂ LCFP V r' c‚ÇÇ m :=
‚àë g in œï.support, coeff g œï ‚Ä¢ (g.eval_LCFP V r' c‚ÇÅ c‚ÇÇ)

@[simp] lemma eval_LCFP_of (f : basic_universal_map m n) :
  eval_LCFP V r' c‚ÇÅ c‚ÇÇ (of f) = f.eval_LCFP V r' c‚ÇÅ c‚ÇÇ :=
by simp only [eval_LCFP, support_of, coeff_of_self, one_smul, finset.sum_singleton]

@[simp] lemma eval_LCFP_zero :
  (0 : universal_map m n).eval_LCFP V r' c‚ÇÅ c‚ÇÇ = 0 :=
by rw [eval_LCFP, support_zero, finset.sum_empty]

@[simp] lemma eval_LCFP_neg (f : universal_map m n) :
  eval_LCFP V r' c‚ÇÅ c‚ÇÇ (-f) = -f.eval_LCFP V r' c‚ÇÅ c‚ÇÇ :=
by simp only [eval_LCFP, add_monoid_hom.map_neg, finset.sum_neg_distrib, neg_smul, support_neg]

lemma eval_LCFP_add (f g : universal_map m n) :
  eval_LCFP V r' c‚ÇÅ c‚ÇÇ (f + g) =
    f.eval_LCFP V r' c‚ÇÅ c‚ÇÇ + g.eval_LCFP V r' c‚ÇÅ c‚ÇÇ :=
begin
  simp only [eval_LCFP],
  rw finset.sum_subset (support_add f g), -- two goals
  simp only [add_monoid_hom.map_add _ f g, add_smul],
  convert finset.sum_add_distrib using 2, -- three goals
  apply finset.sum_subset (finset.subset_union_left _ _), swap,
  apply finset.sum_subset (finset.subset_union_right _ _),
  all_goals { rintros x - h, rw not_mem_support_iff at h, simp [h] },
end

lemma eval_LCFP_comp_of (g : basic_universal_map m n) (f : basic_universal_map l m)
  [hg : g.suitable c‚ÇÇ c‚ÇÅ] [hf : f.suitable c‚ÇÉ c‚ÇÇ] :
  eval_LCFP V r' c‚ÇÅ c‚ÇÉ ((comp (of g)) (of f)) =
    eval_LCFP V r' c‚ÇÅ c‚ÇÇ (of g) ‚â´ eval_LCFP V r' c‚ÇÇ c‚ÇÉ (of f) :=
begin
  simp only [comp_of, eval_LCFP_of],
  haveI hfg : (g.comp f).suitable c‚ÇÉ c‚ÇÅ := basic_universal_map.suitable_comp c‚ÇÇ,
  rw ‚Üê basic_universal_map.eval_LCFP_comp,
end

open category_theory.limits

lemma eval_LCFP_comp (g : universal_map m n) (f : universal_map l m)
  [hg : g.suitable c‚ÇÇ c‚ÇÅ] [hf : f.suitable c‚ÇÉ c‚ÇÇ] :
  (comp g f).eval_LCFP V r' c‚ÇÅ c‚ÇÉ =
    g.eval_LCFP V r' c‚ÇÅ c‚ÇÇ ‚â´ f.eval_LCFP V r' c‚ÇÇ c‚ÇÉ :=
begin
  unfreezingI { revert hf },
  apply free_abelian_group.induction_on_free_predicate
    (suitable c‚ÇÇ c‚ÇÅ) (suitable_free_predicate c‚ÇÇ c‚ÇÅ) g hg; unfreezingI { clear_dependent g },
  { intros h‚ÇÇ,
    simp only [eval_LCFP_zero, zero_comp, pi.zero_apply,
      add_monoid_hom.coe_zero, add_monoid_hom.map_zero] },
  { intros g hg hf,
    -- now do another nested induction on `f`
    apply free_abelian_group.induction_on_free_predicate
      (suitable c‚ÇÉ c‚ÇÇ) (suitable_free_predicate c‚ÇÉ c‚ÇÇ) f hf; unfreezingI { clear_dependent f },
    { simp only [eval_LCFP_zero, comp_zero, add_monoid_hom.map_zero] },
    { intros f hf,
      rw suitable_of_iff at hf,
      resetI,
      apply eval_LCFP_comp_of },
    { intros f hf IH,
      simp only [IH, eval_LCFP_neg, add_monoid_hom.map_neg],
      refl },
    { rintros (f‚ÇÅ : universal_map l m) (f‚ÇÇ : universal_map l m) hf‚ÇÅ hf‚ÇÇ IH‚ÇÅ IH‚ÇÇ, resetI,
      haveI Hg‚ÇÅf : (comp (of g) f‚ÇÅ).suitable c‚ÇÉ c‚ÇÅ := suitable.comp c‚ÇÇ,
      haveI Hg‚ÇÇf : (comp (of g) f‚ÇÇ).suitable c‚ÇÉ c‚ÇÅ := suitable.comp c‚ÇÇ,
      simp only [add_monoid_hom.map_add, eval_LCFP_add, IH‚ÇÅ, IH‚ÇÇ],
      refl } },
  { intros g hg IH hf, resetI, specialize IH,
    simp only [IH, add_monoid_hom.map_neg, eval_LCFP_neg,
      add_monoid_hom.neg_apply, neg_inj],
    refl },
  { rintros (g‚ÇÅ : universal_map m n) (g‚ÇÇ : universal_map m n) hg‚ÇÅ hg‚ÇÇ IH‚ÇÅ IH‚ÇÇ hf, resetI,
    haveI Hg‚ÇÅf : (comp g‚ÇÅ f).suitable c‚ÇÅ c‚ÇÉ := suitable.comp c‚ÇÇ,
    haveI Hg‚ÇÇf : (comp g‚ÇÇ f).suitable c‚ÇÅ c‚ÇÉ := suitable.comp c‚ÇÇ,
    simp only [add_monoid_hom.map_add, add_monoid_hom.add_apply, eval_LCFP_add, IH‚ÇÅ, IH‚ÇÇ],
    show _ = normed_group_hom.comp_hom _ _,
    simpa [add_monoid_hom.map_add] }
end

lemma map_comp_eval_LCFP [œï.suitable c‚ÇÅ c‚ÇÇ] :
  map V r' c‚ÇÇ n f ‚â´ œï.eval_LCFP V r' M‚ÇÅ c‚ÇÅ c‚ÇÇ = œï.eval_LCFP V r' M‚ÇÇ c‚ÇÅ c‚ÇÇ ‚â´ map V r' c‚ÇÅ m f :=
begin
  show normed_group_hom.comp_hom _ _ = normed_group_hom.comp_hom _ _,
  simp only [eval_LCFP_def, add_monoid_hom.map_sum, add_monoid_hom.sum_apply],
  apply finset.sum_congr rfl,
  intros g hg,
  haveI : g.suitable c‚ÇÅ c‚ÇÇ := suitable_of_mem_support œï c‚ÇÅ c‚ÇÇ g hg,
  simp only [‚Üê gsmul_eq_smul, add_monoid_hom.map_gsmul, add_monoid_hom.gsmul_apply],
  congr' 1,
  exact g.map_comp_eval_LCFP V r' _ _ _
end

lemma res_comp_eval_LCFP
  [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [œï.suitable c‚ÇÇ c‚ÇÑ] [œï.suitable c‚ÇÅ c‚ÇÉ] [fact (c‚ÇÉ ‚â§ c‚ÇÑ)] :
  res V r' c‚ÇÉ c‚ÇÑ n ‚â´ œï.eval_LCFP V r' M c‚ÇÅ c‚ÇÉ = œï.eval_LCFP V r' M c‚ÇÇ c‚ÇÑ ‚â´ res V r' c‚ÇÅ c‚ÇÇ m :=
begin
  show normed_group_hom.comp_hom _ _ = normed_group_hom.comp_hom _ _,
  simp only [eval_LCFP_def, add_monoid_hom.map_sum, add_monoid_hom.sum_apply],
  apply finset.sum_congr rfl,
  intros g hg,
  simp only [‚Üê gsmul_eq_smul, add_monoid_hom.map_gsmul, add_monoid_hom.gsmul_apply],
  haveI : g.suitable c‚ÇÇ c‚ÇÑ := suitable_of_mem_support œï _ _ g hg,
  haveI : g.suitable c‚ÇÅ c‚ÇÉ := suitable_of_mem_support œï _ _ g hg,
  congr' 1,
  exact g.res_comp_eval_LCFP V r' M c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ
end

lemma Tinv_comp_eval_LCFP [fact (0 < r')] [œï.suitable c‚ÇÅ c‚ÇÇ] :
  Tinv V r' c‚ÇÇ n ‚â´ œï.eval_LCFP V r' M (r' * c‚ÇÅ) (r' * c‚ÇÇ) = œï.eval_LCFP V r' M c‚ÇÅ c‚ÇÇ ‚â´ Tinv V r' c‚ÇÅ m :=
begin
  show normed_group_hom.comp_hom _ _ = normed_group_hom.comp_hom _ _,
  simp only [eval_LCFP_def, add_monoid_hom.map_sum, add_monoid_hom.sum_apply],
  apply finset.sum_congr rfl,
  intros g hg,
  haveI : g.suitable c‚ÇÅ c‚ÇÇ := suitable_of_mem_support œï c‚ÇÅ c‚ÇÇ g hg,
  simp only [‚Üê gsmul_eq_smul, add_monoid_hom.map_gsmul, add_monoid_hom.gsmul_apply],
  congr' 1,
  exact g.Tinv_comp_eval_LCFP V r' _ _ _
end

lemma T_inv_comp_eval_LCFP [normed_with_aut r V] [fact (0 < r)] [œï.suitable c‚ÇÅ c‚ÇÇ] :
  T_inv r V r' c‚ÇÇ n ‚â´ œï.eval_LCFP V r' M‚ÇÅ c‚ÇÅ c‚ÇÇ =
    œï.eval_LCFP V r' M‚ÇÅ c‚ÇÅ c‚ÇÇ ‚â´ T_inv r V r' c‚ÇÅ m :=
begin
  show normed_group_hom.comp_hom _ _ = normed_group_hom.comp_hom _ _,
  simp only [eval_LCFP_def, add_monoid_hom.map_sum, add_monoid_hom.sum_apply],
  apply finset.sum_congr rfl,
  intros g hg,
  haveI : g.suitable c‚ÇÅ c‚ÇÇ := suitable_of_mem_support œï c‚ÇÅ c‚ÇÇ g hg,
  simp only [‚Üê gsmul_eq_smul, add_monoid_hom.map_gsmul, add_monoid_hom.gsmul_apply],
  congr' 1,
  exact g.T_inv_comp_eval_LCFP r V r' _ _
end

end universal_map

end breen_deligne
