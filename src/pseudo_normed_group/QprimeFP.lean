import pseudo_normed_group.FP2
import condensed.adjunctions
import free_pfpng.acyclic
import for_mathlib.derived.ext_coproducts
import for_mathlib.derived.example
import breen_deligne.eval2
import system_of_complexes.shift_sub_id

noncomputable theory

open_locale nnreal

universe u

open category_theory category_theory.limits breen_deligne

section step1

variables (r' : ‚Ñù‚â•0)
variables (BD : breen_deligne.data) (Œ∫ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ c, BD.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')

abbreviation freeCond := Profinite_to_Condensed.{u} ‚ãô CondensedSet_to_Condensed_Ab

def QprimeFP_nat : ‚Ñù‚â•0 ‚•§ chain_complex (Condensed.{u} Ab.{u+1}) ‚Ñï :=
FPsystem r' BD ‚ü®M‚ü© Œ∫ ‚ãô (freeCond.{u}.map_FreeAb ‚ãô FreeAb.eval _).map_homological_complex _

def QprimeFP_int : ‚Ñù‚â•0 ‚•§ cochain_complex (Condensed.{u} Ab.{u+1}) ‚Ñ§ :=
QprimeFP_nat r' BD Œ∫ M ‚ãô homological_complex.embed complex_shape.embedding.nat_down_int_up

def QprimeFP : ‚Ñù‚â•0 ‚•§ bounded_homotopy_category (Condensed.{u} Ab.{u+1}) :=
QprimeFP_nat r' BD Œ∫ M ‚ãô chain_complex.to_bounded_homotopy_category

end step1

section step2

variables {r' : ‚Ñù‚â•0}
variables (BD : breen_deligne.package) (Œ∫ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ c, BD.data.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')

abbreviation freeCond' := Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_Condensed_Ab

def ProFiltPseuNormGrpWithTinv‚ÇÅ.to_Condensed : Condensed.{u} Ab.{u+1} :=
(PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r' ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u} ‚ãô
  CompHausFiltPseuNormGrp.to_Condensed.{u}).obj M

def QprimeFP_incl (c : ‚Ñù‚â•0) :
  (QprimeFP r' BD.data Œ∫ M).obj c ‚ü∂
  (BD.eval freeCond').obj M.to_Condensed :=
chain_complex.to_bounded_homotopy_category.map $
{ f := Œª n, CondensedSet_to_Condensed_Ab.map sorry,
  comm' := sorry }

variables (Œπ : ulift.{u+1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ)

-- set_option pp.universes true
-- def typeof {Œ± : Type*} (x : Œ±) := Œ±
-- #check typeof $ ùüô ((QprimeFP r' BD.data Œ∫ M).obj (Œπ k))

instance QprimeFP.uniformly_bounded :
  bounded_homotopy_category.uniformly_bounded (Œª k, (QprimeFP r' BD.data Œ∫ M).obj (Œπ k)) :=
begin
  use 1, intro k, apply chain_complex.bounded_by_one,
end

end step2

section step3
open bounded_homotopy_category

variables (Œπ : ulift.{u+1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ)
variables (A : ‚Ñù‚â•0 ‚•§ bounded_homotopy_category (Condensed.{u} Ab.{u+1}))
variables [uniformly_bounded (Œª k, A.obj (Œπ k))]

def sigma_shift : ‚àê (Œª k, A.obj (Œπ k)) ‚ü∂ ‚àê (Œª k, A.obj (Œπ k)) :=
sigma.desc $ Œª k, A.map (hom_of_le $ hŒπ $ by { cases k, recover, swap, exact ‚ü®k.down + 1‚ü©, apply nat.le_succ }) ‚â´
  sigma.Œπ (Œª k, A.obj (Œπ k)) ‚ü®k.down + 1‚ü©

end step3

-- variables (f : ‚Ñï ‚Üí ‚Ñù‚â•0)
-- #check ‚àê (Œª i, (QprimeFP r' BD Œ∫ M).obj (f i))
