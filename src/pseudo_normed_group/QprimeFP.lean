import pseudo_normed_group.FP2
import condensed.adjunctions
import free_pfpng.acyclic
import for_mathlib.derived.ext_coproducts
import for_mathlib.derived.example
import breen_deligne.eval2
import system_of_complexes.shift_sub_id

noncomputable theory

open_locale nnreal

universe u

open category_theory category_theory.limits breen_deligne

section step1

variables (r' : ‚Ñù‚â•0)
variables (BD : breen_deligne.data) (Œ∫ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ c, BD.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')

abbreviation freeCond := Profinite_to_Condensed.{u} ‚ãô CondensedSet_to_Condensed_Ab

def QprimeFP_nat : ‚Ñù‚â•0 ‚•§ chain_complex (Condensed.{u} Ab.{u+1}) ‚Ñï :=
FPsystem r' BD ‚ü®M‚ü© Œ∫ ‚ãô (freeCond.{u}.map_FreeAb ‚ãô FreeAb.eval _).map_homological_complex _

def QprimeFP_int : ‚Ñù‚â•0 ‚•§ cochain_complex (Condensed.{u} Ab.{u+1}) ‚Ñ§ :=
QprimeFP_nat r' BD Œ∫ M ‚ãô homological_complex.embed complex_shape.embedding.nat_down_int_up

def QprimeFP : ‚Ñù‚â•0 ‚•§ bounded_homotopy_category (Condensed.{u} Ab.{u+1}) :=
QprimeFP_nat r' BD Œ∫ M ‚ãô chain_complex.to_bounded_homotopy_category

end step1

section step2

variables {r' : ‚Ñù‚â•0}
variables (BD : breen_deligne.package) (Œ∫ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ c, BD.data.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')

abbreviation freeCond' := Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_Condensed_Ab

def ProFiltPseuNormGrpWithTinv‚ÇÅ.to_Condensed : Condensed.{u} Ab.{u+1} :=
(PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r' ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u} ‚ãô
  CompHausFiltPseuNormGrp.to_Condensed.{u}).obj M

-- move me
/-- `Tinv : M ‚Üí M` as hom of condensed abelian groups -/
def _root_.ProFiltPseuNormGrpWithTinv‚ÇÅ.Tinv_cond : M.to_Condensed ‚ü∂ M.to_Condensed :=
(CompHausFiltPseuNormGrp.to_Condensed.{u}).map
  profinitely_filtered_pseudo_normed_group_with_Tinv.Tinv

def QprimeFP_incl (c : ‚Ñù‚â•0) :
  (QprimeFP_int r' BD.data Œ∫ M).obj c ‚ü∂
  (BD.eval' freeCond').obj M.to_Condensed :=
(homological_complex.embed complex_shape.embedding.nat_down_int_up).map
{ f := Œª n, CondensedSet_to_Condensed_Ab.map sorry,
  comm' := sorry }

variables (Œπ : ulift.{u+1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ)

def QprimeFP_sigma_proj :
  ‚àê (Œª k, (QprimeFP_int r' BD.data Œ∫ M).obj (Œπ k)) ‚ü∂
  (BD.eval' freeCond').obj M.to_Condensed :=
sigma.desc $ Œª n, QprimeFP_incl BD Œ∫ M _

instance QprimeFP.uniformly_bounded :
  bounded_homotopy_category.uniformly_bounded (Œª k, (QprimeFP r' BD.data Œ∫ M).obj (Œπ k)) :=
begin
  use 1, intro k, apply chain_complex.bounded_by_one,
end

end step2

section step3
open bounded_homotopy_category

variables (Œπ : ulift.{u+1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ)
variables (A B : ‚Ñù‚â•0 ‚•§ cochain_complex (Condensed.{u} Ab.{u+1}) ‚Ñ§)
-- variables [uniformly_bounded (Œª k, A.obj (Œπ k))]

def sigma_shift : ‚àê (Œª k, A.obj (Œπ k)) ‚ü∂ ‚àê (Œª k, A.obj (Œπ k)) :=
sigma.desc $ Œª k, A.map (hom_of_le $ hŒπ $ by { cases k, recover, swap, exact ‚ü®k.down + 1‚ü©, apply nat.le_succ }) ‚â´
  sigma.Œπ (Œª k, A.obj (Œπ k)) ‚ü®k.down + 1‚ü©

def QprimeFP.shift_sub_id : ‚àê (Œª k, A.obj (Œπ k)) ‚ü∂ ‚àê (Œª k, A.obj (Œπ k)) :=
sigma_shift _ hŒπ _ - ùüô _

variables {A B}

def sigma_map (f : A ‚ü∂ B) : ‚àê (Œª k, A.obj (Œπ k)) ‚ü∂ ‚àê (Œª k, B.obj (Œπ k)) :=
sigma.desc $ Œª k, f.app _ ‚â´ sigma.Œπ _ k

end step3

section step4

variables {r' : ‚Ñù‚â•0}
variables (BD : breen_deligne.package) (Œ∫ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ c, BD.data.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')
variables (Œπ : ulift.{u+1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ)

lemma QprimeFP.short_exact (n : ‚Ñ§) :
  short_exact ((QprimeFP.shift_sub_id _ hŒπ _).f n) ((QprimeFP_sigma_proj BD Œ∫ M Œπ).f n) :=
sorry

end step4

section step5

variables {r' : ‚Ñù‚â•0}
variables (BD : breen_deligne.data)
variables (Œ∫ Œ∫‚ÇÇ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ (c : ‚Ñù‚â•0), BD.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables [‚àÄ (c : ‚Ñù‚â•0), BD.suitable (Œ∫‚ÇÇ c)] [‚àÄ n, fact (monotone (function.swap Œ∫‚ÇÇ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')
variables (Œπ : ulift.{u+1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ)

def QprimeFP_nat.Tinv [‚àÄ c n, fact (Œ∫ c n ‚â§ r' * Œ∫‚ÇÇ c n)] :
  (QprimeFP_nat r' BD Œ∫ M) ‚ü∂ (QprimeFP_nat r' BD Œ∫‚ÇÇ M) :=
sorry

def QprimeFP_int.Tinv [‚àÄ c n, fact (Œ∫ c n ‚â§ r' * Œ∫‚ÇÇ c n)] :
  (QprimeFP_int r' BD Œ∫ M) ‚ü∂ (QprimeFP_int r' BD Œ∫‚ÇÇ M) :=
whisker_right (QprimeFP_nat.Tinv _ _ _ _)
  (homological_complex.embed complex_shape.embedding.nat_down_int_up)

def QprimeFP.Tinv [‚àÄ c n, fact (Œ∫ c n ‚â§ r' * Œ∫‚ÇÇ c n)] :
  (QprimeFP r' BD Œ∫ M) ‚ü∂ (QprimeFP r' BD Œ∫‚ÇÇ M) :=
whisker_right (QprimeFP_nat.Tinv _ _ _ _) chain_complex.to_bounded_homotopy_category

/-- The natural inclusion map -/
def QprimeFP_nat.Œπ [‚àÄ c n, fact (Œ∫ c n ‚â§ Œ∫‚ÇÇ c n)] :
  (QprimeFP_nat r' BD Œ∫ M) ‚ü∂ (QprimeFP_nat r' BD Œ∫‚ÇÇ M) :=
sorry

/-- The natural inclusion map -/
def QprimeFP_int.Œπ [‚àÄ c n, fact (Œ∫ c n ‚â§ Œ∫‚ÇÇ c n)] :
  (QprimeFP_int r' BD Œ∫ M) ‚ü∂ (QprimeFP_int r' BD Œ∫‚ÇÇ M) :=
whisker_right (QprimeFP_nat.Œπ _ _ _ _)
  (homological_complex.embed complex_shape.embedding.nat_down_int_up)

/-- The natural inclusion map -/
def QprimeFP.Œπ [‚àÄ c n, fact (Œ∫ c n ‚â§ Œ∫‚ÇÇ c n)] :
  (QprimeFP r' BD Œ∫ M) ‚ü∂ (QprimeFP r' BD Œ∫‚ÇÇ M) :=
whisker_right (QprimeFP_nat.Œπ _ _ _ _) chain_complex.to_bounded_homotopy_category

lemma commsq_shift_sub_id_Tinv [‚àÄ (c : ‚Ñù‚â•0) (n : ‚Ñï), fact (Œ∫‚ÇÇ c n ‚â§ r' * Œ∫ c n)] :
  commsq (QprimeFP.shift_sub_id Œπ hŒπ (QprimeFP_int r' BD Œ∫‚ÇÇ M))
  (sigma_map (Œª (k : ulift ‚Ñï), Œπ k) (QprimeFP_int.Tinv BD Œ∫‚ÇÇ Œ∫ M))
  (sigma_map (Œª (k : ulift ‚Ñï), Œπ k) (QprimeFP_int.Tinv BD Œ∫‚ÇÇ Œ∫ M))
  (QprimeFP.shift_sub_id Œπ hŒπ (QprimeFP_int r' BD Œ∫ M)) :=
sorry

lemma commsq_shift_sub_id_Œπ [‚àÄ (c : ‚Ñù‚â•0) (n : ‚Ñï), fact (Œ∫‚ÇÇ c n ‚â§ Œ∫ c n)] :
  commsq (QprimeFP.shift_sub_id Œπ hŒπ (QprimeFP_int r' BD Œ∫‚ÇÇ M))
  (sigma_map (Œª (k : ulift ‚Ñï), Œπ k) (QprimeFP_int.Œπ BD Œ∫‚ÇÇ Œ∫ M))
  (sigma_map (Œª (k : ulift ‚Ñï), Œπ k) (QprimeFP_int.Œπ BD Œ∫‚ÇÇ Œ∫ M))
  (QprimeFP.shift_sub_id Œπ hŒπ (QprimeFP_int r' BD Œ∫ M)) :=
sorry

end step5

section step6

variables {r' : ‚Ñù‚â•0}
variables (BD : breen_deligne.package)
variables (Œ∫ Œ∫‚ÇÇ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ (c : ‚Ñù‚â•0), BD.data.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables [‚àÄ (c : ‚Ñù‚â•0), BD.data.suitable (Œ∫‚ÇÇ c)] [‚àÄ n, fact (monotone (function.swap Œ∫‚ÇÇ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')
variables (Œπ : ulift.{u+1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ)

lemma commsq_sigma_proj_Tinv [‚àÄ (c : ‚Ñù‚â•0) (n : ‚Ñï), fact (Œ∫‚ÇÇ c n ‚â§ r' * Œ∫ c n)] :
  commsq (QprimeFP_sigma_proj BD Œ∫‚ÇÇ M Œπ) (sigma_map (Œª (k : ulift ‚Ñï), Œπ k)
    (QprimeFP_int.Tinv BD.data Œ∫‚ÇÇ Œ∫ M))
  ((BD.eval' freeCond').map M.Tinv_cond)
  (QprimeFP_sigma_proj BD Œ∫ M Œπ) :=
sorry

lemma commsq_sigma_proj_Œπ [‚àÄ (c : ‚Ñù‚â•0) (n : ‚Ñï), fact (Œ∫‚ÇÇ c n ‚â§ Œ∫ c n)] :
  commsq (QprimeFP_sigma_proj BD Œ∫‚ÇÇ M Œπ) (sigma_map (Œª (k : ulift ‚Ñï), Œπ k)
    (QprimeFP_int.Œπ BD.data Œ∫‚ÇÇ Œ∫ M)) (ùüô _) (QprimeFP_sigma_proj BD Œ∫ M Œπ) :=
sorry

end step6

-- variables (f : ‚Ñï ‚Üí ‚Ñù‚â•0)
-- #check ‚àê (Œª i, (QprimeFP r' BD Œ∫ M).obj (f i))
