import pseudo_normed_group.category
import for_mathlib.ab_explicit_limits

open category_theory
open category_theory.limits

universe u
variables {J : Type u} [small_category J]

-- We can develop all this stuff for `CompHausFiltPseuNormGrp‚ÇÅ` as well, if needed.
namespace ProFiltPseuNormGrp‚ÇÅ

@[simp]
lemma id_apply {A : ProFiltPseuNormGrp‚ÇÅ} (a : A) : (ùüô A : A ‚ü∂ A) a = a := rfl

@[simp]
lemma comp_apply {A B C : ProFiltPseuNormGrp‚ÇÅ} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (a : A) :
  (f ‚â´ g) a = g (f a) := rfl

attribute [simps] level Ab.explicit_limit_cone

def to_Ab : ProFiltPseuNormGrp‚ÇÅ.{u} ‚•§ Ab.{u} :=
{ obj := Œª M, AddCommGroup.of M,
  map := Œª M N f, f.to_add_monoid_hom }

variable {K : J ‚•§ ProFiltPseuNormGrp‚ÇÅ.{u}}
variable (C : limits.limit_cone (K ‚ãô to_Ab))

def bounded_elements : add_subgroup C.cone.X :=
{ carrier := { x | ‚àÉ c, ‚àÄ j, C.cone.œÄ.app j x ‚àà pseudo_normed_group.filtration (K.obj j) c },
  zero_mem' := ‚ü®0, Œª j, by { simp, apply pseudo_normed_group.zero_mem_filtration } ‚ü©,
  add_mem' := Œª a b ha hb, begin
    obtain ‚ü®c,hc‚ü© := ha,
    obtain ‚ü®d,hd‚ü© := hb,
    use c + d,
    intros j,
    simp,
    apply pseudo_normed_group.add_mem_filtration,
    apply hc,
    apply hd,
  end,
  neg_mem' := Œª a ha, begin
    obtain ‚ü®c,hc‚ü© := ha,
    use c,
    intros j,
    simp,
    apply pseudo_normed_group.neg_mem_filtration,
    apply hc,
  end }

def bounded_elements.filt (c : nnreal) : set C.cone.X :=
{ x | ‚àÄ j, C.cone.œÄ.app j x ‚àà pseudo_normed_group.filtration (K.obj j) c }

def bounded_elements.filt_incl (c : nnreal) :
  bounded_elements.filt C c ‚Üí bounded_elements C :=
Œª x, ‚ü®x, c, x.2‚ü©

def bounded_elements.filtration (c : nnreal) : set (bounded_elements C) :=
set.range (bounded_elements.filt_incl _ c)

@[simps]
def bounded_elements.filtration_to_Profinite_limit_cone (c : nnreal) :
  bounded_elements.filtration C c ‚Üí (Profinite.limit_cone (K ‚ãô level.obj c)).X :=
Œª t, ‚ü®Œª j, ‚ü®C.cone.œÄ.app _ t.1.1, by { rcases t with ‚ü®_,w,rfl‚ü©, apply w.2}‚ü©,
    by { intros i j f, ext, dsimp, rw ‚Üê C.cone.w f, refl }‚ü©

@[simps]
def bounded_elements.Profinite_limit_cone_to_filtration (c : nnreal) :
(Profinite.limit_cone (K ‚ãô level.obj c)).X ‚Üí bounded_elements.filtration C c := Œª t,
{ val := ‚ü®C.2.lift (Ab.explicit_limit_cone _) ‚ü®Œª j, (t.1 j).1,
  by { intros i j f, dsimp, change _ = (t.val _).val, rw ‚Üê t.2 f, refl }‚ü©,
  by { use c, intros j, dsimp, rw [‚Üê Ab.comp_apply, C.2.fac], exact (t.1 j).2 }‚ü©,
  property := by { refine ‚ü®‚ü®C.2.lift (Ab.explicit_limit_cone _) ‚ü®Œª j, (t.1 j).1,
    by { intros i j f, dsimp, change _ = (t.val _).val, rw ‚Üê t.2 f, refl }‚ü©, _‚ü©, _‚ü©,
    { intros j, rw [‚Üê Ab.comp_apply, C.2.fac], exact (t.1 j).2 },
    { ext, refl } } }

def bounded_elements.filtration_equiv (c : nnreal) :
  bounded_elements.filtration C c ‚âÉ (Profinite.limit_cone (K ‚ãô level.obj c)).X :=
{ to_fun := bounded_elements.filtration_to_Profinite_limit_cone C c,
  inv_fun := bounded_elements.Profinite_limit_cone_to_filtration C c,
  left_inv := by { rintros ‚ü®‚ü®f,h2‚ü©,h3‚ü©, ext, dsimp, apply Ab.is_limit_ext,
    intros j, rw [‚Üê Ab.comp_apply, C.2.fac], refl },
  right_inv := by { rintros ‚ü®f,hf‚ü©, ext, dsimp, rw [‚Üê Ab.comp_apply, C.2.fac], refl } }

instance (c : nnreal) :
  topological_space (bounded_elements.filtration C c) :=
topological_space.induced (bounded_elements.filtration_equiv C c) infer_instance

instance (c : nnreal) :
  t2_space (bounded_elements.filtration C c) := sorry

instance (c : nnreal) :
  compact_space (bounded_elements.filtration C c) := sorry

instance (c : nnreal) :
  totally_disconnected_space (bounded_elements.filtration C c) := sorry

def bounded_cone_point : ProFiltPseuNormGrp‚ÇÅ :=
{ M := bounded_elements C,
  str :=
  { filtration := bounded_elements.filtration _,
    filtration_mono := begin
      intros c‚ÇÅ c‚ÇÇ h x hx,
      obtain ‚ü®t,rfl‚ü© := hx, refine ‚ü®‚ü®t,_‚ü©,rfl‚ü©, intros i,
      apply pseudo_normed_group.filtration_mono h, apply t.2,
    end,
    zero_mem_filtration := begin
      intros c, refine ‚ü®‚ü®0,Œª i, _‚ü©,rfl‚ü©, simp,
        apply pseudo_normed_group.zero_mem_filtration
    end,
    neg_mem_filtration := begin
      intros c x hx,
      obtain ‚ü®t,rfl‚ü© := hx, refine ‚ü®‚ü®-t, Œª i, _‚ü©, rfl‚ü©, simp,
      apply pseudo_normed_group.neg_mem_filtration, apply t.2
    end,
    add_mem_filtration := begin
      intros c‚ÇÅ c‚ÇÇ x‚ÇÅ x‚ÇÇ h‚ÇÅ h‚ÇÇ,
      obtain ‚ü®t‚ÇÅ,rfl‚ü© := h‚ÇÅ, obtain ‚ü®t‚ÇÇ,rfl‚ü© := h‚ÇÇ,
      refine ‚ü®‚ü®t‚ÇÅ + t‚ÇÇ, Œª i, _‚ü©, rfl‚ü©, simp,
      apply pseudo_normed_group.add_mem_filtration, apply t‚ÇÅ.2, apply t‚ÇÇ.2,
    end,
    continuous_add' := sorry,
    continuous_neg' := sorry,
    continuous_cast_le := sorry },
    exhaustive' := begin
      intros m,
      obtain ‚ü®c,hc‚ü© := m.2,
      refine ‚ü®c,‚ü®m.1, hc‚ü©, by { ext, refl }‚ü©,
    end }

def bounded_cone : cone K :=
{ X := bounded_cone_point C,
  œÄ :=
  { app := Œª j,
    { to_fun := Œª x, C.cone.œÄ.app _ x.1,
      map_zero' := by simp,
      map_add' := Œª x y, by simp,
      strict' := begin
        rintros c x ‚ü®x,rfl‚ü©,
        apply x.2,
      end,
      continuous' := sorry },
    naturality' := begin
      intros i j f,
      ext,
      dsimp,
      rw ‚Üê C.cone.w f,
      refl,
    end } }

def bounded_cone_lift (S : cone K) : S.X ‚ü∂ bounded_cone_point C :=
{ to_fun := Œª x, ‚ü®C.2.lift (to_Ab.map_cone S) x, begin
    obtain ‚ü®c,hc‚ü© := S.X.exhaustive x,
    use c,
    intros j,
    rw [‚Üê Ab.comp_apply, C.2.fac],
    apply (S.œÄ.app j).strict,
    exact hc,
  end‚ü©,
  map_zero' := by { ext, simp },
  map_add' := Œª x y, by { ext, simp },
  strict' := begin
    intros c x hx,
    refine ‚ü®‚ü®_, Œª j, _‚ü©,rfl‚ü©,
    erw [‚Üê Ab.comp_apply, C.2.fac],
    apply (S.œÄ.app j).strict,
    exact hx,
  end,
  continuous' := sorry }

def bounded_cone_is_limit : is_limit (bounded_cone C) :=
{ lift := Œª S, bounded_cone_lift C S,
  fac' := begin
    intros S j,
    ext,
    dsimp [bounded_cone_lift, bounded_cone],
    rw [‚Üê Ab.comp_apply, C.2.fac],
    refl,
  end,
  uniq' := begin
    intros S m hm,
    ext,
    dsimp [bounded_cone_lift, bounded_cone],
    apply Ab.is_limit_ext,
    intros j,
    rw [‚Üê Ab.comp_apply, C.2.fac],
    dsimp,
    rw ‚Üê hm,
    refl,
  end }

end ProFiltPseuNormGrp‚ÇÅ
