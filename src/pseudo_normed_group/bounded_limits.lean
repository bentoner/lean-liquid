import pseudo_normed_group.category
import for_mathlib.ab_explicit_limits

import topology.category.Compactum

open category_theory
open category_theory.limits

universe u
variables {J : Type u} [small_category J]

structure PseuNormGrp‚ÇÅ :=
(carrier : Type u)
[str : pseudo_normed_group carrier]
(exhaustive' : ‚àÄ x : carrier, ‚àÉ c : nnreal,
  x ‚àà pseudo_normed_group.filtration carrier c)

namespace PseuNormGrp‚ÇÅ

instance : has_coe_to_sort PseuNormGrp‚ÇÅ.{u} (Type u) := ‚ü®carrier‚ü©
instance (M : PseuNormGrp‚ÇÅ.{u}) : pseudo_normed_group M := M.str

lemma exhaustive (M : PseuNormGrp‚ÇÅ) (x : M) :
  ‚àÉ c, x ‚àà pseudo_normed_group.filtration M c := M.exhaustive' x

instance : category PseuNormGrp‚ÇÅ.{u} :=
{ hom := Œª A B, strict_pseudo_normed_group_hom A B,
  id := Œª A, strict_pseudo_normed_group_hom.id A,
  comp := Œª A B C f g, f.comp g }

@[simp]
lemma id_apply (M : PseuNormGrp‚ÇÅ) (x : M) : (ùüô M : M ‚ü∂ M) x = x := rfl

@[simp]
lemma comp_apply {A B C : PseuNormGrp‚ÇÅ} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (a : A) :
  (f ‚â´ g) a = g (f a) := rfl

def to_Ab : PseuNormGrp‚ÇÅ.{u} ‚•§ Ab.{u} :=
{ obj := Œª M, AddCommGroup.of M,
  map := Œª M N f, f.to_add_monoid_hom }

variable {K : J ‚•§ PseuNormGrp‚ÇÅ.{u}}
variable (C : limits.limit_cone (K ‚ãô to_Ab))

def bounded_elements : add_subgroup C.cone.X :=
{ carrier := { x | ‚àÉ c, ‚àÄ j, C.cone.œÄ.app j x ‚àà pseudo_normed_group.filtration (K.obj j) c },
  zero_mem' := ‚ü®0, Œª j, by { simp, apply pseudo_normed_group.zero_mem_filtration } ‚ü©,
  add_mem' := Œª a b ha hb, begin
    obtain ‚ü®c,hc‚ü© := ha,
    obtain ‚ü®d,hd‚ü© := hb,
    use c + d,
    intros j,
    simp,
    apply pseudo_normed_group.add_mem_filtration,
    apply hc,
    apply hd,
  end,
  neg_mem' := Œª a ha, begin
    obtain ‚ü®c,hc‚ü© := ha,
    use c,
    intros j,
    simp,
    apply pseudo_normed_group.neg_mem_filtration,
    apply hc,
  end }

def bounded_elements.filt (c : nnreal) : set C.cone.X :=
{ x | ‚àÄ j, C.cone.œÄ.app j x ‚àà pseudo_normed_group.filtration (K.obj j) c }

def bounded_elements.filt_incl (c : nnreal) :
  bounded_elements.filt C c ‚Üí bounded_elements C :=
Œª x, ‚ü®x, c, x.2‚ü©

def bounded_elements.filtration (c : nnreal) : set (bounded_elements C) :=
set.range (bounded_elements.filt_incl _ c)

def bounded_cone_point : PseuNormGrp‚ÇÅ :=
{ carrier := bounded_elements C,
  str :=
  { filtration := bounded_elements.filtration _,
    filtration_mono := begin
      intros c‚ÇÅ c‚ÇÇ h x hx,
      obtain ‚ü®t,rfl‚ü© := hx, refine ‚ü®‚ü®t,_‚ü©,rfl‚ü©, intros i,
      apply pseudo_normed_group.filtration_mono h, apply t.2,
    end,
    zero_mem_filtration := begin
      intros c, refine ‚ü®‚ü®0,Œª i, _‚ü©,rfl‚ü©, simp,
        apply pseudo_normed_group.zero_mem_filtration
    end,
    neg_mem_filtration := begin
      intros c x hx,
      obtain ‚ü®t,rfl‚ü© := hx, refine ‚ü®‚ü®-t, Œª i, _‚ü©, rfl‚ü©, simp,
      apply pseudo_normed_group.neg_mem_filtration, apply t.2
    end,
    add_mem_filtration := begin
      intros c‚ÇÅ c‚ÇÇ x‚ÇÅ x‚ÇÇ h‚ÇÅ h‚ÇÇ,
      obtain ‚ü®t‚ÇÅ,rfl‚ü© := h‚ÇÅ, obtain ‚ü®t‚ÇÇ,rfl‚ü© := h‚ÇÇ,
      refine ‚ü®‚ü®t‚ÇÅ + t‚ÇÇ, Œª i, _‚ü©, rfl‚ü©, simp,
      apply pseudo_normed_group.add_mem_filtration, apply t‚ÇÅ.2, apply t‚ÇÇ.2,
    end },
    exhaustive' := begin
      intros m,
      obtain ‚ü®c,hc‚ü© := m.2,
      refine ‚ü®c,‚ü®m.1, hc‚ü©, by { ext, refl }‚ü©,
    end }

def bounded_cone : cone K :=
{ X := bounded_cone_point C,
  œÄ :=
  { app := Œª j,
    { to_fun := Œª x, C.cone.œÄ.app _ x.1,
      map_zero' := by simp,
      map_add' := Œª x y, by simp,
      strict' := begin
        rintros c x ‚ü®x,rfl‚ü©,
        apply x.2,
      end },
    naturality' := begin
      intros i j f,
      ext,
      dsimp,
      rw ‚Üê C.cone.w f,
      refl,
    end } }

def bounded_cone_lift (S : cone K) : S.X ‚ü∂ bounded_cone_point C :=
{ to_fun := Œª x, ‚ü®C.2.lift (to_Ab.map_cone S) x, begin
    obtain ‚ü®c,hc‚ü© := S.X.exhaustive x,
    use c,
    intros j,
    rw [‚Üê Ab.comp_apply, C.2.fac],
    apply (S.œÄ.app j).strict,
    exact hc,
  end‚ü©,
  map_zero' := by { ext, simp },
  map_add' := Œª x y, by { ext, simp },
  strict' := begin
    intros c x hx,
    refine ‚ü®‚ü®_, Œª j, _‚ü©,rfl‚ü©,
    erw [‚Üê Ab.comp_apply, C.2.fac],
    apply (S.œÄ.app j).strict,
    exact hx,
  end }

def bounded_cone_is_limit : is_limit (bounded_cone C) :=
{ lift := Œª S, bounded_cone_lift C S,
  fac' := begin
    intros S j,
    ext,
    dsimp [bounded_cone_lift, bounded_cone],
    rw [‚Üê Ab.comp_apply, C.2.fac],
    refl,
  end,
  uniq' := begin
    intros S m hm,
    ext,
    dsimp [bounded_cone_lift, bounded_cone],
    apply Ab.is_limit_ext,
    intros j,
    rw [‚Üê Ab.comp_apply, C.2.fac],
    dsimp,
    rw ‚Üê hm,
    refl,
  end }

instance : has_limits PseuNormGrp‚ÇÅ :=
begin
  constructor, introsI J hJ, constructor, intros K,
  exact has_limit.mk ‚ü®_, bounded_cone_is_limit ‚ü®_,limit.is_limit _‚ü©‚ü©,
end

open pseudo_normed_group

lemma mem_filtration_iff_of_is_limit (C : cone K) (hC : is_limit C)
  (x : C.X) (c : nnreal) :
  x ‚àà pseudo_normed_group.filtration C.X c ‚Üî
  (‚àÄ j : J, C.œÄ.app j x ‚àà pseudo_normed_group.filtration (K.obj j) c) :=
begin
  split,
  { intros h j,
    exact (C.œÄ.app j).strict h },
  { intros h,
    let E := bounded_cone ‚ü®_, Ab.explicit_limit_cone_is_limit _‚ü©,
    let e : C ‚âÖ E := hC.unique_up_to_iso (bounded_cone_is_limit _),
    let eX : C.X ‚âÖ E.X := (cones.forget _).map_iso e,
    let w := eX.hom x,
    have hw : ‚àÄ j, E.œÄ.app j w ‚àà filtration (K.obj j) c,
    { intros j,
      dsimp only [w],
      change (eX.hom ‚â´ E.œÄ.app _) _ ‚àà _,
      dsimp only [eX, functor.map_iso, cones.forget],
      convert h j,
      simp },
    suffices : w ‚àà filtration E.X c,
    { convert eX.inv.strict this,
      change _ = (eX.hom ‚â´ eX.inv) x,
      rw iso.hom_inv_id,
      refl },
    refine ‚ü®‚ü®_,hw‚ü©,rfl‚ü© }
end

@[simps]
def _root_.strict_pseudo_normed_group_hom.level {M N : Type*}
  [pseudo_normed_group M] [pseudo_normed_group N]
  (f : strict_pseudo_normed_group_hom M N) (c) :
  filtration M c ‚Üí filtration N c :=
Œª x, ‚ü®f x, f.strict x.2‚ü©

@[simp]
lemma _root_.strict_pseudo_normed_group_hom.level_id
  (M : Type*) [pseudo_normed_group M] (c) :
  (strict_pseudo_normed_group_hom.id M).level c = id := by { ext, refl }

@[simp]
def _root_.strict_pseudo_normed_group_hom.level_comp {M N L : Type*}
  [pseudo_normed_group M] [pseudo_normed_group N] [pseudo_normed_group L]
  (f : strict_pseudo_normed_group_hom M N) (g : strict_pseudo_normed_group_hom N L) (c) :
  (f.comp g).level c = g.level c ‚àò f.level c := by { ext, refl }

@[simps]
def level : nnreal ‚•§ PseuNormGrp‚ÇÅ.{u} ‚•§ Type u :=
{ obj := Œª c,
  { obj := Œª M, filtration M c,
    map := Œª X Y f, f.level _,
    map_id' := Œª M, strict_pseudo_normed_group_hom.level_id M _,
    map_comp' := Œª M N L f g, f.level_comp g c },
  map := Œª c‚ÇÅ c‚ÇÇ h,
  { app := Œª M, pseudo_normed_group.cast_le' h.le } } .

def level_cone_iso_hom (c) (t : (level.obj c).obj (bounded_cone_point C)) :
  (K ‚ãô level.obj c).sections :=
{ val := Œª j,
  { val := C.cone.œÄ.app j t.1.1,
    property := begin
      obtain ‚ü®w,hw‚ü© := t.2,
      apply_fun (Œª e, e.val) at hw,
      rw ‚Üê hw,
      apply w.2
    end },
  property := begin
    intros i j f,
    ext,
    dsimp,
    rw ‚Üê C.cone.w f,
    refl,
  end }

def level_cone_iso_inv (c) (t : (K ‚ãô level.obj c).sections) :
  (level.obj c).obj (bounded_cone_point C) :=
{ val :=
  { val := C.2.lift (Ab.explicit_limit_cone _) ‚ü®Œª j, (t.1 j).1, begin
      intros i j f,
      dsimp,
      change _ = (t.val _).val,
      rw ‚Üê t.2 f,
      refl,
    end‚ü©,
    property := begin
      use c,
      intros j,
      rw [‚Üê Ab.comp_apply, C.2.fac],
      dsimp [Ab.explicit_limit_cone],
      apply (t.1 j).2,
    end },
  property := begin
    refine ‚ü®‚ü®_,_‚ü©,rfl‚ü©,
    intros j,
    dsimp,
    rw [‚Üê Ab.comp_apply, C.2.fac],
    dsimp [Ab.explicit_limit_cone],
    apply (t.1 j).2,
  end } .

def level_cone_iso (c) :
  (level.obj c).map_cone (bounded_cone C) ‚âÖ types.limit_cone _ :=
cones.ext
{ hom := level_cone_iso_hom _ _,
  inv := level_cone_iso_inv _ _,
  hom_inv_id' := begin
    ext,
    dsimp [level_cone_iso_inv, level_cone_iso_hom],
    apply Ab.is_limit_ext,
    intros j,
    rw [‚Üê Ab.comp_apply, C.2.fac],
    refl,
  end,
  inv_hom_id' := begin
    ext,
    dsimp [level_cone_iso_inv, level_cone_iso_hom],
    rw [‚Üê Ab.comp_apply, C.2.fac],
    refl,
  end }
begin
  intros j,
  ext,
  refl,
end

instance (c) : preserves_limits (level.obj c) :=
begin
  constructor, introsI J hJ, constructor, intros K,
  apply preserves_limit_of_preserves_limit_cone
    (bounded_cone_is_limit ‚ü®_, Ab.explicit_limit_cone_is_limit _‚ü©),
  apply is_limit.of_iso_limit (types.limit_cone_is_limit _) (level_cone_iso _ _).symm,
end

end PseuNormGrp‚ÇÅ

-- We can develop all this stuff for `CompHausFiltPseuNormGrp‚ÇÅ` as well, if needed.
namespace ProFiltPseuNormGrp‚ÇÅ

@[simp]
lemma id_apply {A : ProFiltPseuNormGrp‚ÇÅ} (a : A) : (ùüô A : A ‚ü∂ A) a = a := rfl

@[simp]
lemma comp_apply {A B C : ProFiltPseuNormGrp‚ÇÅ} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (a : A) :
  (f ‚â´ g) a = g (f a) := rfl

def to_PNG‚ÇÅ :
  ProFiltPseuNormGrp‚ÇÅ.{u} ‚•§ PseuNormGrp‚ÇÅ.{u} :=
{ obj := Œª M,
  { carrier := M,
    exhaustive' := M.exhaustive },
  map := Œª X Y f, { strict' := Œª c x h, f.strict h .. f.to_add_monoid_hom } }

variable (K : J ‚•§ ProFiltPseuNormGrp‚ÇÅ.{u})

def to_PNG‚ÇÅ_level (c) :
  to_PNG‚ÇÅ ‚ãô PseuNormGrp‚ÇÅ.level.obj c ‚âÖ level.obj c ‚ãô forget _ :=
nat_iso.of_components (Œª x, iso.refl _) $ by tidy

lemma level_eq_level_map {A B : PseuNormGrp‚ÇÅ} (f : A ‚ü∂ B)
  (c : nnreal) : (PseuNormGrp‚ÇÅ.level.obj c).map f =
  pseudo_normed_group.level f (Œª a b c, f.strict c) c := rfl

instance {J : Type u} (c : nnreal)
  [small_category J]
  (K : J ‚•§ ProFiltPseuNormGrp‚ÇÅ)
  (S : cone K) : topological_space ((PseuNormGrp‚ÇÅ.level.obj c).obj (to_PNG‚ÇÅ.map_cone S).X) :=
begin
  change topological_space ((level.obj c).obj S.X),
  apply_instance
end

lemma to_PNG‚ÇÅ_lift_is_limit_continuous_aux {J : Type u} (c : nnreal)
  [small_category J]
  (K : J ‚•§ ProFiltPseuNormGrp‚ÇÅ.{u})
  {C : cone K}
  (hC : is_limit (to_PNG‚ÇÅ.map_cone C))
  (S : cone K) :
  continuous
    ((PseuNormGrp‚ÇÅ.level.obj c).map (hC.lift (to_PNG‚ÇÅ.map_cone S))) :=
begin
  let C‚ÇÅ : cone ((K ‚ãô to_PNG‚ÇÅ) ‚ãô PseuNormGrp‚ÇÅ.level.obj c):=
      (PseuNormGrp‚ÇÅ.level.obj c).map_cone (to_PNG‚ÇÅ.map_cone C),
  let hC‚ÇÅ : is_limit C‚ÇÅ := is_limit_of_preserves (PseuNormGrp‚ÇÅ.level.obj c) hC,
  let Œ∑ : (K ‚ãô to_PNG‚ÇÅ) ‚ãô PseuNormGrp‚ÇÅ.level.obj c ‚âÖ
    (K ‚ãô level.obj c) ‚ãô forget _ := iso_whisker_left K (to_PNG‚ÇÅ_level c),
  let C‚ÇÇ : cone ((K ‚ãô level.obj c) ‚ãô forget _) :=
    (forget _).map_cone ((level.obj c).map_cone C),
  let hC‚ÇÇ : is_limit C‚ÇÇ := (is_limit.postcompose_hom_equiv Œ∑ _).symm hC‚ÇÅ,
  let C‚ÇÉ : cone (K ‚ãô level.obj c) := (level.obj c).map_cone C,
  let hC‚ÇÉ : is_limit C‚ÇÉ := is_limit_of_reflects (forget _) hC‚ÇÇ,
  have : (PseuNormGrp‚ÇÅ.level.obj c).map (hC.lift (to_PNG‚ÇÅ.map_cone S)) =
    (forget _).map (hC‚ÇÉ.lift ((level.obj c).map_cone S)),
  { have : (PseuNormGrp‚ÇÅ.level.obj c).map (hC.lift (to_PNG‚ÇÅ.map_cone S)) =
      hC‚ÇÅ.lift ((PseuNormGrp‚ÇÅ.level.obj c).map_cone (to_PNG‚ÇÅ.map_cone S)),
    { apply hC‚ÇÅ.uniq ((PseuNormGrp‚ÇÅ.level.obj c).map_cone (to_PNG‚ÇÅ.map_cone S)),
      intros j,
      dsimp,
      simp only [‚Üê functor.map_comp],
      congr' 1,
      erw hC.fac,
      refl },
    rw this,
    symmetry,
    apply (hC‚ÇÅ.uniq ((PseuNormGrp‚ÇÅ.level.obj c).map_cone (to_PNG‚ÇÅ.map_cone S))),
    intros j,
    have : (forget Profinite).map (hC‚ÇÉ.lift ((level.obj c).map_cone S)) =
      hC‚ÇÇ.lift ((forget _).map_cone (((level.obj c).map_cone S))),
    { apply  hC‚ÇÇ.uniq ((forget Profinite).map_cone ((level.obj c).map_cone S)),
      intros j,
      dsimp,
      change (forget _).map _ ‚â´ (forget _).map _ = (forget _).map _,
      simp only [‚Üê functor.map_comp],
      congr' 1,
      erw hC‚ÇÉ.fac,
      refl },
    rw this, clear this,
    erw hC‚ÇÇ.fac,
    refl },
  rw this,
  change continuous (hC‚ÇÉ.lift ((level.obj c).map_cone S)),
  continuity
end

def to_PNG‚ÇÅ_lift_is_limit {C : cone K} (hC : is_limit (to_PNG‚ÇÅ.map_cone C)) : is_limit C :=
{ lift := Œª S,
  { continuous' := Œª c, begin
      dsimp,
      erw ‚Üê level_eq_level_map,
      apply to_PNG‚ÇÅ_lift_is_limit_continuous_aux,
    end,
    ..(hC.lift (to_PNG‚ÇÅ.map_cone S)) },
  fac' := begin
    intros S j,
    ext,
    dsimp,
    have := hC.fac (to_PNG‚ÇÅ.map_cone S) j,
    apply_fun (Œª e, e x) at this,
    exact this,
  end,
  uniq' := begin
    intros S m hm,
    dsimp,
    have : to_PNG‚ÇÅ.map m = hC.lift (to_PNG‚ÇÅ.map_cone S),
    { apply hC.uniq (to_PNG‚ÇÅ.map_cone S),
      intros j,
      ext x,
      specialize hm j,
      apply_fun (Œª e, e x) at hm,
      exact hm },
    ext x,
    change (to_PNG‚ÇÅ.map m) x = _,
    rw this,
    refl,
  end }

namespace liftable_cone_of_is_limit_aux

variable (C : limits.limit_cone (K ‚ãô to_PNG‚ÇÅ))
include C

instance (c : nnreal) :
  topological_space (pseudo_normed_group.filtration C.cone.X c) := sorry

instance (c : nnreal) :
  t2_space (pseudo_normed_group.filtration C.cone.X c) := sorry

instance (c : nnreal) :
  compact_space (pseudo_normed_group.filtration C.cone.X c) := sorry

instance (c : nnreal) :
  totally_disconnected_space (pseudo_normed_group.filtration C.cone.X c) := sorry

def œÄ_level (c) (j) : pseudo_normed_group.filtration C.cone.X c ‚Üí
  pseudo_normed_group.filtration (K.obj j) c :=
pseudo_normed_group.level (C.cone.œÄ.app j) (C.cone.œÄ.app j).strict _

lemma continuous_œÄ_level (c) (j) : continuous (œÄ_level K C c j) := sorry

instance : profinitely_filtered_pseudo_normed_group C.cone.X :=
{ continuous_add' := sorry,
  continuous_neg' := sorry,
  continuous_cast_le := sorry,
  ..(infer_instance : pseudo_normed_group C.cone.X) }

def lifted_cone : cone K :=
{ X :=
  { M := C.cone.X,
    exhaustive' := C.cone.X.exhaustive },
  œÄ :=
  { app := Œª j,
    { continuous' := Œª c, continuous_œÄ_level K C c j,
      ..(C.cone.œÄ.app j)},
    naturality' := begin
      intros i j f,
      ext,
      dsimp,
      rw ‚Üê (C.cone.w f),
      refl,
    end } }

def valid_lift : to_PNG‚ÇÅ.map_cone (lifted_cone K C) ‚âÖ C.cone :=
cones.ext
{ hom :=
  { to_fun := id,
    map_zero' := rfl,
    map_add' := Œª _ _, rfl,
    strict' := Œª _ _ h, h },
  inv :=
  { to_fun := id,
    map_zero' := rfl,
    map_add' := Œª _ _, rfl,
    strict' := Œª _ _ h, h } } $ by tidy

end liftable_cone_of_is_limit_aux

def liftable_cone_of_is_limit (C : cone (K ‚ãô to_PNG‚ÇÅ)) (hC : is_limit C) :
  liftable_cone K to_PNG‚ÇÅ C :=
{ lifted_cone := liftable_cone_of_is_limit_aux.lifted_cone _ ‚ü®_,hC‚ü©,
  valid_lift := liftable_cone_of_is_limit_aux.valid_lift _ _ }

instance : creates_limit K to_PNG‚ÇÅ :=
{ reflects := Œª C, to_PNG‚ÇÅ_lift_is_limit _,
  lifts := Œª c hc, liftable_cone_of_is_limit _ _ hc }

instance : creates_limits to_PNG‚ÇÅ :=
{ creates_limits_of_shape := by { introsI J _, constructor, } }

/-
@[simp]
lemma id_apply {A : ProFiltPseuNormGrp‚ÇÅ} (a : A) : (ùüô A : A ‚ü∂ A) a = a := rfl

@[simp]
lemma comp_apply {A B C : ProFiltPseuNormGrp‚ÇÅ} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (a : A) :
  (f ‚â´ g) a = g (f a) := rfl

attribute [simps] level Ab.explicit_limit_cone

def to_Ab : ProFiltPseuNormGrp‚ÇÅ.{u} ‚•§ Ab.{u} :=
{ obj := Œª M, AddCommGroup.of M,
  map := Œª M N f, f.to_add_monoid_hom }

variable {K : J ‚•§ ProFiltPseuNormGrp‚ÇÅ.{u}}
variable (C : limits.limit_cone (K ‚ãô to_Ab))

def bounded_elements : add_subgroup C.cone.X :=
{ carrier := { x | ‚àÉ c, ‚àÄ j, C.cone.œÄ.app j x ‚àà pseudo_normed_group.filtration (K.obj j) c },
  zero_mem' := ‚ü®0, Œª j, by { simp, apply pseudo_normed_group.zero_mem_filtration } ‚ü©,
  add_mem' := Œª a b ha hb, begin
    obtain ‚ü®c,hc‚ü© := ha,
    obtain ‚ü®d,hd‚ü© := hb,
    use c + d,
    intros j,
    simp,
    apply pseudo_normed_group.add_mem_filtration,
    apply hc,
    apply hd,
  end,
  neg_mem' := Œª a ha, begin
    obtain ‚ü®c,hc‚ü© := ha,
    use c,
    intros j,
    simp,
    apply pseudo_normed_group.neg_mem_filtration,
    apply hc,
  end }

def bounded_elements.filt (c : nnreal) : set C.cone.X :=
{ x | ‚àÄ j, C.cone.œÄ.app j x ‚àà pseudo_normed_group.filtration (K.obj j) c }

def bounded_elements.filt_incl (c : nnreal) :
  bounded_elements.filt C c ‚Üí bounded_elements C :=
Œª x, ‚ü®x, c, x.2‚ü©

def bounded_elements.filtration (c : nnreal) : set (bounded_elements C) :=
set.range (bounded_elements.filt_incl _ c)

@[simps]
def bounded_elements.filtration_to_Profinite_limit_cone (c : nnreal) :
  bounded_elements.filtration C c ‚Üí (Profinite.limit_cone (K ‚ãô level.obj c)).X :=
Œª t, ‚ü®Œª j, ‚ü®C.cone.œÄ.app _ t.1.1, by { rcases t with ‚ü®_,w,rfl‚ü©, apply w.2}‚ü©,
    by { intros i j f, ext, dsimp, rw ‚Üê C.cone.w f, refl }‚ü©

@[simps]
def bounded_elements.Profinite_limit_cone_to_filtration (c : nnreal) :
(Profinite.limit_cone (K ‚ãô level.obj c)).X ‚Üí bounded_elements.filtration C c := Œª t,
{ val := ‚ü®C.2.lift (Ab.explicit_limit_cone _) ‚ü®Œª j, (t.1 j).1,
  by { intros i j f, dsimp, change _ = (t.val _).val, rw ‚Üê t.2 f, refl }‚ü©,
  by { use c, intros j, dsimp, rw [‚Üê Ab.comp_apply, C.2.fac], exact (t.1 j).2 }‚ü©,
  property := by { refine ‚ü®‚ü®C.2.lift (Ab.explicit_limit_cone _) ‚ü®Œª j, (t.1 j).1,
    by { intros i j f, dsimp, change _ = (t.val _).val, rw ‚Üê t.2 f, refl }‚ü©, _‚ü©, _‚ü©,
    { intros j, rw [‚Üê Ab.comp_apply, C.2.fac], exact (t.1 j).2 },
    { ext, refl } } }

def bounded_elements.filtration_equiv (c : nnreal) :
  bounded_elements.filtration C c ‚âÉ (Profinite.limit_cone (K ‚ãô level.obj c)).X :=
{ to_fun := bounded_elements.filtration_to_Profinite_limit_cone C c,
  inv_fun := bounded_elements.Profinite_limit_cone_to_filtration C c,
  left_inv := by { rintros ‚ü®‚ü®f,h2‚ü©,h3‚ü©, ext, dsimp, apply Ab.is_limit_ext,
    intros j, rw [‚Üê Ab.comp_apply, C.2.fac], refl },
  right_inv := by { rintros ‚ü®f,hf‚ü©, ext, dsimp, rw [‚Üê Ab.comp_apply, C.2.fac], refl } }

instance (c : nnreal) :
  topological_space (bounded_elements.filtration C c) :=
topological_space.induced (bounded_elements.filtration_equiv C c) infer_instance

instance (c : nnreal) :
  t2_space (bounded_elements.filtration C c) := sorry

instance (c : nnreal) :
  compact_space (bounded_elements.filtration C c) := sorry

instance (c : nnreal) :
  totally_disconnected_space (bounded_elements.filtration C c) := sorry

def bounded_cone_point : ProFiltPseuNormGrp‚ÇÅ :=
{ M := bounded_elements C,
  str :=
  { filtration := bounded_elements.filtration _,
    filtration_mono := begin
      intros c‚ÇÅ c‚ÇÇ h x hx,
      obtain ‚ü®t,rfl‚ü© := hx, refine ‚ü®‚ü®t,_‚ü©,rfl‚ü©, intros i,
      apply pseudo_normed_group.filtration_mono h, apply t.2,
    end,
    zero_mem_filtration := begin
      intros c, refine ‚ü®‚ü®0,Œª i, _‚ü©,rfl‚ü©, simp,
        apply pseudo_normed_group.zero_mem_filtration
    end,
    neg_mem_filtration := begin
      intros c x hx,
      obtain ‚ü®t,rfl‚ü© := hx, refine ‚ü®‚ü®-t, Œª i, _‚ü©, rfl‚ü©, simp,
      apply pseudo_normed_group.neg_mem_filtration, apply t.2
    end,
    add_mem_filtration := begin
      intros c‚ÇÅ c‚ÇÇ x‚ÇÅ x‚ÇÇ h‚ÇÅ h‚ÇÇ,
      obtain ‚ü®t‚ÇÅ,rfl‚ü© := h‚ÇÅ, obtain ‚ü®t‚ÇÇ,rfl‚ü© := h‚ÇÇ,
      refine ‚ü®‚ü®t‚ÇÅ + t‚ÇÇ, Œª i, _‚ü©, rfl‚ü©, simp,
      apply pseudo_normed_group.add_mem_filtration, apply t‚ÇÅ.2, apply t‚ÇÇ.2,
    end,
    continuous_add' := sorry,
    continuous_neg' := sorry,
    continuous_cast_le := sorry },
    exhaustive' := begin
      intros m,
      obtain ‚ü®c,hc‚ü© := m.2,
      refine ‚ü®c,‚ü®m.1, hc‚ü©, by { ext, refl }‚ü©,
    end }

def bounded_cone : cone K :=
{ X := bounded_cone_point C,
  œÄ :=
  { app := Œª j,
    { to_fun := Œª x, C.cone.œÄ.app _ x.1,
      map_zero' := by simp,
      map_add' := Œª x y, by simp,
      strict' := begin
        rintros c x ‚ü®x,rfl‚ü©,
        apply x.2,
      end,
      continuous' := sorry },
    naturality' := begin
      intros i j f,
      ext,
      dsimp,
      rw ‚Üê C.cone.w f,
      refl,
    end } }

def bounded_cone_lift (S : cone K) : S.X ‚ü∂ bounded_cone_point C :=
{ to_fun := Œª x, ‚ü®C.2.lift (to_Ab.map_cone S) x, begin
    obtain ‚ü®c,hc‚ü© := S.X.exhaustive x,
    use c,
    intros j,
    rw [‚Üê Ab.comp_apply, C.2.fac],
    apply (S.œÄ.app j).strict,
    exact hc,
  end‚ü©,
  map_zero' := by { ext, simp },
  map_add' := Œª x y, by { ext, simp },
  strict' := begin
    intros c x hx,
    refine ‚ü®‚ü®_, Œª j, _‚ü©,rfl‚ü©,
    erw [‚Üê Ab.comp_apply, C.2.fac],
    apply (S.œÄ.app j).strict,
    exact hx,
  end,
  continuous' := sorry }

def bounded_cone_is_limit : is_limit (bounded_cone C) :=
{ lift := Œª S, bounded_cone_lift C S,
  fac' := begin
    intros S j,
    ext,
    dsimp [bounded_cone_lift, bounded_cone],
    rw [‚Üê Ab.comp_apply, C.2.fac],
    refl,
  end,
  uniq' := begin
    intros S m hm,
    ext,
    dsimp [bounded_cone_lift, bounded_cone],
    apply Ab.is_limit_ext,
    intros j,
    rw [‚Üê Ab.comp_apply, C.2.fac],
    dsimp,
    rw ‚Üê hm,
    refl,
  end }

-/
end ProFiltPseuNormGrp‚ÇÅ
