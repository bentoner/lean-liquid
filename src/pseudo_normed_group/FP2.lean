import breen_deligne.constants
import breen_deligne.suitable
import pseudo_normed_group.FP
import system_of_complexes.rescale

noncomputable theory

open_locale classical nnreal big_operators
local attribute [instance] type_pow

universe variable u

namespace category_theory
namespace FreeAb

def of_functor (C : Type*) [category C] : C ‚•§ FreeAb C :=
{ obj := of,
  map := Œª X Y f, free_abelian_group.of f,
  map_id' := Œª X, rfl,
  map_comp' := Œª X Y Z f g, rfl }

end FreeAb
end category_theory

open category_theory breen_deligne

namespace breen_deligne

variables (r' : ‚Ñù‚â•0)
variables (BD : breen_deligne.data)
variables (M : ProFiltPseuNormGrpWithTinv r')
variables (c c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ : ‚Ñù‚â•0) (l m n : ‚Ñï)

open category_theory breen_deligne
open Profinite pseudo_normed_group profinitely_filtered_pseudo_normed_group

/-- The "functor" that sends `M` and `c` to `(filtration M c)^n` -/
def FP2 (r' : ‚Ñù‚â•0) (c : ‚Ñù‚â•0) (n : ‚Ñï) :
  ProFiltPseuNormGrpWithTinv r' ‚•§ FreeAb Profinite :=
FiltrationPow r' c n ‚ãô FreeAb.of_functor _

theorem FP2_def (r' : ‚Ñù‚â•0) (c : ‚Ñù‚â•0) (n : ‚Ñï) :
  FP2 r' c n = FiltrationPow r' c n ‚ãô FreeAb.of_functor _ := rfl

namespace FP2

@[simps {fully_applied := ff}]
def res (r' : ‚Ñù‚â•0) (c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] (n : ‚Ñï) : FP2 r' c‚ÇÅ n ‚ü∂ FP2 r' c‚ÇÇ n :=
whisker_right (FiltrationPow.cast_le r' c‚ÇÅ c‚ÇÇ n) _

@[simp] lemma res_refl : res r' c c n = ùüô _ :=
by { simp [res, FiltrationPow.cast_le_refl], refl }

lemma res_comp_res [h‚ÇÅ : fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [h‚ÇÇ : fact (c‚ÇÇ ‚â§ c‚ÇÉ)] :
  res r' c‚ÇÅ c‚ÇÇ n ‚â´ res r' c‚ÇÇ c‚ÇÉ n = @res r' c‚ÇÅ c‚ÇÉ ‚ü®le_trans h‚ÇÅ.1 h‚ÇÇ.1‚ü© n :=
by simp only [res, ‚Üê whisker_right_comp, FiltrationPow.cast_le_comp]

section Tinv
open profinitely_filtered_pseudo_normed_group_with_Tinv
variables [fact (0 < r')]

@[simps {fully_applied := ff}]
def Tinv [fact (c‚ÇÅ ‚â§ r' * c‚ÇÇ)] : FP2 r' c‚ÇÅ n ‚ü∂ FP2 r' c‚ÇÇ n :=
whisker_right (FiltrationPow.Tinv r' c‚ÇÅ c‚ÇÇ n) _

lemma Tinv_def [fact (c‚ÇÅ ‚â§ r' * c‚ÇÇ)] :
  Tinv r' c‚ÇÅ c‚ÇÇ n = whisker_right (FiltrationPow.Tinv r' c‚ÇÅ c‚ÇÇ n) _ := rfl

lemma res_comp_Tinv
  [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [fact (c‚ÇÇ ‚â§ c‚ÇÉ)] [fact (c‚ÇÅ ‚â§ r' * c‚ÇÇ)] [fact (c‚ÇÇ ‚â§ r' * c‚ÇÉ)] :
  res r' c‚ÇÅ c‚ÇÇ n ‚â´ Tinv r' c‚ÇÇ c‚ÇÉ n = Tinv r' c‚ÇÅ c‚ÇÇ n ‚â´ res r' c‚ÇÇ c‚ÇÉ n :=
by { simp only [Tinv, res, ‚Üê whisker_right_comp], refl }

end Tinv

end FP2

open FP2

variables {l m n}

namespace basic_universal_map

open basic_universal_map

variables (œï : basic_universal_map m n)

def eval_FP2 (c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) [œï.suitable c‚ÇÅ c‚ÇÇ] : FP2 r' c‚ÇÅ m ‚ü∂ FP2 r' c‚ÇÇ n :=
whisker_right (œï.eval_FP r' c‚ÇÅ c‚ÇÇ) _

def eval_FP2' (c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) : FP2 r' c‚ÇÅ m ‚ü∂ FP2 r' c‚ÇÇ n :=
if H : œï.suitable c‚ÇÅ c‚ÇÇ
then by exactI whisker_right (œï.eval_FP r' c‚ÇÅ c‚ÇÇ) _
else 0

lemma eval_FP2_eq_eval_FP2' (h : œï.suitable c‚ÇÅ c‚ÇÇ) :
  eval_FP2 r' œï c‚ÇÅ c‚ÇÇ = eval_FP2' r' œï c‚ÇÅ c‚ÇÇ :=
by { delta eval_FP2 eval_FP2', rw dif_pos h }

lemma eval_FP2'_def [h : œï.suitable c‚ÇÅ c‚ÇÇ] :
  eval_FP2' r' œï c‚ÇÅ c‚ÇÇ = whisker_right (œï.eval_FP r' c‚ÇÅ c‚ÇÇ) _ :=
dif_pos h

lemma eval_FP2'_not_suitable (h : ¬¨ œï.suitable c‚ÇÅ c‚ÇÇ) :
  eval_FP2' r' œï c‚ÇÅ c‚ÇÇ = 0 :=
dif_neg h

lemma eval_FP2'_comp (f : basic_universal_map l m) (g : basic_universal_map m n)
  [hf : f.suitable c‚ÇÅ c‚ÇÇ] [hg : g.suitable c‚ÇÇ c‚ÇÉ] :
  eval_FP2' r' (comp g f) c‚ÇÅ c‚ÇÉ = eval_FP2' r' f c‚ÇÅ c‚ÇÇ ‚â´ eval_FP2' r' g c‚ÇÇ c‚ÇÉ :=
begin
  haveI : (comp g f).suitable c‚ÇÅ c‚ÇÉ := suitable_comp c‚ÇÇ,
  simp only [eval_FP2'_def, eval_FP_comp r' _ c‚ÇÇ, whisker_right_comp]
end

lemma eval_FP2_comp (f : basic_universal_map l m) (g : basic_universal_map m n)
  [hf : f.suitable c‚ÇÅ c‚ÇÇ] [hg : g.suitable c‚ÇÇ c‚ÇÉ] :
  @eval_FP2 r' _ _ (comp g f) c‚ÇÅ c‚ÇÉ (suitable_comp c‚ÇÇ) =
    eval_FP2 r' f c‚ÇÅ c‚ÇÇ ‚â´ eval_FP2 r' g c‚ÇÇ c‚ÇÉ :=
by { simp only [eval_FP2_eq_eval_FP2'], apply eval_FP2'_comp }

lemma res_comp_eval_FP2
  [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [fact (c‚ÇÉ ‚â§ c‚ÇÑ)] [œï.suitable c‚ÇÇ c‚ÇÑ] [œï.suitable c‚ÇÅ c‚ÇÉ] :
  res r' c‚ÇÅ c‚ÇÇ m ‚â´ eval_FP2 r' œï c‚ÇÇ c‚ÇÑ = eval_FP2 r' œï c‚ÇÅ c‚ÇÉ ‚â´ res r' c‚ÇÉ c‚ÇÑ n :=
by simp only [res, eval_FP2, ‚Üê whisker_right_comp,
  cast_le_comp_eval_FP _ c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ]

lemma Tinv_comp_eval_FP2 [fact (0 < r')] [fact (c‚ÇÅ ‚â§ r' * c‚ÇÇ)] [fact (c‚ÇÉ ‚â§ r' * c‚ÇÑ)]
  [œï.suitable c‚ÇÅ c‚ÇÉ] [œï.suitable c‚ÇÇ c‚ÇÑ] :
  Tinv r' c‚ÇÅ c‚ÇÇ m ‚â´ eval_FP2 r' œï c‚ÇÇ c‚ÇÑ = eval_FP2 r' œï c‚ÇÅ c‚ÇÉ ‚â´ Tinv r' c‚ÇÉ c‚ÇÑ n :=
by simp only [Tinv, eval_FP2, ‚Üê whisker_right_comp,
  Tinv_comp_eval_FP _ _ c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ]

end basic_universal_map

namespace universal_map

open free_abelian_group

variables (œï : universal_map m n)

def eval_FP2 [œï.suitable c‚ÇÅ c‚ÇÇ] : FP2 r' c‚ÇÅ m ‚ü∂ FP2 r' c‚ÇÇ n :=
‚àë g : {g : basic_universal_map m n // g ‚àà œï.support},
  begin
    haveI := suitable_of_mem_support œï c‚ÇÅ c‚ÇÇ g g.2,
    exact coeff (g : basic_universal_map m n) œï ‚Ä¢ (basic_universal_map.eval_FP2 r' g c‚ÇÅ c‚ÇÇ)
  end

def eval_FP2' : FP2 r' c‚ÇÅ m ‚ü∂ FP2 r' c‚ÇÇ n :=
‚àë g in œï.support, coeff g œï ‚Ä¢ (g.eval_FP2' r' c‚ÇÅ c‚ÇÇ)

lemma eval_FP2_eq_eval_FP2' (h : œï.suitable c‚ÇÅ c‚ÇÇ) :
  eval_FP2 r' c‚ÇÅ c‚ÇÇ œï = eval_FP2' r' c‚ÇÅ c‚ÇÇ œï :=
begin
  simp only [eval_FP2, eval_FP2', basic_universal_map.eval_FP2_eq_eval_FP2',
    subtype.val_eq_coe],
  symmetry,
  apply finset.sum_subtype œï.support (Œª _, iff.rfl),
end

@[simp] lemma eval_FP2'_of (f : basic_universal_map m n) :
  eval_FP2' r' c‚ÇÅ c‚ÇÇ (of f) = f.eval_FP2' r' c‚ÇÅ c‚ÇÇ :=
by simp only [eval_FP2', support_of, coeff_of_self, one_smul, finset.sum_singleton]

@[simp] lemma eval_FP2_of (f : basic_universal_map m n) [f.suitable c‚ÇÅ c‚ÇÇ] :
  eval_FP2 r' c‚ÇÅ c‚ÇÇ (of f) = f.eval_FP2 r' c‚ÇÅ c‚ÇÇ :=
by rw [eval_FP2_eq_eval_FP2', eval_FP2'_of, basic_universal_map.eval_FP2_eq_eval_FP2']

@[simp] lemma eval_FP2'_zero :
  eval_FP2' r' c‚ÇÅ c‚ÇÇ (0 : universal_map m n) = 0 :=
by rw [eval_FP2', support_zero, finset.sum_empty]

@[simp] lemma eval_FP2_zero :
  eval_FP2 r' c‚ÇÅ c‚ÇÇ (0 : universal_map m n) = 0 :=
by rw [eval_FP2_eq_eval_FP2', eval_FP2'_zero]

@[simp] lemma eval_FP2'_neg (f : universal_map m n) :
  eval_FP2' r' c‚ÇÅ c‚ÇÇ (-f) = -eval_FP2' r' c‚ÇÅ c‚ÇÇ f :=
by simp only [eval_FP2', add_monoid_hom.map_neg, finset.sum_neg_distrib, neg_smul, support_neg]

@[simp] lemma eval_FP2_neg (f : universal_map m n) [f.suitable c‚ÇÅ c‚ÇÇ] :
  eval_FP2 r' c‚ÇÅ c‚ÇÇ (-f) = -eval_FP2 r' c‚ÇÅ c‚ÇÇ f :=
by simp only [eval_FP2_eq_eval_FP2', eval_FP2'_neg]

lemma eval_FP2'_add (f g : universal_map m n) :
  eval_FP2' r' c‚ÇÅ c‚ÇÇ (f + g) = eval_FP2' r' c‚ÇÅ c‚ÇÇ f + eval_FP2' r' c‚ÇÅ c‚ÇÇ g :=
begin
  simp only [eval_FP2'],
  rw finset.sum_subset (support_add f g), -- two goals
  simp only [add_monoid_hom.map_add _ f g, add_smul],
  convert finset.sum_add_distrib using 2, -- three goals
  apply finset.sum_subset (finset.subset_union_left _ _), swap,
  apply finset.sum_subset (finset.subset_union_right _ _),
  all_goals { rintros x - h, rw not_mem_support_iff at h, simp [h] },
end

lemma eval_FP2_add (f g : universal_map m n) [f.suitable c‚ÇÅ c‚ÇÇ] [g.suitable c‚ÇÅ c‚ÇÇ] :
  eval_FP2 r' c‚ÇÅ c‚ÇÇ (f + g) = eval_FP2 r' c‚ÇÅ c‚ÇÇ f + eval_FP2 r' c‚ÇÅ c‚ÇÇ g :=
by simp only [eval_FP2_eq_eval_FP2', eval_FP2'_add]

lemma eval_FP2_sub (f g : universal_map m n) [f.suitable c‚ÇÅ c‚ÇÇ] [g.suitable c‚ÇÅ c‚ÇÇ] :
  eval_FP2 r' c‚ÇÅ c‚ÇÇ (f - g) = eval_FP2 r' c‚ÇÅ c‚ÇÇ f - eval_FP2 r' c‚ÇÅ c‚ÇÇ g :=
by simp only [sub_eq_add_neg, eval_FP2_add, eval_FP2_neg]

lemma eval_FP2'_comp_of (g : basic_universal_map m n) (f : basic_universal_map l m)
  [hf : f.suitable c‚ÇÅ c‚ÇÇ] [hg : g.suitable c‚ÇÇ c‚ÇÉ] :
  eval_FP2' r' c‚ÇÅ c‚ÇÉ ((universal_map.comp (of g)) (of f)) =
    eval_FP2' r' c‚ÇÅ c‚ÇÇ (of f) ‚â´ eval_FP2' r' c‚ÇÇ c‚ÇÉ (of g) :=
begin
  simp only [universal_map.comp_of, eval_FP2'_of],
  haveI hfg : (basic_universal_map.comp g f).suitable c‚ÇÅ c‚ÇÉ := basic_universal_map.suitable_comp c‚ÇÇ,
  rw ‚Üê basic_universal_map.eval_FP2'_comp,
end

open category_theory category_theory.limits category_theory.preadditive

lemma eval_FP2'_comp (g : universal_map m n) (f : universal_map l m)
  [hf : f.suitable c‚ÇÅ c‚ÇÇ] [hg : g.suitable c‚ÇÇ c‚ÇÉ] :
  eval_FP2' r' c‚ÇÅ c‚ÇÉ (universal_map.comp g f) = eval_FP2' r' c‚ÇÅ c‚ÇÇ f ‚â´ eval_FP2' r' c‚ÇÇ c‚ÇÉ g :=
begin
  unfreezingI { revert hg },
  apply free_abelian_group.induction_on_free_predicate
    (universal_map.suitable c‚ÇÅ c‚ÇÇ) (universal_map.suitable_free_predicate c‚ÇÅ c‚ÇÇ) f hf;
      unfreezingI { clear_dependent f },
  { intros h‚ÇÇ,
    simp only [eval_FP2'_zero, zero_comp, pi.zero_apply,
      add_monoid_hom.zero_apply, add_monoid_hom.map_zero] },
  { intros f hf hg,
    -- now do another nested induction on `f`
    apply free_abelian_group.induction_on_free_predicate
      (universal_map.suitable c‚ÇÇ c‚ÇÉ) (universal_map.suitable_free_predicate c‚ÇÇ c‚ÇÉ) g hg;
        unfreezingI { clear_dependent g },
    { simp only [universal_map.eval_FP2'_zero, comp_zero, add_monoid_hom.map_zero,
        add_monoid_hom.zero_apply] },
    { intros g hg,
      rw suitable_of_iff at hf hg,
      resetI,
      apply eval_FP2'_comp_of },
    { intros g hg IH,
      simp only [IH, eval_FP2'_neg, add_monoid_hom.map_neg, comp_neg,
        add_monoid_hom.neg_apply] },
    { rintros (g‚ÇÅ : universal_map m n) (g‚ÇÇ : universal_map m n) hg‚ÇÅ hg‚ÇÇ IH‚ÇÅ IH‚ÇÇ, resetI,
      haveI Hg‚ÇÅf : (universal_map.comp g‚ÇÅ (of f)).suitable c‚ÇÅ c‚ÇÉ := suitable.comp c‚ÇÇ,
      haveI Hg‚ÇÇf : (universal_map.comp g‚ÇÇ (of f)).suitable c‚ÇÅ c‚ÇÉ := suitable.comp c‚ÇÇ,
      simp only [add_monoid_hom.map_add, eval_FP2'_add, IH‚ÇÅ, IH‚ÇÇ, comp_add,
        add_monoid_hom.add_apply] } },
  { intros f hf IH hg, resetI, specialize IH,
    simp only [IH, add_monoid_hom.map_neg, eval_FP2'_neg,
      add_monoid_hom.neg_apply, neg_inj, neg_comp] },
  { rintros (f‚ÇÅ : universal_map l m) (f‚ÇÇ : universal_map l m) hf‚ÇÅ hf‚ÇÇ IH‚ÇÅ IH‚ÇÇ hf, resetI,
    haveI Hgf‚ÇÅ : (universal_map.comp g f‚ÇÅ).suitable c‚ÇÅ c‚ÇÉ := suitable.comp c‚ÇÇ,
    haveI Hgf‚ÇÇ : (universal_map.comp g f‚ÇÇ).suitable c‚ÇÅ c‚ÇÉ := suitable.comp c‚ÇÇ,
    simp only [add_monoid_hom.map_add, add_monoid_hom.add_apply, eval_FP2'_add, IH‚ÇÅ, IH‚ÇÇ, add_comp] }
end

lemma eval_FP2_comp (g : universal_map m n) (f : universal_map l m)
  [hf : f.suitable c‚ÇÅ c‚ÇÇ] [hg : g.suitable c‚ÇÇ c‚ÇÉ] :
  @eval_FP2 r' c‚ÇÅ c‚ÇÉ _ _ (universal_map.comp g f) (universal_map.suitable.comp c‚ÇÇ) =
    eval_FP2 r' c‚ÇÅ c‚ÇÇ f ‚â´ eval_FP2 r' c‚ÇÇ c‚ÇÉ g :=
by { simp only [eval_FP2_eq_eval_FP2'], apply eval_FP2'_comp }

lemma res_comp_eval_FP2 [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [fact (c‚ÇÉ ‚â§ c‚ÇÑ)] [œï.suitable c‚ÇÅ c‚ÇÉ] [œï.suitable c‚ÇÇ c‚ÇÑ] :
  res r' c‚ÇÅ c‚ÇÇ m ‚â´ eval_FP2 r' c‚ÇÇ c‚ÇÑ œï = eval_FP2 r' c‚ÇÅ c‚ÇÉ œï ‚â´ res r' c‚ÇÉ c‚ÇÑ n :=
begin
  simp only [eval_FP2, comp_sum, sum_comp, comp_zsmul, zsmul_comp],
  apply finset.sum_congr rfl,
  rintros ‚ü®g, hg‚ü© -,
  haveI : g.suitable c‚ÇÅ c‚ÇÉ := suitable_of_mem_support œï _ _ g hg,
  haveI : g.suitable c‚ÇÇ c‚ÇÑ := suitable_of_mem_support œï _ _ g hg,
  simp only [subtype.coe_mk, g.res_comp_eval_FP2 r' c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ],
end

lemma Tinv_comp_eval_FP2 [fact (0 < r')] [fact (c‚ÇÅ ‚â§ r' * c‚ÇÇ)] [fact (c‚ÇÉ ‚â§ r' * c‚ÇÑ)]
  [œï.suitable c‚ÇÅ c‚ÇÉ] [œï.suitable c‚ÇÇ c‚ÇÑ] :
  Tinv r' c‚ÇÅ c‚ÇÇ m ‚â´ eval_FP2 r' c‚ÇÇ c‚ÇÑ œï = eval_FP2 r' c‚ÇÅ c‚ÇÉ œï ‚â´ Tinv r' c‚ÇÉ c‚ÇÑ n :=
begin
  simp only [eval_FP2, comp_sum, sum_comp, comp_zsmul, zsmul_comp],
  apply finset.sum_congr rfl,
  rintros ‚ü®g, hg‚ü© -,
  haveI : g.suitable c‚ÇÅ c‚ÇÉ := suitable_of_mem_support œï _ _ g hg,
  haveI : g.suitable c‚ÇÇ c‚ÇÑ := suitable_of_mem_support œï _ _ g hg,
  congr' 1, apply basic_universal_map.Tinv_comp_eval_FP2 r',
end

end universal_map


variables (Œ∫ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0) [‚àÄ c, BD.suitable (Œ∫ c)]

def FPsystem.X (c : ‚Ñù‚â•0) (n : ‚Ñï) : FreeAb Profinite :=
FreeAb.of $ (FiltrationPow r' (Œ∫ c n) $ BD.X n).obj M

def FPsystem.d (c : ‚Ñù‚â•0) (n : ‚Ñï) :
  FPsystem.X r' BD M Œ∫ c (n + 1) ‚ü∂ FPsystem.X r' BD M Œ∫ c n :=
(universal_map.eval_FP2 r' (Œ∫ c (n+1)) (Œ∫ c n) (BD.d (n+1) n)).app M

lemma FPsystem.d_comp_d (c : ‚Ñù‚â•0) (n : ‚Ñï) :
  FPsystem.d r' BD M Œ∫ c (n + 1) ‚â´ FPsystem.d r' BD M Œ∫ c n = 0 :=
begin
  delta FPsystem.d,
  rw [‚Üê nat_trans.comp_app, ‚Üê universal_map.eval_FP2_comp],
  convert nat_trans.app_zero _, refl, refl,
  convert universal_map.eval_FP2_zero _ _ _,
  show BD.d _ _ ‚â´ BD.d _ _ = 0,
  rw homological_complex.d_comp_d,
end

open opposite

def FPsystem [hŒ∫ : ‚àÄ n, fact (monotone (function.swap Œ∫ n))] :
  ‚Ñù‚â•0 ‚•§ chain_complex (FreeAb Profinite) ‚Ñï :=
{ obj := Œª c, chain_complex.of (FPsystem.X r' BD M Œ∫ c) (FPsystem.d r' BD M Œ∫ _) (FPsystem.d_comp_d _ _ _ _ _),
  map := Œª c‚ÇÅ c‚ÇÇ h,
  { f := Œª n, by { refine (@FP2.res r' _ _ (id _) (BD.X n)).app M,
      have := (hŒ∫ n).out, refine ‚ü®this h.le‚ü©, },
    comm' := begin
      rintro i j (rfl : j + 1 = i),
      rw [chain_complex.of_d, chain_complex.of_d],
      delta FPsystem.d, rw [‚Üê nat_trans.comp_app, ‚Üê nat_trans.comp_app],
      congr' 1,
      apply universal_map.res_comp_eval_FP2,
    end },
  map_id' := Œª c, begin
    ext n, dsimp, rw [Filtration.cast_le_refl, (FreeAb.of_functor _).map_id], refl,
  end,
  map_comp' := Œª c‚ÇÅ c‚ÇÇ c‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ, begin
    ext n, dsimp, rw [‚Üê (FreeAb.of_functor _).map_comp, Filtration.cast_le_comp],
  end }
.

def FPsystem.Tinv [fact (0 < r')]
  (Œ∫‚ÇÅ Œ∫‚ÇÇ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
  [‚àÄ c, BD.suitable (Œ∫‚ÇÅ c)] [‚àÄ c, BD.suitable (Œ∫‚ÇÇ c)]
  [hŒ∫‚ÇÅ : ‚àÄ n, fact (monotone (function.swap Œ∫‚ÇÅ n))]
  [hŒ∫‚ÇÇ : ‚àÄ n, fact (monotone (function.swap Œ∫‚ÇÇ n))]
  [‚àÄ c n, fact (Œ∫‚ÇÅ c n ‚â§ r' * Œ∫‚ÇÇ c n)] :
  FPsystem r' BD M Œ∫‚ÇÅ ‚ü∂ FPsystem r' BD M Œ∫‚ÇÇ :=
{ app := Œª c,
  { f := Œª n, (FP2.Tinv r' _ _ _).app M,
    comm' := begin
      rintro i j (rfl : j + 1 = i),
      dsimp only [functor.comp_obj, FPsystem],
      rw [chain_complex.of_d, chain_complex.of_d],
      delta FPsystem.d,
      rw [‚Üê nat_trans.comp_app, ‚Üê nat_trans.comp_app],
      congr' 1,
      apply universal_map.Tinv_comp_eval_FP2
    end },
  naturality' := begin
    intros c‚ÇÅ c‚ÇÇ h,
    ext n,
    dsimp only [FPsystem, Tinv_app, homological_complex.comp_f, functor.comp_map, res_app],
    rw [‚Üê functor.map_comp, ‚Üê functor.map_comp],
    refl,
  end }

def FPsystem.res [fact (r' ‚â§ 1)]
  (Œ∫‚ÇÅ Œ∫‚ÇÇ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
  [‚àÄ c, BD.suitable (Œ∫‚ÇÅ c)] [‚àÄ c, BD.suitable (Œ∫‚ÇÇ c)]
  [hŒ∫‚ÇÅ : ‚àÄ n, fact (monotone (function.swap Œ∫‚ÇÅ n))]
  [hŒ∫‚ÇÇ : ‚àÄ n, fact (monotone (function.swap Œ∫‚ÇÇ n))]
  [‚àÄ c n, fact (Œ∫‚ÇÅ c n ‚â§ Œ∫‚ÇÇ c n)] :
  FPsystem r' BD M Œ∫‚ÇÅ ‚ü∂ FPsystem r' BD M Œ∫‚ÇÇ :=
{ app := Œª c,
  { f := Œª n, (FP2.res r' _ _ _).app M,
    comm' := begin
      rintro i j (rfl : j + 1 = i),
      dsimp only [functor.comp_obj, FPsystem],
      rw [chain_complex.of_d, chain_complex.of_d],
      delta FPsystem.d,
      rw [‚Üê nat_trans.comp_app, ‚Üê nat_trans.comp_app],
      congr' 1,
      apply universal_map.res_comp_eval_FP2
    end },
  naturality' := begin
    intros c‚ÇÅ c‚ÇÇ h,
    ext n,
    dsimp only [FPsystem, res_app, homological_complex.comp_f, functor.comp_map],
    rw [‚Üê functor.map_comp, ‚Üê functor.map_comp],
    refl,
  end }

end breen_deligne
