import for_mathlib.normed_group_hom_equalizer
import pseudo_normed_group.CLC

open_locale classical nnreal
noncomputable theory
local attribute [instance] type_pow

open NormedGroup opposite Profinite pseudo_normed_group category_theory breen_deligne
open profinitely_filtered_pseudo_normed_group category_theory.limits
open normed_group_hom

namespace NormedGroup

def equalizer.map {V‚ÇÅ V‚ÇÇ W‚ÇÅ W‚ÇÇ : NormedGroup} {f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ} (œÜ : V‚ÇÅ ‚ü∂ V‚ÇÇ) (œà : W‚ÇÅ ‚ü∂ W‚ÇÇ)
  (hf : f‚ÇÅ ‚â´ œà = œÜ ‚â´ f‚ÇÇ) (hg : g‚ÇÅ ‚â´ œà = œÜ ‚â´ g‚ÇÇ) :
  of (f‚ÇÅ.equalizer g‚ÇÅ) ‚ü∂ of (f‚ÇÇ.equalizer g‚ÇÇ) :=
normed_group_hom.equalizer.map _ _ hf hg

end NormedGroup

universe variable u
variables (r : ‚Ñù‚â•0) (V : NormedGroup) [normed_with_aut r V] [fact (0 < r)]
variables (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)]
variables (M M‚ÇÅ M‚ÇÇ M‚ÇÉ : ProFiltPseuNormGrpWithTinv.{u} r')
variables (c c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ c‚ÇÖ c‚ÇÜ c‚Çá c‚Çà : ‚Ñù‚â•0) (l m n : ‚Ñï)
variables (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (g : M‚ÇÇ ‚ü∂ M‚ÇÉ)

def CLCPTinv (r : ‚Ñù‚â•0) (V : NormedGroup) (n : ‚Ñï)
  [normed_with_aut r V] [fact (0 < r)] {A B : Profinite·µí·µñ} (f g : A ‚ü∂ B) :
  NormedGroup :=
NormedGroup.of $ normed_group_hom.equalizer
  ((CLCP V n).map f)
  ((CLCFP.T_inv' r V n).app A ‚â´ (CLCP V n).map g)

namespace CLCPTinv

def map {A‚ÇÅ B‚ÇÅ A‚ÇÇ B‚ÇÇ : Profinite·µí·µñ} (f‚ÇÅ g‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ) (f‚ÇÇ g‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ)
  (œï : A‚ÇÅ ‚ü∂ A‚ÇÇ) (œà : B‚ÇÅ ‚ü∂ B‚ÇÇ) (h‚ÇÅ: f‚ÇÅ ‚â´ œà = œï ‚â´ f‚ÇÇ) (h‚ÇÇ : g‚ÇÅ ‚â´ œà = œï ‚â´ g‚ÇÇ) :
  CLCPTinv r V n f‚ÇÅ g‚ÇÅ ‚ü∂ CLCPTinv r V n f‚ÇÇ g‚ÇÇ :=
NormedGroup.equalizer.map ((CLCP V n).map œï) ((CLCP V n).map œà)
  (by rw [‚Üê functor.map_comp, ‚Üê functor.map_comp, h‚ÇÅ]) $
by rw [‚Üê category.assoc, (CLCFP.T_inv' _ _ _).naturality,
  category.assoc, category.assoc, ‚Üê functor.map_comp, ‚Üê functor.map_comp, h‚ÇÇ]

@[simp] lemma map_id {A B : Profinite·µí·µñ} (f g : A ‚ü∂ B) :
  map r V n f g f g (ùüô A) (ùüô B) rfl rfl = ùüô _ :=
begin
  simp only [map, NormedGroup.equalizer.map, category_theory.functor.map_id],
  exact equalizer.map_id,
end

lemma map_comp {A‚ÇÅ A‚ÇÇ A‚ÇÉ B‚ÇÅ B‚ÇÇ B‚ÇÉ : Profinite·µí·µñ}
  {f‚ÇÅ g‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ} {f‚ÇÇ g‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ} {f‚ÇÉ g‚ÇÉ : A‚ÇÉ ‚ü∂ B‚ÇÉ}
  (œï‚ÇÅ : A‚ÇÅ ‚ü∂ A‚ÇÇ) (œï‚ÇÇ : A‚ÇÇ ‚ü∂ A‚ÇÉ) (œà‚ÇÅ : B‚ÇÅ ‚ü∂ B‚ÇÇ) (œà‚ÇÇ : B‚ÇÇ ‚ü∂ B‚ÇÉ)
  (h1 h2 h3 h4 h5 h6) :
  CLCPTinv.map r V n f‚ÇÅ g‚ÇÅ f‚ÇÉ g‚ÇÉ (œï‚ÇÅ ‚â´ œï‚ÇÇ) (œà‚ÇÅ ‚â´ œà‚ÇÇ) h1 h2 =
  CLCPTinv.map r V n f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ œï‚ÇÅ œà‚ÇÅ h3 h4 ‚â´
  CLCPTinv.map r V n f‚ÇÇ g‚ÇÇ f‚ÇÉ g‚ÇÉ œï‚ÇÇ œà‚ÇÇ h5 h6 :=
begin
  simp only [map, NormedGroup.equalizer.map, category_theory.functor.map_comp],
  exact (equalizer.map_comp_map _ _ _ _).symm,
end

lemma map_comp' {A‚ÇÅ A‚ÇÇ A‚ÇÉ B‚ÇÅ B‚ÇÇ B‚ÇÉ : Profinite·µí·µñ}
  {f‚ÇÅ g‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ} {f‚ÇÇ g‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ} {f‚ÇÉ g‚ÇÉ : A‚ÇÉ ‚ü∂ B‚ÇÉ}
  (œï‚ÇÅ : A‚ÇÅ ‚ü∂ A‚ÇÇ) (œï‚ÇÇ : A‚ÇÇ ‚ü∂ A‚ÇÉ) (œà‚ÇÅ : B‚ÇÅ ‚ü∂ B‚ÇÇ) (œà‚ÇÇ : B‚ÇÇ ‚ü∂ B‚ÇÉ)
  (h3 h4 h5 h6) :
  CLCPTinv.map r V n f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ œï‚ÇÅ œà‚ÇÅ h3 h4 ‚â´
  CLCPTinv.map r V n f‚ÇÇ g‚ÇÇ f‚ÇÉ g‚ÇÉ œï‚ÇÇ œà‚ÇÇ h5 h6 =
  CLCPTinv.map r V n f‚ÇÅ g‚ÇÅ f‚ÇÉ g‚ÇÉ (œï‚ÇÅ ‚â´ œï‚ÇÇ) (œà‚ÇÅ ‚â´ œà‚ÇÇ)
    (by rw [‚Üê category.assoc, h3, category.assoc, h5, ‚Üê category.assoc])
    (by rw [‚Üê category.assoc, h4, category.assoc, h6, ‚Üê category.assoc]) :=
(map_comp _ _ _ _ _ _ _ _ _ _ _ _ _).symm

end CLCPTinv

@[simps] def CLCFPTinv‚ÇÇ (r : ‚Ñù‚â•0) (V : NormedGroup)
  (r' : ‚Ñù‚â•0) [fact (0 < r)] [fact (0 < r')] [r1 : fact (r' ‚â§ 1)] [normed_with_aut r V]
  (c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) [h : fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] [fact (c‚ÇÇ ‚â§ c‚ÇÅ)]
  (n : ‚Ñï) : (ProFiltPseuNormGrpWithTinv r')·µí·µñ ‚•§ NormedGroup :=
{ obj := Œª M,
  CLCPTinv r V n
    (profinitely_filtered_pseudo_normed_group_with_Tinv.Tinv‚ÇÄ_hom M.unop c‚ÇÇ c‚ÇÅ).op
    (Filtration.cast_le _ _ _).op,
  map := Œª M‚ÇÅ M‚ÇÇ f, CLCPTinv.map _ _ _ _ _ _ _
    ((ProFiltPseuNormGrpWithTinv.level _ _).op.map f)
    ((ProFiltPseuNormGrpWithTinv.level _ _).op.map f)
    (by { simp only [functor.op_map, ‚Üê op_comp],
          congr' 1, ext x, exact (f.unop.map_Tinv _).symm })
    (by { simp only [functor.op_map, ‚Üê op_comp], refl }),
  map_id' := Œª M, by { simp only [category_theory.functor.map_id, op_id], apply CLCPTinv.map_id },
  map_comp' := Œª M‚ÇÅ M‚ÇÇ M‚ÇÉ f g,
    by { simp only [category_theory.functor.map_comp], apply CLCPTinv.map_comp } }

/-- The functor that sends `M` and `c` to `V-hat((filtration M c)^n)^{T‚Åª¬π}`,
defined by taking `T‚Åª¬π`-invariants for two different actions by `T‚Åª¬π`:

* The first comes from the action of `T‚Åª¬π` on `M`.
* The second comes from the action of `T‚Åª¬π` on `V`.

We take the equalizer of those two actions.

See the lines just above Definition 9.3 of [Analytic]. -/
def CLCFPTinv (r : ‚Ñù‚â•0) (V : NormedGroup) (r' : ‚Ñù‚â•0)
  (c : ‚Ñù‚â•0) (n : ‚Ñï) [normed_with_aut r V] [fact (0 < r)] [fact (0 < r')] [fact (r' ‚â§ 1)] :
  (ProFiltPseuNormGrpWithTinv r')·µí·µñ ‚•§ NormedGroup :=
CLCFPTinv‚ÇÇ r V r' c (r' * c) n

namespace CLCFPTinv‚ÇÇ

lemma map_norm_noninc [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] [fact (c‚ÇÇ ‚â§ c‚ÇÅ)]
  {M‚ÇÅ M‚ÇÇ} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) : ((CLCFPTinv‚ÇÇ r V r' c‚ÇÅ c‚ÇÇ n).map f).norm_noninc :=
equalizer.map_norm_noninc _ _ $ CLCFP.map_norm_noninc _ _ _ _ _

def res [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] [fact (c‚ÇÑ ‚â§ r' * c‚ÇÉ)] [fact (c‚ÇÑ ‚â§ c‚ÇÉ)]
  [fact (c‚ÇÉ ‚â§ c‚ÇÅ)] [fact (c‚ÇÑ ‚â§ c‚ÇÇ)] : CLCFPTinv‚ÇÇ r V r' c‚ÇÅ c‚ÇÇ n ‚ü∂ CLCFPTinv‚ÇÇ r V r' c‚ÇÉ c‚ÇÑ n :=
{ app := Œª M,
  CLCPTinv.map _ _ _ _ _ _ _ (Filtration.cast_le _ _ _).op (Filtration.cast_le _ _ _).op
    (by { rw [‚Üê op_comp, ‚Üê op_comp], refl })
    (by { rw [‚Üê op_comp, ‚Üê op_comp], refl }),
  naturality' := Œª M‚ÇÅ M‚ÇÇ f, begin
    rw [CLCFPTinv‚ÇÇ_map, CLCFPTinv‚ÇÇ_map, CLCPTinv.map_comp', CLCPTinv.map_comp'],
    refl,
  end }

@[simp] lemma res_refl [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] : res r V r' c‚ÇÅ c‚ÇÇ c‚ÇÅ c‚ÇÇ n = ùüô _ :=
by { simp only [res, Filtration.cast_le_refl], ext x : 2, apply CLCPTinv.map_id }

lemma res_comp_res
  [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] [fact (c‚ÇÇ ‚â§ c‚ÇÅ)]
  [fact (c‚ÇÑ ‚â§ r' * c‚ÇÉ)] [fact (c‚ÇÑ ‚â§ c‚ÇÉ)]
  [fact (c‚ÇÜ ‚â§ r' * c‚ÇÖ)] [fact (c‚ÇÜ ‚â§ c‚ÇÖ)]
  [fact (c‚ÇÉ ‚â§ c‚ÇÅ)] [fact (c‚ÇÑ ‚â§ c‚ÇÇ)]
  [fact (c‚ÇÖ ‚â§ c‚ÇÉ)] [fact (c‚ÇÜ ‚â§ c‚ÇÑ)]
  [fact (c‚ÇÖ ‚â§ c‚ÇÅ)] [fact (c‚ÇÜ ‚â§ c‚ÇÇ)] :
  res r V r' c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ n ‚â´ res r V r' c‚ÇÉ c‚ÇÑ c‚ÇÖ c‚ÇÜ n = res r V r' c‚ÇÅ c‚ÇÇ c‚ÇÖ c‚ÇÜ n :=
begin
  ext x : 2, simp only [res, nat_trans.comp_app],
  exact (CLCPTinv.map_comp _ _ _ _ _ _ _ _ _ _ _ _ _).symm
end

end CLCFPTinv‚ÇÇ

namespace CLCFPTinv

lemma map_norm_noninc {M‚ÇÅ M‚ÇÇ} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) : ((CLCFPTinv r V r' c n).map f).norm_noninc :=
CLCFPTinv‚ÇÇ.map_norm_noninc _ _ _ _ _ _ _

def res [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] : CLCFPTinv r V r' c‚ÇÅ n ‚ü∂ CLCFPTinv r V r' c‚ÇÇ n :=
CLCFPTinv‚ÇÇ.res r V r' c‚ÇÅ _ c‚ÇÇ _ n

@[simp] lemma res_refl : res r V r' c‚ÇÅ c‚ÇÅ n = ùüô _ :=
CLCFPTinv‚ÇÇ.res_refl _ _ _ _ _ _

lemma res_comp_res [fact (c‚ÇÉ ‚â§ c‚ÇÅ)] [fact (c‚ÇÖ ‚â§ c‚ÇÉ)] [fact (c‚ÇÖ ‚â§ c‚ÇÅ)] :
  res r V r' c‚ÇÅ c‚ÇÉ n ‚â´ res r V r' c‚ÇÉ c‚ÇÖ n = res r V r' c‚ÇÅ c‚ÇÖ n :=
CLCFPTinv‚ÇÇ.res_comp_res _ _ _ _ _ _ _ _ _ _

end CLCFPTinv

namespace breen_deligne

open CLCFPTinv

variables (M) {l m n}

namespace universal_map

variables (œï : universal_map m n)

def eval_CLCFPTinv‚ÇÇ
  [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] [fact (c‚ÇÑ ‚â§ r' * c‚ÇÉ)] [fact (c‚ÇÑ ‚â§ c‚ÇÉ)]
  [œï.suitable c‚ÇÉ c‚ÇÅ] [œï.suitable c‚ÇÑ c‚ÇÇ] :
  CLCFPTinv‚ÇÇ r V r' c‚ÇÅ c‚ÇÇ n ‚ü∂ CLCFPTinv‚ÇÇ r V r' c‚ÇÉ c‚ÇÑ m :=
{ app := Œª M, begin
    refine NormedGroup.equalizer.map
      ((œï.eval_CLCFP _ _ _ _).app _ : _)
      ((œï.eval_CLCFP _ _ _ _).app _ : _) _ _,
    sorry;{ have := Tinv_comp_eval_CLCFP V r' c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ œï,
      apply_fun Œª x, nat_trans.app x M at this,
      rw [nat_trans.comp_app, nat_trans.comp_app] at this,
      exact this },
    sorry;{ have := res_comp_eval_CLCFP V r' c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ œï,
      apply_fun Œª x, nat_trans.app x M at this,
      rw [nat_trans.comp_app, nat_trans.comp_app, CLCFP.res_app'] at this,
      rw [category.assoc, this], clear this,
      have := T_inv_comp_eval_CLCFP r V r' c‚ÇÅ c‚ÇÉ œï,
      apply_fun Œª x, nat_trans.app x M at this,
      rw [nat_trans.comp_app, nat_trans.comp_app, CLCFP.T_inv,
        whisker_left_app] at this,
      change (CLCFP.T_inv' r V n).app (op (filtration_obj ‚Ü•(unop M) c‚ÇÅ)) ‚â´ _ = _ at this,
      rw [‚Üê category.assoc, this, category.assoc], refl }
  end,
  naturality' := Œª M‚ÇÅ M‚ÇÇ f,
  begin
    dsimp only [CLCFPTinv‚ÇÇ_map, CLCPTinv.map],
    sorry
    -- calc _ = _ : normed_group_hom.equalizer.map_comp_map _ _ _ _
    --   ... = _ : _, -- by { congr' 1; apply map_comp_eval_CLCFP }
    --   ... = _ : (normed_group_hom.equalizer.map_comp_map _ _ _ _).symm,
  end }


@[simp] lemma eval_CLCFPTinv‚ÇÇ_zero
  [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] [fact (c‚ÇÑ ‚â§ c‚ÇÉ)] [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] [fact (c‚ÇÑ ‚â§ r' * c‚ÇÉ)] :
  (0 : universal_map m n).eval_CLCFPTinv‚ÇÇ r V r' c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ = 0 :=
by { simp only [eval_CLCFPTinv‚ÇÇ, eval_CLCFP_zero], ext, refl }

lemma eval_CLCFPTinv‚ÇÇ_comp {l m n : FreeMat} (f : l ‚ü∂ m) (g : m ‚ü∂ n)
  [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] [fact (c‚ÇÇ ‚â§ c‚ÇÅ)]
  [fact (c‚ÇÑ ‚â§ r' * c‚ÇÉ)] [fact (c‚ÇÑ ‚â§ c‚ÇÉ)]
  [fact (c‚ÇÜ ‚â§ r' * c‚ÇÖ)] [fact (c‚ÇÜ ‚â§ c‚ÇÖ)]
  [hf : f.suitable c‚ÇÖ c‚ÇÉ] [hf : f.suitable c‚ÇÜ c‚ÇÑ]
  [hg : g.suitable c‚ÇÉ c‚ÇÅ] [hg : g.suitable c‚ÇÑ c‚ÇÇ]
  [(f ‚â´ g).suitable c‚ÇÖ c‚ÇÅ] [(f ‚â´ g).suitable c‚ÇÜ c‚ÇÇ] :
  (f ‚â´ g).eval_CLCFPTinv‚ÇÇ r V r' c‚ÇÅ c‚ÇÇ c‚ÇÖ c‚ÇÜ =
    g.eval_CLCFPTinv‚ÇÇ r V r' c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ ‚â´ f.eval_CLCFPTinv‚ÇÇ r V r' c‚ÇÉ c‚ÇÑ c‚ÇÖ c‚ÇÜ :=
sorry
-- calc _ = _ : by { delta eval_CLCFPTinv, congr' 1; apply eval_CLCFP_comp }
--    ... = _ : (equalizer.map_comp_map _ _ _ _).symm

lemma res_comp_eval_CLCFPTinv‚ÇÇ
  [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] [fact (c‚ÇÑ ‚â§ r' * c‚ÇÉ)]
  [fact (c‚ÇÜ ‚â§ r' * c‚ÇÖ)] [fact (c‚Çà ‚â§ r' * c‚Çá)]
  [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] [fact (c‚ÇÉ ‚â§ c‚ÇÅ)] [fact (c‚ÇÑ ‚â§ c‚ÇÇ)] [fact (c‚ÇÑ ‚â§ c‚ÇÉ)]
  [fact (c‚ÇÜ ‚â§ c‚ÇÖ)] [fact (c‚Çá ‚â§ c‚ÇÖ)] [fact (c‚Çà ‚â§ c‚ÇÜ)] [fact (c‚Çà ‚â§ c‚Çá)]
  [œï.suitable c‚ÇÖ c‚ÇÅ] [œï.suitable c‚ÇÜ c‚ÇÇ]
  [œï.suitable c‚Çá c‚ÇÉ] [œï.suitable c‚Çà c‚ÇÑ] :
  CLCFPTinv‚ÇÇ.res r V r' c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ n ‚â´ œï.eval_CLCFPTinv‚ÇÇ r V r' c‚ÇÉ c‚ÇÑ c‚Çá c‚Çà =
    œï.eval_CLCFPTinv‚ÇÇ r V r' c‚ÇÅ c‚ÇÇ c‚ÇÖ c‚ÇÜ ‚â´ CLCFPTinv‚ÇÇ.res r V r' c‚ÇÖ c‚ÇÜ c‚Çá c‚Çà m :=
sorry
-- calc _ = _ : equalizer.map_comp_map _ _ _ _
--    ... = _ : by { congr' 1; apply res_comp_eval_CLCFP }
--    ... = _ : (equalizer.map_comp_map _ _ _ _).symm

def eval_CLCFPTinv [œï.suitable c‚ÇÇ c‚ÇÅ] :
  CLCFPTinv r V r' c‚ÇÅ n ‚ü∂ CLCFPTinv r V r' c‚ÇÇ m :=
œï.eval_CLCFPTinv‚ÇÇ r V r' c‚ÇÅ _ c‚ÇÇ _

@[simp] lemma eval_CLCFPTinv_zero [œï.suitable c‚ÇÇ c‚ÇÅ] :
  (0 : universal_map m n).eval_CLCFPTinv r V r' c‚ÇÅ c‚ÇÇ = 0 :=
by apply eval_CLCFPTinv‚ÇÇ_zero

lemma eval_CLCFPTinv_comp {l m n : FreeMat} (f : l ‚ü∂ m) (g : m ‚ü∂ n)
  [hg : g.suitable c‚ÇÇ c‚ÇÅ] [hf : f.suitable c‚ÇÉ c‚ÇÇ] [(f ‚â´ g).suitable c‚ÇÉ c‚ÇÅ] :
  (f ‚â´ g).eval_CLCFPTinv r V r' c‚ÇÅ c‚ÇÉ =
    g.eval_CLCFPTinv r V r' c‚ÇÅ c‚ÇÇ ‚â´ f.eval_CLCFPTinv r V r' c‚ÇÇ c‚ÇÉ :=
by apply eval_CLCFPTinv‚ÇÇ_comp

lemma res_comp_eval_CLCFPTinv
  [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] [œï.suitable c‚ÇÑ c‚ÇÇ] [œï.suitable c‚ÇÉ c‚ÇÅ] [fact (c‚ÇÑ ‚â§ c‚ÇÉ)] :
  res r V r' c‚ÇÅ c‚ÇÇ n ‚â´ œï.eval_CLCFPTinv r V r' c‚ÇÇ c‚ÇÑ =
    œï.eval_CLCFPTinv r V r' c‚ÇÅ c‚ÇÉ ‚â´ res r V r' c‚ÇÉ c‚ÇÑ m :=
by apply res_comp_eval_CLCFPTinv‚ÇÇ

end universal_map

end breen_deligne
