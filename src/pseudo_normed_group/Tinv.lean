import for_mathlib.equalizers
import pseudo_normed_group.CLC

open_locale classical nnreal
noncomputable theory
local attribute [instance] type_pow

open NormedGroup opposite Profinite pseudo_normed_group category_theory breen_deligne
open profinitely_filtered_pseudo_normed_group category_theory.limits

universe variable u
variables (r : ‚Ñù‚â•0) (V : NormedGroup) [normed_with_aut r V] [fact (0 < r)]
variables (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)] {M M‚ÇÅ M‚ÇÇ M‚ÇÉ : Type u}
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M]
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÅ]
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÇ]
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÉ]
variables (c c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ : ‚Ñù‚â•0) (l m n : ‚Ñï)
variables (f : profinitely_filtered_pseudo_normed_group_with_Tinv_hom r' M‚ÇÅ M‚ÇÇ)
variables (g : profinitely_filtered_pseudo_normed_group_with_Tinv_hom r' M‚ÇÇ M‚ÇÉ)

/-- The "functor" that sends `M` and `c` to `V-hat((filtration M c)^n)^{T‚Åª¬π}`,
defined by taking `T‚Åª¬π`-invariants
for two different actions by `T‚Åª¬π`:

* The first comes from the action of `T‚Åª¬π` on `M`.
* The second comes from the action of `T‚Åª¬π` on `V`.

We take the equalizer of those two actions.

See the lines just above Definition 9.3 of [Analytic]. -/
def CLCFPTinv (r : ‚Ñù‚â•0) (V : NormedGroup) (r' : ‚Ñù‚â•0) (M : Type*) (c : ‚Ñù‚â•0) (n : ‚Ñï)
  [normed_with_aut r V] [fact (0 < r)] [fact (0 < r')] [fact (r' ‚â§ 1)]
  [profinitely_filtered_pseudo_normed_group_with_Tinv r' M] :
  NormedGroup :=
equalizer (CLCFP.Tinv V r' c n) (CLCFP.T_inv r V r' c n ‚â´ (@CLCFP.res V r' M _ _ _ n _))

namespace CLCFPTinv

def map : CLCFPTinv r V r' M‚ÇÇ c n ‚ü∂ CLCFPTinv r V r' M‚ÇÅ c n :=
equalizer.map (CLCFP.map _ _ _ _ f) (CLCFP.map _ _ _ _ f)
(CLCFP.map_comp_Tinv _ _ _ _ _).symm $
by rw [‚Üê category.assoc, CLCFP.map_comp_T_inv, category.assoc, category.assoc, CLCFP.map_comp_res]

variables (M)

@[simp] lemma map_id :
  map r V r' c n (profinitely_filtered_pseudo_normed_group_with_Tinv_hom.id) =
    ùüô (CLCFPTinv r V r' M c n) :=
by { simp only [map, equalizer.map_id, CLCFP.map_id], refl }

variables {M}

lemma map_comp : map r V r' c n (g.comp f) = map r V r' c n g ‚â´ map r V r' c n f :=
by simp only [map, equalizer.map_comp_map, CLCFP.map_comp]

def res [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] : CLCFPTinv r V r' M c‚ÇÇ n ‚ü∂ CLCFPTinv r V r' M c‚ÇÅ n :=
equalizer.map (CLCFP.res _ _ _ _ _) (CLCFP.res _ _ _ _ _)
(CLCFP.res_comp_Tinv _ _ _ _ _).symm $
begin
  haveI : fact (r' * c‚ÇÅ ‚â§ c‚ÇÇ) :=
    le_trans (show fact (r' * c‚ÇÅ ‚â§ c‚ÇÅ), by apply_instance) ‚Äπc‚ÇÅ ‚â§ c‚ÇÇ‚Ä∫,
  rw [‚Üê category.assoc],
  simp only [CLCFP.res_comp_T_inv, category.assoc],
  rw [CLCFP.res_comp_res, CLCFP.res_comp_res],
end

@[simp] lemma res_refl : @res r V _ _ r' _ _ M _ c c n _ = ùüô _ :=
by { simp only [res, equalizer.map_id, CLCFP.res_refl], refl }

lemma res_comp_res [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [fact (c‚ÇÇ ‚â§ c‚ÇÉ)] [fact (c‚ÇÅ ‚â§ c‚ÇÉ)] :
  res r V r' c‚ÇÇ c‚ÇÉ n ‚â´ res r V r' c‚ÇÅ c‚ÇÇ n = @res r V _ _ r' _ _ M _ c‚ÇÅ c‚ÇÉ n _ :=
by simp only [res, equalizer.map_comp_map, CLCFP.res_comp_res]

lemma map_comp_res [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] :
  map r V r' c‚ÇÇ n f ‚â´ res r V r' c‚ÇÅ c‚ÇÇ n = res r V r' c‚ÇÅ c‚ÇÇ n ‚â´ map r V r' c‚ÇÅ n f :=
by simp only [map, res, equalizer.map_comp_map, CLCFP.map_comp_res]

end CLCFPTinv

namespace breen_deligne

open CLCFPTinv

variables (M) {l m n}

namespace basic_universal_map

variables (œï : basic_universal_map m n)

def eval_CLCFPTinv [œï.suitable c‚ÇÅ c‚ÇÇ] :
  CLCFPTinv r V r' M c‚ÇÇ n ‚ü∂ CLCFPTinv r V r' M c‚ÇÅ m :=
equalizer.map (œï.eval_CLCFP _ _ _ _ _) (œï.eval_CLCFP _ _ _ _ _)
(Tinv_comp_eval_CLCFP _ _ _ _ _ _) $
by rw [category.assoc, res_comp_eval_CLCFP V r' M (r' * c‚ÇÅ) c‚ÇÅ (r' * c‚ÇÇ) c‚ÇÇ,
    ‚Üê category.assoc, T_inv_comp_eval_CLCFP, category.assoc]

lemma map_comp_eval_CLCFPTinv [œï.suitable c‚ÇÅ c‚ÇÇ] :
  map r V r' c‚ÇÇ n f ‚â´ œï.eval_CLCFPTinv r V r' M‚ÇÅ c‚ÇÅ c‚ÇÇ =
    œï.eval_CLCFPTinv r V r' M‚ÇÇ c‚ÇÅ c‚ÇÇ ‚â´ map r V r' c‚ÇÅ m f :=
by simp only [map, eval_CLCFPTinv, equalizer.map_comp_map, map_comp_eval_CLCFP]

lemma res_comp_eval_CLCFPTinv
  [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [œï.suitable c‚ÇÇ c‚ÇÑ] [œï.suitable c‚ÇÅ c‚ÇÉ] [fact (c‚ÇÉ ‚â§ c‚ÇÑ)] :
  res r V r' c‚ÇÉ c‚ÇÑ n ‚â´ œï.eval_CLCFPTinv r V r' M c‚ÇÅ c‚ÇÉ =
    œï.eval_CLCFPTinv r V r' M c‚ÇÇ c‚ÇÑ ‚â´ res r V r' c‚ÇÅ c‚ÇÇ m :=
by simp only [res, eval_CLCFPTinv, equalizer.map_comp_map,
  res_comp_eval_CLCFP V r' _ c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ,
  res_comp_eval_CLCFP V r' _ (r' * c‚ÇÅ) (r' * c‚ÇÇ) (r' * c‚ÇÉ) (r' * c‚ÇÑ)]

end basic_universal_map

namespace universal_map

variables (œï : universal_map m n)

def eval_CLCFPTinv [œï.suitable c‚ÇÅ c‚ÇÇ] :
  CLCFPTinv r V r' M c‚ÇÇ n ‚ü∂ CLCFPTinv r V r' M c‚ÇÅ m :=
equalizer.map (œï.eval_CLCFP _ _ _ _ _) (œï.eval_CLCFP _ _ _ _ _)
(Tinv_comp_eval_CLCFP _ _ _ _ _ _) $
by rw [category.assoc, res_comp_eval_CLCFP V r' M (r' * c‚ÇÅ) c‚ÇÅ (r' * c‚ÇÇ) c‚ÇÇ,
    ‚Üê category.assoc, T_inv_comp_eval_CLCFP, category.assoc]

@[simp] lemma eval_CLCFPTinv_zero :
  (0 : universal_map m n).eval_CLCFPTinv r V r' M c‚ÇÅ c‚ÇÇ = 0 :=
begin
  apply equalizer.hom_ext,
  simp only [eval_CLCFPTinv, eval_CLCFP_zero, zero_comp, equalizer.map_Œπ, comp_zero]
end

open category_theory.limits

lemma eval_CLCFPTinv_comp (g : universal_map m n) (f : universal_map l m)
  [hg : g.suitable c‚ÇÇ c‚ÇÉ] [hf : f.suitable c‚ÇÅ c‚ÇÇ] [(comp g f).suitable c‚ÇÅ c‚ÇÉ] :
  (comp g f).eval_CLCFPTinv r V r' M c‚ÇÅ c‚ÇÉ =
    g.eval_CLCFPTinv r V r' M c‚ÇÇ c‚ÇÉ ‚â´ f.eval_CLCFPTinv r V r' M c‚ÇÅ c‚ÇÇ :=
by simp only [eval_CLCFPTinv, equalizer.map_comp_map, ‚Üê eval_CLCFP_comp]

lemma map_comp_eval_CLCFPTinv [œï.suitable c‚ÇÅ c‚ÇÇ] :
  map r V r' c‚ÇÇ n f ‚â´ œï.eval_CLCFPTinv r V r' M‚ÇÅ c‚ÇÅ c‚ÇÇ =
    œï.eval_CLCFPTinv r V r' M‚ÇÇ c‚ÇÅ c‚ÇÇ ‚â´ map r V r' c‚ÇÅ m f :=
by simp only [map, eval_CLCFPTinv, equalizer.map_comp_map, map_comp_eval_CLCFP]

lemma res_comp_eval_CLCFPTinv
  [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [œï.suitable c‚ÇÇ c‚ÇÑ] [œï.suitable c‚ÇÅ c‚ÇÉ] [fact (c‚ÇÉ ‚â§ c‚ÇÑ)] :
  res r V r' c‚ÇÉ c‚ÇÑ n ‚â´ œï.eval_CLCFPTinv r V r' M c‚ÇÅ c‚ÇÉ =
    œï.eval_CLCFPTinv r V r' M c‚ÇÇ c‚ÇÑ ‚â´ res r V r' c‚ÇÅ c‚ÇÇ m :=
by simp only [res, eval_CLCFPTinv, equalizer.map_comp_map,
  res_comp_eval_CLCFP V r' _ c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ,
  res_comp_eval_CLCFP V r' _ (r' * c‚ÇÅ) (r' * c‚ÇÇ) (r' * c‚ÇÉ) (r' * c‚ÇÑ)]

end universal_map

end breen_deligne
