import for_mathlib.normed_group_hom_equalizer
import pseudo_normed_group.CLC

open_locale classical nnreal
noncomputable theory
local attribute [instance] type_pow

open NormedGroup opposite Profinite pseudo_normed_group category_theory breen_deligne
open profinitely_filtered_pseudo_normed_group category_theory.limits
open normed_group_hom

universe variable u
variables (r : ‚Ñù‚â•0) (V : NormedGroup) [normed_with_aut r V] [fact (0 < r)]
variables (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)]
variables (M M‚ÇÅ M‚ÇÇ M‚ÇÉ : ProFiltPseuNormGrpWithTinv.{u} r')
variables (c c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ : ‚Ñù‚â•0) (l m n : ‚Ñï)
variables (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (g : M‚ÇÇ ‚ü∂ M‚ÇÉ)

/-- The "functor" that sends `M` and `c` to `V-hat((filtration M c)^n)^{T‚Åª¬π}`,
defined by taking `T‚Åª¬π`-invariants
for two different actions by `T‚Åª¬π`:

* The first comes from the action of `T‚Åª¬π` on `M`.
* The second comes from the action of `T‚Åª¬π` on `V`.

We take the equalizer of those two actions.

See the lines just above Definition 9.3 of [Analytic]. -/
def CLCPTinv (r : ‚Ñù‚â•0) (V : NormedGroup) (n : ‚Ñï)
  [normed_with_aut r V] [fact (0 < r)] {A B : Profinite·µí·µñ} (f g : A ‚ü∂ B) :
  NormedGroup :=
NormedGroup.of $ normed_group_hom.equalizer
  ((CLCP V n).map f)
  ((CLCFP.T_inv' r V n).app A ‚â´ (CLCP V n).map g)

/-- The "functor" that sends `M` and `c` to `V-hat((filtration M c)^n)^{T‚Åª¬π}`,
defined by taking `T‚Åª¬π`-invariants
for two different actions by `T‚Åª¬π`:

* The first comes from the action of `T‚Åª¬π` on `M`.
* The second comes from the action of `T‚Åª¬π` on `V`.

We take the equalizer of those two actions.

See the lines just above Definition 9.3 of [Analytic]. -/
def CLCFPTinv‚ÇÇ (r : ‚Ñù‚â•0) (V : NormedGroup) (r' : ‚Ñù‚â•0) (M : ProFiltPseuNormGrpWithTinv r')
  (c : ‚Ñù‚â•0) (n : ‚Ñï) [normed_with_aut r V] [fact (0 < r)] [fact (0 < r')] [r1 : fact (r' ‚â§ 1)]
  (c‚ÇÇ : ‚Ñù‚â•0) [h : fact (c‚ÇÇ ‚â§ r' * c)] :
  NormedGroup :=
by haveI : fact (c‚ÇÇ ‚â§ c) := ‚ü®h.1.trans $ (mul_le_mul' r1.1 le_rfl).trans (by simp)‚ü©; exact
CLCPTinv r V n
  (profinitely_filtered_pseudo_normed_group_with_Tinv.Tinv‚ÇÄ_hom M c‚ÇÇ c).op
  (Filtration.cast_le _ _ _).op

/-- The "functor" that sends `M` and `c` to `V-hat((filtration M c)^n)^{T‚Åª¬π}`,
defined by taking `T‚Åª¬π`-invariants
for two different actions by `T‚Åª¬π`:

* The first comes from the action of `T‚Åª¬π` on `M`.
* The second comes from the action of `T‚Åª¬π` on `V`.

We take the equalizer of those two actions.

See the lines just above Definition 9.3 of [Analytic]. -/
def CLCFPTinv (r : ‚Ñù‚â•0) (V : NormedGroup) (r' : ‚Ñù‚â•0) (M : (ProFiltPseuNormGrpWithTinv r')·µí·µñ)
  (c : ‚Ñù‚â•0) (n : ‚Ñï) [normed_with_aut r V] [fact (0 < r)] [fact (0 < r')] [fact (r' ‚â§ 1)] :
  NormedGroup :=
CLCFPTinv‚ÇÇ r V r' (unop M) c n (r' * c)

namespace CLCFPTinv

def map {M‚ÇÅ M‚ÇÇ} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) : CLCFPTinv r V r' M‚ÇÅ c n ‚ü∂ CLCFPTinv r V r' M‚ÇÇ c n :=
equalizer.map ((CLCFP V r' c n).map f) ((CLCFP V r' c n).map f)
_ _
-- (CLCFP.map_comp_Tinv _ _ _ _ _).symm $
-- show (CLCFP.T_inv r V r' c n ‚â´ CLCFP.res V r' (r' * c) c n) ‚â´ (CLCFP.map V r' (r' * c) n f) =
--      (CLCFP.map V r' c n f) ‚â´ (CLCFP.T_inv r V r' c n ‚â´ CLCFP.res V r' (r' * c) c n),
-- by rw [‚Üê category.assoc, CLCFP.map_comp_T_inv, category.assoc, category.assoc, CLCFP.map_comp_res]

variables (M)

@[simp] lemma map_id :
  map r V r' c n (profinitely_filtered_pseudo_normed_group_with_Tinv_hom.id) =
    ùüô (CLCFPTinv r V r' M c n) :=
by { simp only [map, CLCFP.map_id], exact equalizer.map_id }

variables {M}

lemma map_comp : map r V r' c n (g.comp f) = map r V r' c n g ‚â´ map r V r' c n f :=
by { simp only [map, CLCFP.map_comp], symmetry, apply equalizer.map_comp_map }

lemma map_norm_noninc : (map r V r' c n f).norm_noninc :=
equalizer.map_norm_noninc _ _ $ CLCFP.map_norm_noninc _ _ _ _ _

def res [hc: fact (c‚ÇÅ ‚â§ c‚ÇÇ)] : CLCFPTinv r V r' M c‚ÇÇ n ‚ü∂ CLCFPTinv r V r' M c‚ÇÅ n :=
equalizer.map (CLCFP.res _ _ _ _ _) (CLCFP.res _ _ _ _ _)
(CLCFP.res_comp_Tinv _ _ _ _ _).symm $
begin
  haveI : fact (r' * c‚ÇÅ ‚â§ c‚ÇÇ) :=
    ‚ü®(infer_instance : fact (r' * c‚ÇÅ ‚â§ c‚ÇÅ)).out.trans hc.out‚ü©,
  show (CLCFP.T_inv r V r' c‚ÇÇ n ‚â´ CLCFP.res V r' (r' * c‚ÇÇ) c‚ÇÇ n) ‚â´ (CLCFP.res V r' (r' * c‚ÇÅ) (r' * c‚ÇÇ) n) =
    (CLCFP.res V r' c‚ÇÅ c‚ÇÇ n) ‚â´ (CLCFP.T_inv r V r' c‚ÇÅ n ‚â´ CLCFP.res V r' (r' * c‚ÇÅ) c‚ÇÅ n),
  rw [‚Üê category.assoc],
  simp only [CLCFP.res_comp_T_inv, category.assoc],
  rw [CLCFP.res_comp_res, CLCFP.res_comp_res],
end

@[simp] lemma res_refl : @res r V _ _ r' _ _ M _ c c n _ = ùüô _ :=
by { simp only [res, CLCFP.res_refl], exact equalizer.map_id }

lemma res_comp_res [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [fact (c‚ÇÇ ‚â§ c‚ÇÉ)] [fact (c‚ÇÅ ‚â§ c‚ÇÉ)] :
  res r V r' c‚ÇÇ c‚ÇÉ n ‚â´ res r V r' c‚ÇÅ c‚ÇÇ n = @res r V _ _ r' _ _ M _ c‚ÇÅ c‚ÇÉ n _ :=
calc _ = _ : equalizer.map_comp_map _ _ _ _
   ... = _ : by { congr' 1; apply CLCFP.res_comp_res }

lemma map_comp_res [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] :
  map r V r' c‚ÇÇ n f ‚â´ res r V r' c‚ÇÅ c‚ÇÇ n = res r V r' c‚ÇÅ c‚ÇÇ n ‚â´ map r V r' c‚ÇÅ n f :=
calc _ = _ : equalizer.map_comp_map _ _ _ _
   ... = _ : by { congr' 1; apply CLCFP.map_comp_res }
   ... = _ : (equalizer.map_comp_map _ _ _ _).symm

end CLCFPTinv

namespace breen_deligne

open CLCFPTinv

variables (M) {l m n}

namespace basic_universal_map

variables (œï : basic_universal_map m n)

def eval_CLCFPTinv [œï.suitable c‚ÇÅ c‚ÇÇ] :
  CLCFPTinv r V r' M c‚ÇÇ n ‚ü∂ CLCFPTinv r V r' M c‚ÇÅ m :=
equalizer.map (œï.eval_CLCFP _ _ _ _ _) (œï.eval_CLCFP _ _ _ _ _)
(Tinv_comp_eval_CLCFP _ _ _ _ _ _) $
show (CLCFP.T_inv r V r' c‚ÇÇ n ‚â´ CLCFP.res V r' (r' * c‚ÇÇ) c‚ÇÇ n) ‚â´ (eval_CLCFP V r' M (r' * c‚ÇÅ) (r' * c‚ÇÇ) œï) =
    (eval_CLCFP V r' M c‚ÇÅ c‚ÇÇ œï) ‚â´ (CLCFP.T_inv r V r' c‚ÇÅ m ‚â´ CLCFP.res V r' (r' * c‚ÇÅ) c‚ÇÅ m),
by rw [category.assoc, res_comp_eval_CLCFP V r' M (r' * c‚ÇÅ) c‚ÇÅ (r' * c‚ÇÇ) c‚ÇÇ,
    ‚Üê category.assoc, T_inv_comp_eval_CLCFP, category.assoc]

lemma map_comp_eval_CLCFPTinv [œï.suitable c‚ÇÅ c‚ÇÇ] :
  map r V r' c‚ÇÇ n f ‚â´ œï.eval_CLCFPTinv r V r' M‚ÇÅ c‚ÇÅ c‚ÇÇ =
    œï.eval_CLCFPTinv r V r' M‚ÇÇ c‚ÇÅ c‚ÇÇ ‚â´ map r V r' c‚ÇÅ m f :=
calc _ = _ : equalizer.map_comp_map _ _ _ _
   ... = _ : by { congr' 1; apply map_comp_eval_CLCFP }
   ... = _ : (equalizer.map_comp_map _ _ _ _).symm

lemma res_comp_eval_CLCFPTinv
  [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [œï.suitable c‚ÇÇ c‚ÇÑ] [œï.suitable c‚ÇÅ c‚ÇÉ] [fact (c‚ÇÉ ‚â§ c‚ÇÑ)] :
  res r V r' c‚ÇÉ c‚ÇÑ n ‚â´ œï.eval_CLCFPTinv r V r' M c‚ÇÅ c‚ÇÉ =
    œï.eval_CLCFPTinv r V r' M c‚ÇÇ c‚ÇÑ ‚â´ res r V r' c‚ÇÅ c‚ÇÇ m :=
calc _ = _ : equalizer.map_comp_map _ _ _ _
   ... = _ : by { congr' 1; apply res_comp_eval_CLCFP }
   ... = _ : (equalizer.map_comp_map _ _ _ _).symm

end basic_universal_map

namespace universal_map

variables (œï : universal_map m n)

def eval_CLCFPTinv [œï.suitable c‚ÇÅ c‚ÇÇ] :
  CLCFPTinv r V r' M c‚ÇÇ n ‚ü∂ CLCFPTinv r V r' M c‚ÇÅ m :=
equalizer.map (œï.eval_CLCFP _ _ _ _ _) (œï.eval_CLCFP _ _ _ _ _)
(Tinv_comp_eval_CLCFP _ _ _ _ _ _) $
show (CLCFP.T_inv r V r' c‚ÇÇ n ‚â´ CLCFP.res V r' (r' * c‚ÇÇ) c‚ÇÇ n) ‚â´ (eval_CLCFP V r' M (r' * c‚ÇÅ) (r' * c‚ÇÇ) œï) =
     (eval_CLCFP V r' M c‚ÇÅ c‚ÇÇ œï) ‚â´ (CLCFP.T_inv r V r' c‚ÇÅ m ‚â´ CLCFP.res V r' (r' * c‚ÇÅ) c‚ÇÅ m),
by rw [category.assoc, res_comp_eval_CLCFP V r' M (r' * c‚ÇÅ) c‚ÇÅ (r' * c‚ÇÇ) c‚ÇÇ,
    ‚Üê category.assoc, T_inv_comp_eval_CLCFP, category.assoc]

@[simp] lemma eval_CLCFPTinv_zero :
  (0 : universal_map m n).eval_CLCFPTinv r V r' M c‚ÇÅ c‚ÇÇ = 0 :=
by { simp only [eval_CLCFPTinv, eval_CLCFP_zero, equalizer.map_Œπ], ext, refl }

open category_theory.limits

lemma eval_CLCFPTinv_comp {l m n : FreeMat} (g : m ‚ü∂ n) (f : l ‚ü∂ m)
  [hg : g.suitable c‚ÇÇ c‚ÇÉ] [hf : f.suitable c‚ÇÅ c‚ÇÇ] [(comp g f).suitable c‚ÇÅ c‚ÇÉ] :
  (f ‚â´ g).eval_CLCFPTinv r V r' M c‚ÇÅ c‚ÇÉ =
    g.eval_CLCFPTinv r V r' M c‚ÇÇ c‚ÇÉ ‚â´ f.eval_CLCFPTinv r V r' M c‚ÇÅ c‚ÇÇ :=
calc _ = _ : by { delta eval_CLCFPTinv, congr' 1; apply eval_CLCFP_comp }
   ... = _ : (equalizer.map_comp_map _ _ _ _).symm

lemma map_comp_eval_CLCFPTinv [œï.suitable c‚ÇÅ c‚ÇÇ] :
  map r V r' c‚ÇÇ n f ‚â´ œï.eval_CLCFPTinv r V r' M‚ÇÅ c‚ÇÅ c‚ÇÇ =
    œï.eval_CLCFPTinv r V r' M‚ÇÇ c‚ÇÅ c‚ÇÇ ‚â´ map r V r' c‚ÇÅ m f :=
calc _ = _ : equalizer.map_comp_map _ _ _ _
   ... = _ : by { congr' 1; apply map_comp_eval_CLCFP }
   ... = _ : (equalizer.map_comp_map _ _ _ _).symm

lemma res_comp_eval_CLCFPTinv
  [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [œï.suitable c‚ÇÇ c‚ÇÑ] [œï.suitable c‚ÇÅ c‚ÇÉ] [fact (c‚ÇÉ ‚â§ c‚ÇÑ)] :
  res r V r' c‚ÇÉ c‚ÇÑ n ‚â´ œï.eval_CLCFPTinv r V r' M c‚ÇÅ c‚ÇÉ =
    œï.eval_CLCFPTinv r V r' M c‚ÇÇ c‚ÇÑ ‚â´ res r V r' c‚ÇÅ c‚ÇÇ m :=
calc _ = _ : equalizer.map_comp_map _ _ _ _
   ... = _ : by { congr' 1; apply res_comp_eval_CLCFP }
   ... = _ : (equalizer.map_comp_map _ _ _ _).symm

end universal_map

end breen_deligne
