import pseudo_normed_group.breen_deligne
import normed_group.NormedGroup

open_locale classical nnreal
noncomputable theory
local attribute [instance] type_pow

-- move this
def Profinite.of (X : Type*)
  [topological_space X] [t2_space X] [totally_disconnected_space X] [compact_space X] :
  Profinite :=
{ to_Top := Top.of X,
  is_compact := ‚Äπ_‚Ä∫,
  is_t2 := ‚Äπ_‚Ä∫,
  is_totally_disconnected := ‚Äπ_‚Ä∫ }

@[simps]
def pseudo_normed_group.filtration_obj
  (M) [profinitely_filtered_pseudo_normed_group M] (c) : Profinite :=
Profinite.of (pseudo_normed_group.filtration M c)

@[simps]
def ProFiltPseuNormGrpWithTinv.level
  (c : ‚Ñù‚â•0) : ProFiltPseuNormGrpWithTinv c ‚•§ Profinite :=
{ obj := Œª M, pseudo_normed_group.filtration_obj M c,
  map := Œª M N f, ‚ü®f.level c, f.level_continuous c‚ü© }

open NormedGroup opposite Profinite pseudo_normed_group category_theory breen_deligne
open profinitely_filtered_pseudo_normed_group
open profinitely_filtered_pseudo_normed_group_with_Tinv

/-- The "functor" that sends `M` and `c` to `(filtration M c)^n` -/
@[simps]
def Pow (n : ‚Ñï) : Profinite ‚•§ Profinite :=
{ obj := Œª A, of (A^n),
  map := Œª A B f, {
    to_fun := Œª x j, f (x j),
    continuous_to_fun :=
    begin
      -- factor this into a separate lemma `continuous.pi_map`?
      apply continuous_pi,
      intro j,
      exact f.2.comp (continuous_apply j),
    end } }

universe variable u
variables {r' : ‚Ñù‚â•0} {M M‚ÇÅ M‚ÇÇ M‚ÇÉ : Type u}
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M]
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÅ]
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÇ]
variables [profinitely_filtered_pseudo_normed_group_with_Tinv r' M‚ÇÉ]
variables (c c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ : ‚Ñù‚â•0) (l m n : ‚Ñï) (œï : basic_universal_map m n)
variables (f : profinitely_filtered_pseudo_normed_group_with_Tinv_hom r' M‚ÇÅ M‚ÇÇ)
variables (g : profinitely_filtered_pseudo_normed_group_with_Tinv_hom r' M‚ÇÇ M‚ÇÉ)

@[simps]
def profinitely_filtered_pseudo_normed_group_with_Tinv.Tinv‚ÇÄ_hom
  (c c‚ÇÇ : ‚Ñù‚â•0) [fact (r'‚Åª¬π * c ‚â§ c‚ÇÇ)] : filtration_obj M c ‚ü∂ filtration_obj M c‚ÇÇ :=
by exact ‚ü®Tinv‚ÇÄ c c‚ÇÇ, Tinv‚ÇÄ_continuous _ _‚ü©

open profinitely_filtered_pseudo_normed_group_with_Tinv

/-- The "functor" that sends `M` and `c` to `(filtration M c)^n` -/
def FiltrationPow (r' : ‚Ñù‚â•0) (c : ‚Ñù‚â•0) (n : ‚Ñï) :
  ProFiltPseuNormGrpWithTinv c ‚•§ Profinite :=
ProFiltPseuNormGrpWithTinv.level c ‚ãô Pow n

namespace FiltrationPow

@[simps]
def cast_le [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] : (FiltrationPow r' c‚ÇÅ n).obj M ‚ü∂ (FiltrationPow r' c‚ÇÇ n).obj M :=
(Pow n).map ‚ü®cast_le, (embedding_cast_le c‚ÇÅ c‚ÇÇ).continuous‚ü©

@[simp] lemma cast_le_refl : cast_le r' c c n = ùüô (FiltrationPow r' M c n) := by { ext, refl }

lemma cast_le_trans [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [fact (c‚ÇÇ ‚â§ c‚ÇÉ)] [fact (c‚ÇÅ ‚â§ c‚ÇÉ)] :
  cast_le r' c‚ÇÅ c‚ÇÇ n ‚â´ cast_le r' c‚ÇÇ c‚ÇÉ n = @cast_le r' M _ c‚ÇÅ c‚ÇÉ n _ :=
by { ext, refl }

lemma map_comp_cast_le [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] :
  map r' c‚ÇÅ n f ‚â´ cast_le r' c‚ÇÅ c‚ÇÇ n = cast_le r' c‚ÇÅ c‚ÇÇ n ‚â´ map r' c‚ÇÇ n f :=
by { ext, refl }

@[simps]
def Tinv : FiltrationPow r' M c n ‚ü∂ FiltrationPow r' M (r'‚Åª¬π * c) n :=
(Pow n).map (Tinv‚ÇÄ_hom _ c (r'‚Åª¬π * c))

lemma map_comp_Tinv :
  map r' c n f ‚â´ Tinv r' c n = Tinv r' c n ‚â´ map r' (r'‚Åª¬π * c) n f :=
by { ext x j, exact (f.map_Tinv (x j).1).symm }

lemma cast_le_comp_Tinv [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] :
  cast_le r' c‚ÇÅ c‚ÇÇ n ‚â´ (@Tinv r' M _ c‚ÇÇ n) =
    Tinv r' c‚ÇÅ n ‚â´ cast_le r' (r'‚Åª¬π * c‚ÇÅ) (r'‚Åª¬π * c‚ÇÇ) n :=
by { ext, refl }

end FiltrationPow

namespace breen_deligne
namespace basic_universal_map

open FiltrationPow

variables (M) {l m n}

@[simps]
def eval_FP [œï.suitable c‚ÇÅ c‚ÇÇ] : FiltrationPow r' M c‚ÇÅ m ‚ü∂ FiltrationPow r' M c‚ÇÇ n :=
{ to_fun := œï.eval_png‚ÇÄ M c‚ÇÅ c‚ÇÇ,
  continuous_to_fun := œï.eval_png‚ÇÄ_continuous M c‚ÇÅ c‚ÇÇ }

lemma eval_FP_comp (g : basic_universal_map m n) (f : basic_universal_map l m)
  [hg : g.suitable c‚ÇÇ c‚ÇÉ] [hf : f.suitable c‚ÇÅ c‚ÇÇ] [(g.comp f).suitable c‚ÇÅ c‚ÇÉ] :
  (g.comp f).eval_FP r' M c‚ÇÅ c‚ÇÉ =
  f.eval_FP r' M c‚ÇÅ c‚ÇÇ ‚â´ g.eval_FP r' M c‚ÇÇ c‚ÇÉ :=
begin
  ext j s i,
  dsimp,
  simp only [eval_png‚ÇÄ, subtype.coe_mk],
  rw eval_png_comp,
  simp only [add_monoid_hom.coe_comp, function.comp_app],
  refl,
end

lemma map_comp_eval_FP [œï.suitable c‚ÇÅ c‚ÇÇ] :
  map r' c‚ÇÅ m f ‚â´ œï.eval_FP r' M‚ÇÇ c‚ÇÅ c‚ÇÇ = œï.eval_FP r' M‚ÇÅ c‚ÇÅ c‚ÇÇ ‚â´ map r' c‚ÇÇ n f :=
begin
  ext1 x,
  show œï.eval_png‚ÇÄ M‚ÇÇ c‚ÇÅ c‚ÇÇ (map r' c‚ÇÅ m f x) = map r' c‚ÇÇ n f (œï.eval_png‚ÇÄ M‚ÇÅ c‚ÇÅ c‚ÇÇ x),
  ext j,
  dsimp only [basic_universal_map.eval_png‚ÇÄ],
  simp only [basic_universal_map.eval_png_apply, f.map_sum, map_to_fun, subtype.coe_mk,
    pow_incl_apply, f.level_coe],
  apply fintype.sum_congr,
  intro i,
  simp only [‚Üê gsmul_eq_smul],
  exact (f.to_add_monoid_hom.map_gsmul _ _).symm
end

lemma cast_le_comp_eval_FP
  [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [œï.suitable c‚ÇÇ c‚ÇÑ] [œï.suitable c‚ÇÅ c‚ÇÉ] [fact (c‚ÇÉ ‚â§ c‚ÇÑ)] :
  cast_le r' c‚ÇÅ c‚ÇÇ m ‚â´ œï.eval_FP r' M c‚ÇÇ c‚ÇÑ = œï.eval_FP r' M c‚ÇÅ c‚ÇÉ ‚â´ cast_le r' c‚ÇÉ c‚ÇÑ n :=
by { ext, refl }

open profinitely_filtered_pseudo_normed_group_with_Tinv

lemma Tinv_comp_eval_FP [œï.suitable c‚ÇÅ c‚ÇÇ] :
  Tinv r' c‚ÇÅ m ‚â´ œï.eval_FP r' M (r'‚Åª¬π * c‚ÇÅ) (r'‚Åª¬π * c‚ÇÇ) =
    œï.eval_FP r' M c‚ÇÅ c‚ÇÇ ‚â´ Tinv r' c‚ÇÇ n :=
begin
  ext1 x,
  show œï.eval_png‚ÇÄ M (r'‚Åª¬π * c‚ÇÅ) (r'‚Åª¬π * c‚ÇÇ) (Tinv r' c‚ÇÅ m x) =
    Tinv r' c‚ÇÇ n (œï.eval_png‚ÇÄ M c‚ÇÅ c‚ÇÇ x),
  ext j,
  dsimp only [eval_png‚ÇÄ],
  simp only [eval_png_apply, map_to_fun, subtype.coe_mk, pow_incl_apply,
    FiltrationPow.Tinv, Pow_map_to_fun, Tinv‚ÇÄ_hom_to_fun, Tinv‚ÇÄ_coe,
    profinitely_filtered_pseudo_normed_group_hom.map_sum],
  apply fintype.sum_congr,
  intro i,
  simp only [‚Üê gsmul_eq_smul],
  exact ((profinitely_filtered_pseudo_normed_group_hom.to_add_monoid_hom _).map_gsmul _ _).symm
end

end basic_universal_map
end breen_deligne

open breen_deligne
