import pseudo_normed_group.category
import data.set.intervals
import for_mathlib.Profinite.extend

.

open_locale big_operators

universe u
variable (S : Fintype.{u})

@[derive add_comm_group]
def free_pfpng := S ‚Üí ‚Ñ§

noncomputable theory
open_locale classical

instance : has_nnnorm (free_pfpng S) :=
‚ü®Œª f, ‚àë s, ‚à•f s‚à•‚Çä‚ü©

namespace free_pfpng

@[simp] lemma nnnorm_zero : ‚à•(0 : free_pfpng S)‚à•‚Çä = 0 :=
by { change ‚àë _, _ = _, simp }

@[simp] lemma nnnorm_neg (f : free_pfpng S) : ‚à•(-f)‚à•‚Çä = ‚à•f‚à•‚Çä :=
by { change ‚àë _, _ = _, simpa }

lemma nnnorm_add (f‚ÇÅ f‚ÇÇ : free_pfpng S) : ‚à•f‚ÇÅ + f‚ÇÇ‚à•‚Çä ‚â§ ‚à•f‚ÇÅ‚à•‚Çä + ‚à•f‚ÇÇ‚à•‚Çä :=
begin
  change ‚àë _, _ ‚â§ ‚àë _, _ + ‚àë _, _,
  rw ‚Üê finset.sum_add_distrib,
  apply finset.sum_le_sum,
  intros s _,
  apply nnnorm_add_le,
end

instance (c) : topological_space { f : free_pfpng S | ‚à•f‚à•‚Çä ‚â§ c } := ‚ä•
instance (c) : discrete_topology { f : free_pfpng S | ‚à•f‚à•‚Çä ‚â§ c } := ‚ü®rfl‚ü©

instance (c) : fintype { f : free_pfpng S | ‚à•f‚à•‚Çä ‚â§ c } :=
begin
  let A := { f : free_pfpng S | ‚à•f‚à•‚Çä ‚â§ c },
  have h : ‚àÉ (N : ‚Ñï), c ‚â§ N := sorry, -- ceiling.
  let N := h.some, let hN : c ‚â§ N := h.some_spec,
  let Œπ : A ‚Üí S ‚Üí set.Icc (-(N : ‚Ñ§)) N :=
    Œª a s, ‚ü®a.1 s, _‚ü©,
  swap, { sorry },
  have : function.injective Œπ,
  { rintros ‚ü®f,hf‚ü© ‚ü®g,hg‚ü© h,
    ext s,
    apply_fun (Œª e, (e s).1) at h,
    assumption },
  apply fintype.of_injective Œπ this,
end

instance : profinitely_filtered_pseudo_normed_group (free_pfpng S) :=
{ filtration := Œª c, { f | ‚à• f ‚à•‚Çä ‚â§ c },
  filtration_mono := Œª c‚ÇÅ c‚ÇÇ h f hf, le_trans hf h,
  zero_mem_filtration := Œª c, by simp,
  neg_mem_filtration := Œª c f hf, by simpa,
  add_mem_filtration := Œª c‚ÇÅ c‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ,
    le_trans (nnnorm_add _ _ _) (add_le_add h‚ÇÅ h‚ÇÇ),
  continuous_add' := Œª c‚ÇÅ c‚ÇÇ,
    continuous_of_discrete_topology,
  continuous_neg' := Œª c, continuous_of_discrete_topology,
  continuous_cast_le := Œª _ _ _, continuous_of_discrete_topology,
  ..(infer_instance : add_comm_group (free_pfpng S)) }

def map {S‚ÇÅ S‚ÇÇ : Fintype.{u}} (g : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
  strict_comphaus_filtered_pseudo_normed_group_hom
  (free_pfpng S‚ÇÅ) (free_pfpng S‚ÇÇ) :=
{ to_fun := Œª f s, ‚àë t in finset.univ.filter (Œª w, g w = s), f t,
  map_zero' := sorry,
  map_add' := sorry,
  strict' := sorry,
  continuous' := Œª c, continuous_of_discrete_topology }

@[simp]
lemma map_id : map (ùüô S) =
  strict_comphaus_filtered_pseudo_normed_group_hom.id :=
sorry

@[simp]
lemma map_comp {S‚ÇÅ S‚ÇÇ S‚ÇÉ : Fintype.{u}}
  (g‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (g‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
  map (g‚ÇÅ ‚â´ g‚ÇÇ) =
  (map g‚ÇÇ).comp (map g‚ÇÅ) :=
sorry

end free_pfpng

@[simps]
def free_pfpng_functor : Fintype ‚•§ ProFiltPseuNormGrp‚ÇÅ :=
{ obj := Œª S,
  { M := free_pfpng S,
    exhaustive' := Œª f, ‚ü®‚à•f‚à•‚Çä, le_refl _‚ü© },
  map := Œª S‚ÇÅ S‚ÇÇ f, free_pfpng.map f,
  map_id' := free_pfpng.map_id,
  map_comp' := Œª _ _ _ g‚ÇÅ g‚ÇÇ, free_pfpng.map_comp g‚ÇÅ g‚ÇÇ }

def free_pfpng_profinite : Profinite.{u} ‚•§ ProFiltPseuNormGrp‚ÇÅ :=
Profinite.extend $ free_pfpng_functor
