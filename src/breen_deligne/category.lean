import breen_deligne.universal_map
import system_of_complexes.complex

namespace breen_deligne

open free_abelian_group category_theory

/-- The category whose objects are natural numbers
and whose morphisms are the free abelian groups generated by
matrices with integer coefficients. -/
@[derive comm_semiring] def FreeMat := ℕ

namespace FreeMat

instance : small_category FreeMat :=
{ hom := λ m n, universal_map m n,
  id := universal_map.id,
  comp := λ l m n f g, universal_map.comp g f,
  id_comp' := λ n f, universal_map.comp_id,
  comp_id' := λ n f, universal_map.id_comp,
  assoc' := λ k l m n f g h, (universal_map.comp_assoc h g f).symm }

instance : preadditive FreeMat :=
{ hom_group := λ m n, infer_instance,
  add_comp' := λ l m n f g h, add_monoid_hom.map_add _ _ _,
  comp_add' := λ l m n f g h, show universal_map.comp (g + h) f = _,
    by { rw [add_monoid_hom.map_add, add_monoid_hom.add_apply], refl } }

end FreeMat

/-- Roughly speaking, this is a collection of formal finite sums of matrices
that encode the data that rolls out of the Breen--Deligne resolution. -/
@[derive [small_category, preadditive]]
def data := chain_complex ℕ FreeMat

namespace data

variable (BD : data)

/-- `BD.double` is the Breen--Deligne data whose `n`-th rank is `2 * BD.rank n`. -/
@[simps] def double : data :=
{ X := λ n, BD.X n + BD.X n,
  d := λ m n, (BD.d m n).double,
  d_eq_zero := λ m n h, by { rw [BD.d_eq_zero h, universal_map.double_zero] },
  d_comp_d := λ l m n,
    calc _ = (BD.d l m ≫ BD.d m n).double : universal_map.comp_double_double _ _
    ... = 0 : by { rw [BD.d_comp_d, universal_map.double_zero] } }

/-- `BD.pow N` is the Breen--Deligne data whose `n`-th rank is `2^N * BD.rank n`. -/
def pow : ℕ → data
| 0     := BD
| (n+1) := (pow n).double

@[simps] def σ : BD.double ⟶ BD :=
{ f := λ n, universal_map.σ _,
  comm := λ m n, universal_map.σ_comp_double _ }

@[simps] def π₁ : BD.double ⟶ BD :=
{ f := λ n, universal_map.π₁ _,
  comm := λ m n, universal_map.π₁_comp_double _ }

@[simps] def π₂ : BD.double ⟶ BD :=
{ f := λ n, universal_map.π₂ _,
  comm := λ m n, universal_map.π₂_comp_double _ }

end data

section
universe variables u
open universal_map
variables {m n : ℕ} (A : Type u) [add_comm_group A] (f : universal_map m n)

end

open differential_object.complex_like

/-- A Breen--Deligne `package` consists of Breen--Deligne `data`
that forms a complex, together with a `homotopy`
between the two universal maps `σ_add` and `σ_proj`. -/
structure package :=
(data       : data)
(homotopy   : @homotopy ℕ FreeMat ff _ _ _ data.double data data.σ (data.π₁ + data.π₂))

namespace package

/-- `BD.rank i` is the rank of the `i`th entry in the Breen--Deligne resolution described by `BD`. -/
def rank (BD : package) := BD.data.X

def map (BD : package) (i : ℕ) := BD.data.d (i+1) i

@[simp] lemma map_comp_map (BD : package) (i : ℕ) : BD.map _ ≫ BD.map i = 0 :=
BD.data.d_comp_d _ _ _

end package

end breen_deligne
