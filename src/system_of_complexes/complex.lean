import category_theory.limits.shapes.zero

open category_theory category_theory.limits

class has_succ (Œ± : Type*) := (succ : Œ± ‚Üí Œ±)

-- fix this to something better?
notation `≈û` := has_succ.succ

-- do we want this for every semiring??
instance : has_succ ‚Ñï := ‚ü®Œª n, n + 1‚ü©
instance : has_succ ‚Ñ§ := ‚ü®Œª n, n + 1‚ü©

structure differential_object_aux (Œπ : Type) (S‚ÇÄ S‚ÇÅ : Œπ ‚Üí Œπ) (V : Type*)
  [category V] [has_zero_morphisms V] :=
(X : Œπ ‚Üí V)
(differential : Œ† i, X (S‚ÇÄ i) ‚ü∂ X (S‚ÇÅ i))
(differential2 : ‚àÄ i j (h : S‚ÇÅ i = S‚ÇÄ j),
  differential i ‚â´ eq_to_hom (show X (S‚ÇÅ i) = X (S‚ÇÄ j), by rw h) ‚â´ differential j = 0)

variables (Œπ : Type) (V : Type*) {cov : bool}
variables [has_succ Œπ] [category V] [has_zero_morphisms V]

def differential_object : bool ‚Üí Type*
| tt := differential_object_aux Œπ id ≈û V
| ff := differential_object_aux Œπ ≈û id V

abbreviation chain_complex := differential_object Œπ V ff

abbreviation cochain_complex := differential_object Œπ V tt

namespace differential_object

variables {Œπ V}

def X : Œ† {cov : bool} (C : differential_object Œπ V cov), Œπ ‚Üí V
| tt := differential_object_aux.X
| ff := differential_object_aux.X

variable [decidable_eq Œπ]

def coherent_indices : Œ† (cov : bool) (i j : Œπ), Prop
| tt i j := ≈û i = j
| ff i j := i = ≈û j

def d : Œ† {cov : bool} (C : differential_object Œπ V cov) (i j : Œπ), C.X i ‚ü∂ C.X j
| tt C i j :=
if h : ≈û i = j
then differential_object_aux.differential C i ‚â´ eq_to_hom (show C.X (≈û i) = C.X j, by rw h)
else 0
| ff C i j :=
if h : i = ≈û j
then eq_to_hom (show C.X i = C.X (≈û j), by rw h) ‚â´ differential_object_aux.differential C j
else 0

variables (C C‚ÇÅ C‚ÇÇ C‚ÇÉ : differential_object Œπ V cov)

lemma d_eq_zero (i j : Œπ) (h : ¬¨ coherent_indices cov i j) : C.d i j = 0 :=
by { cases cov; dsimp [d, coherent_indices] at h ‚ä¢; simp only [dif_neg h] }

lemma d_comp_d (i j k : Œπ) : C.d i j ‚â´ C.d j k = 0 :=
begin
  cases cov,
  all_goals
  { dsimp [d], split_ifs with h1 h2,
    { subst h1, subst h2,
      simpa using differential_object_aux.differential2 C _ _ rfl },
    all_goals { simp only [zero_comp, comp_zero] } }
end

@[ext]
structure hom :=
(f (i : Œπ) : C‚ÇÅ.X i ‚ü∂ C‚ÇÇ.X i)
(comm' (i j : Œπ) (h : coherent_indices cov i j) : C‚ÇÅ.d i j ‚â´ f j = f i ‚â´ C‚ÇÇ.d i j)

variables {C‚ÇÅ C‚ÇÇ C‚ÇÉ}

@[reassoc]
lemma hom.comm (f : hom C‚ÇÅ C‚ÇÇ) (i j : Œπ) :
  C‚ÇÅ.d i j ‚â´ f.f j = f.f i ‚â´ C‚ÇÇ.d i j :=
begin
  by_cases h : coherent_indices cov i j,
  { exact f.comm' i j h },
  simp only [d_eq_zero _ i j h, zero_comp, comp_zero]
end

def id : hom C C :=
{ f := Œª i, ùüô _,
  comm' := by { intros, simp only [category.id_comp, category.comp_id] } }

def comp (f : hom C‚ÇÅ C‚ÇÇ) (g : hom C‚ÇÇ C‚ÇÉ) : hom C‚ÇÅ C‚ÇÉ :=
{ f := Œª i, f.f i ‚â´ g.f i,
  comm' := Œª i j hij, by { rw [hom.comm_assoc, hom.comm, category.assoc] } }

instance : category (differential_object Œπ V cov) :=
{ hom := hom,
  id := id,
  comp := Œª _ _ _, comp,
  id_comp' := by { intros, ext, dsimp [id, comp], rw [category.id_comp] },
  comp_id' := by { intros, ext, dsimp [id, comp], rw [category.comp_id] },
  assoc' := by { intros, ext, dsimp [id, comp], rw [category.assoc] } }

@[simp] lemma id_f (i : Œπ) : (ùüô C : C ‚ü∂ C).f i = ùüô (C.X i) := rfl

@[simp] lemma comp_f (f : C‚ÇÅ ‚ü∂ C‚ÇÇ) (g : C‚ÇÇ ‚ü∂ C‚ÇÉ) (i : Œπ) :
  (f ‚â´ g).f i = f.f i ‚â´ g.f i := rfl

def iso_app (f : C‚ÇÅ ‚âÖ C‚ÇÇ) (i : Œπ) : C‚ÇÅ.X i ‚âÖ C‚ÇÇ.X i :=
{ hom := f.hom.f i,
  inv := f.inv.f i,
  hom_inv_id' := by { rw [‚Üê comp_f, f.hom_inv_id, id_f] },
  inv_hom_id' := by { rw [‚Üê comp_f, f.inv_hom_id, id_f] } }

end differential_object
