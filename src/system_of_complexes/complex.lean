import category_theory.graded_object
import category_theory.preadditive
import data.int.basic

open category_theory category_theory.limits

class has_succ (Œ± : Type*) := (succ : Œ± ‚Üí Œ±)

-- fix this to something better?
notation `≈û` := has_succ.succ

-- do we want this for every semiring??
instance : has_succ ‚Ñï := ‚ü®Œª n, n + 1‚ü©
instance : has_succ ‚Ñ§ := ‚ü®Œª n, n + 1‚ü©

@[ext]
structure differential_object (Œπ : Type) (S‚ÇÄ S‚ÇÅ : Œπ ‚Üí Œπ) (V : Type*)
  [category V] [has_zero_morphisms V] :=
(X : Œπ ‚Üí V)
(differential : Œ† i, X (S‚ÇÄ i) ‚ü∂ X (S‚ÇÅ i))
(differential2 : ‚àÄ i j (h : S‚ÇÅ i = S‚ÇÄ j),
  differential i ‚â´ eq_to_hom (show X (S‚ÇÅ i) = X (S‚ÇÄ j), by rw h) ‚â´ differential j = 0)

variables (Œπ : Type) (S‚ÇÄ S‚ÇÅ : Œπ ‚Üí Œπ) (V : Type*) {cov : bool}

namespace differential_object
variables [category V] [has_zero_morphisms V]

variables (C C‚ÇÅ C‚ÇÇ C‚ÇÉ : differential_object Œπ S‚ÇÄ S‚ÇÅ V)

section category
-- technically, this can probably done in the generality of `differential_object`

variables {Œπ S‚ÇÄ S‚ÇÅ V}

@[ext]
structure hom :=
(f (i : Œπ) : C‚ÇÅ.X i ‚ü∂ C‚ÇÇ.X i)
(comm' (i : Œπ) : C‚ÇÅ.differential i ‚â´ f (S‚ÇÅ i) = f (S‚ÇÄ i) ‚â´ C‚ÇÇ.differential i)

attribute [reassoc] hom.comm'

variables {C‚ÇÅ C‚ÇÇ C‚ÇÉ}

protected def id : hom C C :=
{ f := Œª i, ùüô _,
  comm' := by { intros, simp only [category.id_comp, category.comp_id] } }

def comp (f : hom C‚ÇÅ C‚ÇÇ) (g : hom C‚ÇÇ C‚ÇÉ) : hom C‚ÇÅ C‚ÇÉ :=
{ f := Œª i, f.f i ‚â´ g.f i,
  comm' := Œª i, by { rw [hom.comm'_assoc, hom.comm', category.assoc] } }

instance : category (differential_object Œπ S‚ÇÄ S‚ÇÅ V) :=
{ hom := hom,
  id := differential_object.id,
  comp := Œª _ _ _, comp,
  id_comp' := by { intros, ext, exact category.id_comp _ },
  comp_id' := by { intros, ext, exact category.comp_id _ },
  assoc' := by { intros, ext, dsimp [id, comp], rw [category.assoc] } }

@[simp] lemma id_f (i : Œπ) : (ùüô C : C ‚ü∂ C).f i = ùüô (C.X i) := rfl

@[simp] lemma comp_f (f : C‚ÇÅ ‚ü∂ C‚ÇÇ) (g : C‚ÇÇ ‚ü∂ C‚ÇÉ) (i : Œπ) :
  (f ‚â´ g).f i = f.f i ‚â´ g.f i := rfl

@[simp, reassoc]
lemma eq_to_hom_f (f : C‚ÇÅ ‚ü∂ C‚ÇÇ) (i j : Œπ) (h : i = j) :
  eq_to_hom (congr_arg _ h) ‚â´ f.f j = f.f i ‚â´ eq_to_hom (congr_arg _ h) :=
by { cases h, simp only [eq_to_hom_refl, category.id_comp, category.comp_id] }

@[simp, reassoc]
lemma eq_to_hom_differential (i j : Œπ) (h : i = j) :
  eq_to_hom (congr_arg _ h) ‚â´ C.differential j =
    C.differential i ‚â´ eq_to_hom (congr_arg _ $ by rw h) :=
by { cases h, simp only [eq_to_hom_refl, category.id_comp, category.comp_id] }

@[simps]
def iso_app (f : C‚ÇÅ ‚âÖ C‚ÇÇ) (i : Œπ) : C‚ÇÅ.X i ‚âÖ C‚ÇÇ.X i :=
{ hom := f.hom.f i,
  inv := f.inv.f i,
  hom_inv_id' := by { rw [‚Üê comp_f, f.hom_inv_id, id_f] },
  inv_hom_id' := by { rw [‚Üê comp_f, f.inv_hom_id, id_f] } }

@[simps]
def iso_of_components (f : Œ† i, C‚ÇÅ.X i ‚âÖ C‚ÇÇ.X i)
  (hf : ‚àÄ i, C‚ÇÅ.differential i ‚â´ (f _).hom = (f _).hom ‚â´ C‚ÇÇ.differential i) :
  C‚ÇÅ ‚âÖ C‚ÇÇ :=
{ hom :=
  { f := Œª i, (f i).hom,
    comm' := hf },
  inv :=
  { f := Œª i, (f i).inv,
    comm' := Œª i,
    calc C‚ÇÇ.differential i ‚â´ (f (S‚ÇÅ i)).inv
        = (f (S‚ÇÄ i)).inv ‚â´ ((f (S‚ÇÄ i)).hom ‚â´ C‚ÇÇ.differential i) ‚â´ (f (S‚ÇÅ i)).inv : by simp
    ... = (f (S‚ÇÄ i)).inv ‚â´ (C‚ÇÅ.differential i ‚â´ (f (S‚ÇÅ i)).hom) ‚â´ (f (S‚ÇÅ i)).inv : by rw hf
    ... = (f (S‚ÇÄ i)).inv ‚â´ C‚ÇÅ.differential i : by simp },
  hom_inv_id' := by { ext i, exact (f i).hom_inv_id },
  inv_hom_id' := by { ext i, exact (f i).inv_hom_id } }

instance : has_zero_morphisms (differential_object Œπ S‚ÇÄ S‚ÇÅ V) :=
{ has_zero := Œª C‚ÇÅ C‚ÇÇ, ‚ü®{ f := Œª i, 0, comm' := Œª _, by simp only [zero_comp, comp_zero] }‚ü©,
  comp_zero' := by { intros, ext, rw [comp_f, comp_zero] },
  zero_comp' := by { intros, ext, rw [comp_f, zero_comp] } }

variables (Œπ V)

@[simps]
def forget : differential_object Œπ S‚ÇÄ S‚ÇÅ V ‚•§ graded_object Œπ V :=
{ obj := Œª C, C.X,
  map := Œª _ _ f, f.f }

end category

end differential_object

namespace category_theory

variables {Œπ} {S‚ÇÄ S‚ÇÅ} {V‚ÇÅ V‚ÇÇ : Type*}
variables [category V‚ÇÅ] [category V‚ÇÇ] [has_zero_morphisms V‚ÇÅ] [has_zero_morphisms V‚ÇÇ]

@[simps]
def functor.map_differential_object (F : V‚ÇÅ ‚•§ V‚ÇÇ)
  (hF : ‚àÄ (x y : V‚ÇÅ), F.map (0 : x ‚ü∂ y) = 0) :
  differential_object Œπ S‚ÇÄ S‚ÇÅ V‚ÇÅ ‚•§ differential_object Œπ S‚ÇÄ S‚ÇÅ V‚ÇÇ :=
{ obj := Œª C,
  { X := Œª i, F.obj (C.X i),
    differential := Œª i, F.map (C.differential i),
    differential2 := Œª i j h,
    begin
      have aux := hF (C.X (S‚ÇÄ i)) (C.X (S‚ÇÅ j)),
      rw ‚Üê C.differential2 i j h at aux,
      simpa using aux,
    end },
  map := Œª C‚ÇÅ C‚ÇÇ f,
  { f := Œª i, F.map (f.f i),
    comm' := Œª i, by simp only [‚Üê F.map_comp, f.comm'] },
  map_id' := by { intros, ext, exact F.map_id _ },
  map_comp' := by { intros, ext, exact F.map_comp _ _ } }

end category_theory

namespace differential_object

variables {Œπ V}
variables [has_succ Œπ] [category V] [has_zero_morphisms V]

local notation `differential_object'` cov :=
differential_object Œπ (bool.rec ≈û id cov) (bool.rec id ≈û cov) V

def coherent_indices : Œ† (cov : bool) (i j : Œπ), Prop
| ff i j := i = ≈û j
| tt i j := ≈û i = j

instance coherent_indices_decidable [decidable_eq Œπ] (cov : bool) (i j : Œπ) :
  decidable (coherent_indices cov i j) :=
by { cases cov; dsimp [coherent_indices]; apply_instance }

def d_aux (i j : Œπ) :
  Œ† (cov : bool) (C : differential_object' cov) (h : coherent_indices cov i j),
  C.X i ‚ü∂ C.X j
| tt C h := C.differential i ‚â´ eq_to_hom (congr_arg C.X h)
| ff C h := eq_to_hom (congr_arg C.X h) ‚â´ C.differential j

variables [decidable_eq Œπ]

def d {cov : bool} (C : differential_object' cov) (i j : Œπ) : C.X i ‚ü∂ C.X j :=
if h : coherent_indices cov i j then d_aux i j cov C h else 0

variables (C C‚ÇÅ C‚ÇÇ C‚ÇÉ : differential_object' cov)

lemma d_eq_zero (i j : Œπ) (h : ¬¨ coherent_indices cov i j) : C.d i j = 0 :=
dif_neg h

@[simp]
lemma d_comp_d (i j k : Œπ) : C.d i j ‚â´ C.d j k = 0 :=
begin
  cases cov; dsimp [d]; split_ifs with h1 h2,
  any_goals { simp only [zero_comp, comp_zero] },
  all_goals { cases h1, cases h2, simpa [d_aux] using C.differential2 _ _ rfl }
end

variables {C‚ÇÅ C‚ÇÇ C‚ÇÉ}

@[reassoc]
lemma hom.comm (f : C‚ÇÅ ‚ü∂ C‚ÇÇ) (i j : Œπ) :
  C‚ÇÅ.d i j ‚â´ f.f j = f.f i ‚â´ C‚ÇÇ.d i j :=
begin
  cases cov; dsimp [d]; split_ifs with h,
  any_goals { simp only [zero_comp, comp_zero] },
  all_goals { cases h, simpa [d_aux] using f.comm' _ }
end

end differential_object

section special_cases

variables [has_succ Œπ] [category V] [has_zero_morphisms V]

local notation `differential_object'` cov :=
differential_object Œπ (bool.rec ≈û id cov) (bool.rec id ≈û cov) V

abbreviation chain_complex := differential_object' ff

abbreviation cochain_complex := differential_object' tt

variables {Œπ V} [decidable_eq Œπ]

namespace chain_complex

variables (C : chain_complex Œπ V) (i j k : Œπ)

def d : C.X i ‚ü∂ C.X j := @differential_object.d Œπ V _ _ _ _ ff C i j

lemma d_eq_zero (i j : Œπ) (h : i ‚â† ≈û j) : C.d i j = 0 :=
differential_object.d_eq_zero _ _ _ h

@[simp] lemma d_comp_d : C.d i j ‚â´ C.d j k = 0 :=
differential_object.d_comp_d _ _ _ _

@[reassoc]
lemma hom.comm {C‚ÇÅ C‚ÇÇ : chain_complex Œπ V} (f : C‚ÇÅ ‚ü∂ C‚ÇÇ) (i j : Œπ) :
  C‚ÇÅ.d i j ‚â´ f.f j = f.f i ‚â´ C‚ÇÇ.d i j :=
differential_object.hom.comm f i j

end chain_complex

namespace cochain_complex

variables (C : cochain_complex Œπ V) (i j k : Œπ)

def d : C.X i ‚ü∂ C.X j := @differential_object.d Œπ V _ _ _ _ tt C i j

lemma d_eq_zero (i j : Œπ) (h : ≈û i ‚â† j) : C.d i j = 0 :=
differential_object.d_eq_zero _ _ _ h

@[simp] lemma d_comp_d : C.d i j ‚â´ C.d j k = 0 :=
differential_object.d_comp_d _ _ _ _

@[reassoc]
lemma hom.comm {C‚ÇÅ C‚ÇÇ : cochain_complex Œπ V} (f : C‚ÇÅ ‚ü∂ C‚ÇÇ) (i j : Œπ) :
  C‚ÇÅ.d i j ‚â´ f.f j = f.f i ‚â´ C‚ÇÇ.d i j :=
differential_object.hom.comm f i j

end cochain_complex

end special_cases

namespace differential_object

variables {Œπ V} [has_succ Œπ] [category V] [preadditive V]

open category_theory.preadditive

section general

local notation `differential_object'` cov :=
differential_object Œπ (bool.rec ≈û id cov) (bool.rec id ≈û cov) V

def shift_differential : Œ† {cov : bool} (C : differential_object' cov) (i : Œπ),
  C.X (≈û (bool.rec ≈û id cov i)) ‚ü∂ C.X (≈û (bool.rec id ≈û cov i))
| ff C i := -C.differential (≈û i)
| tt C i := -C.differential (≈û i)

@[simps]
def shift : (differential_object' cov) ‚•§ differential_object' cov :=
{ obj := Œª C,
  { X := Œª i, C.X (≈û i),
    differential := shift_differential C,
    differential2 := Œª i j h,
    begin
      cases cov; cases h; dsimp only [shift_differential];
      simp only [neg_comp, comp_neg, neg_neg];
      apply C.differential2; refl
    end },
  map := Œª C‚ÇÅ C‚ÇÇ f,
  { f := Œª i, f.f (≈û i),
    comm' := Œª i,
    begin
      cases cov; dsimp only [shift_differential];
      simp only [neg_comp, comp_neg, neg_inj];
      exact f.comm' (≈û i)
    end } }

end general

section int

local notation `differential_object'` cov :=
differential_object ‚Ñ§ (bool.rec ≈û id cov) (bool.rec id ≈û cov) V

def antishift_differential : Œ† {cov : bool} (C : (differential_object' cov)) (i : ‚Ñ§),
  C.X ((bool.rec ≈û id cov i) - 1) ‚ü∂ C.X ((bool.rec id ≈û cov i) - 1)
| ff C i := -eq_to_hom (congr_arg _ (sub_add_eq_add_sub i 1 1).symm) ‚â´ C.differential (i-1)
| tt C i := -C.differential (i-1) ‚â´ eq_to_hom (congr_arg _ $ sub_add_eq_add_sub i 1 1)

@[simps]
def antishift : (differential_object' cov) ‚•§ differential_object' cov :=
{ obj := Œª C,
  { X := Œª i, C.X (i-1),
    differential := antishift_differential C,
    differential2 := Œª i j h,
    begin
      cases cov; cases h; dsimp [antishift_differential];
      simp only [category.id_comp, category.comp_id, comp_neg, neg_comp, neg_neg, eq_to_hom_refl],
      { slice_lhs 2 4 { erw C.differential2 (j+1-1) (j-1) (sub_add_eq_add_sub j 1 1).symm },
        rw comp_zero },
      { slice_lhs 1 3 { erw C.differential2 (i-1) (i+1-1) (sub_add_eq_add_sub i 1 1) },
        rw zero_comp }
    end },
  map := Œª C‚ÇÅ C‚ÇÇ f,
  { f := Œª i, f.f (i-1),
    comm' := Œª i,
    begin
      cases cov; dsimp [antishift_differential];
      simp only [neg_comp, comp_neg, neg_inj],
      { erw [category.assoc, f.comm' (i-1), eq_to_hom_f_assoc],
        exact (sub_add_eq_add_sub i 1 1).symm },
      { erw [‚Üê f.comm'_assoc (i-1), category.assoc, eq_to_hom_f], refl,
        exact (sub_add_eq_add_sub i 1 1), },
    end } }

instance : has_shift (differential_object ‚Ñ§ (bool.rec ≈û id cov) (bool.rec id ≈û cov) V) :=
{ shift :=
  { functor := shift,
    inverse := antishift,
    unit_iso := nat_iso.of_components
      (Œª C, iso_of_components
        (Œª i, eq_to_iso $ congr_arg _ (sub_add_cancel i 1).symm)
        (Œª i,
        begin
          cases cov; dsimp [shift_differential, antishift_differential];
          simp only [neg_comp, comp_neg, neg_neg, eq_to_hom_trans_assoc],
          { erw [eq_to_hom_differential], refl, exact (sub_add_cancel i 1).symm },
          { erw [‚Üê category.assoc, eq_to_hom_differential, category.assoc, eq_to_hom_trans] }
        end))
      (Œª C‚ÇÅ C‚ÇÇ f, by { ext i, dsimp, rw eq_to_hom_f }),
    counit_iso := nat_iso.of_components
      (Œª C, iso_of_components
        (Œª i, eq_to_iso $ show C.X (i+1-1) = C.X i, from congr_arg _ (add_sub_cancel i 1))
        (Œª i,
        begin
          cases cov; dsimp [shift_differential, antishift_differential];
          simp only [neg_comp, comp_neg, neg_neg, eq_to_hom_trans_assoc],
          { erw [category.assoc, ‚Üê eq_to_hom_differential, eq_to_hom_trans_assoc],
            refl, exact add_sub_cancel i 1 },
          { erw [category.assoc, eq_to_hom_trans, eq_to_hom_differential], refl }
        end))
      (Œª C‚ÇÅ C‚ÇÇ f, by { ext i, dsimp, rw ‚Üê eq_to_hom_f }),
    functor_unit_iso_comp' :=
    by { intros, ext i, dsimp, simp only [eq_to_hom_refl, eq_to_hom_trans] } } }

end int

end differential_object

namespace chain_complex

variables {V} [category V] [preadditive V]

instance : has_shift (chain_complex ‚Ñ§ V) :=
@differential_object.category_theory.has_shift V ff _ _

end chain_complex

namespace cochain_complex

variables {V} [category V] [preadditive V]

instance : has_shift (cochain_complex ‚Ñ§ V) :=
@differential_object.category_theory.has_shift V tt _ _

end cochain_complex
