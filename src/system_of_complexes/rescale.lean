import system_of_complexes.basic
import rescale.normed_group
/-!

# rescaling norms on a system of complexes

This file defines the `rescale` functor which will take a system of complexes of seminormed groups
and systematically rescale all the norms on all the seminormed groups by a constant factor.

-/
noncomputable theory

universe variables u

open category_theory
open_locale nat nnreal

namespace nnreal

def MulLeft (Œ∫ : ‚Ñù‚â•0) : ‚Ñù‚â•0 ‚•§ ‚Ñù‚â•0 :=
{ obj := Œª c, Œ∫ * c,
  map := Œª c‚ÇÅ c‚ÇÇ h, hom_of_le $ mul_le_mul' le_rfl (le_of_hom h) }

def MulRight (Œ∫ : ‚Ñù‚â•0) : ‚Ñù‚â•0 ‚•§ ‚Ñù‚â•0 :=
{ obj := Œª c, c * Œ∫,
  map := Œª c‚ÇÅ c‚ÇÇ h, hom_of_le $ mul_le_mul' (le_of_hom h) le_rfl }

end nnreal

namespace system_of_complexes

def rescale (r : ‚Ñù‚â•0) [fact (0 < r)] : system_of_complexes.{u} ‚•§ system_of_complexes.{u} :=
(whiskering_right _ _ _).obj $ (SemiNormedGroup.rescale r).map_homological_complex _

lemma rescale_obj (r c : ‚Ñù‚â•0) [fact (0 < r)] (C : system_of_complexes) (i : ‚Ñï) :
  ‚Ü•(((rescale r).obj C) c i) = _root_.rescale r (C c i) := rfl

lemma rescale_d (r c : ‚Ñù‚â•0) [fact (0 < r)] (C : system_of_complexes) (i j : ‚Ñï)
  (v : (((rescale r).obj C) c i)) :
  (((rescale r).obj C).d i j) v = @rescale.of r _ ((C.d i j) (((@rescale.of r _).symm) v)) :=
rfl

instance rescale.additive (r : ‚Ñù‚â•0) [fact (0 < r)] : (rescale r).additive :=
{ map_add' := Œª X Y f g, by { ext, refl } } -- a heavy refl
.

-- can we golf this? speed it up?
def to_rescale (r : ‚Ñù‚â•0) [fact (0 < r)] : ùü≠ system_of_complexes ‚ü∂ rescale r :=
{ app := Œª C,
  { app := Œª c,
    { f := Œª _, (SemiNormedGroup.to_rescale r).app _,
      comm' := by { intros, exact ((SemiNormedGroup.to_rescale r).naturality _).symm } },
    naturality' := by { intros c‚ÇÅ c‚ÇÇ h, ext i : 2, refl } },
  naturality' := Œª C‚ÇÅ C‚ÇÇ f, by { ext, refl } }
.

def scale (i j : ‚Ñù‚â•0) [fact (0 < i)] [fact (0 < j)] : rescale i ‚ü∂ rescale j :=
(whiskering_right _ _ _).map $ nat_trans.map_homological_complex (SemiNormedGroup.scale i j) _

section exact_and_admissible

variables {k K : ‚Ñù‚â•0} [fact (1 ‚â§ k)] {m : ‚Ñï} {c‚ÇÄ : ‚Ñù‚â•0}

lemma rescale_is_weak_bounded_exact (r : ‚Ñù‚â•0) [hr : fact (0 < r)] (C : system_of_complexes)
  (hC : C.is_weak_bounded_exact k K m c‚ÇÄ) :
  ((rescale r).obj C).is_weak_bounded_exact k K m c‚ÇÄ :=
begin
  intros c hc i hi x Œµ hŒµ,
  obtain ‚ü®_, _, rfl, rfl, y, hy‚ü© := hC c hc i hi ((@rescale.of r _).symm x) (Œµ * r) _,
  swap, { exact mul_pos hŒµ hr.out },
  refine ‚ü®_, _, rfl, rfl, (@rescale.of r _) y, _‚ü©,
  erw [rescale.norm_def, rescale.norm_def],
  rwa [div_le_iff, add_mul, mul_assoc, div_mul_cancel],
  { apply ne_of_gt, exact hr.out },
  { exact hr.out },
end
.
/-- `rescale C` is admissible if `C` is. -/
lemma rescale_admissible (r : ‚Ñù‚â•0) [fact (0 < r)] (C : system_of_complexes) (hC : C.admissible) :
  ((rescale r).obj C).admissible :=
{ d_norm_noninc' := begin
    rintro c i j h,
    rintro (v : _root_.rescale r (C c i)), -- rw rescale_obj gives motive issues
    rw [rescale_d, rescale.norm_def, rescale.norm_def, equiv.symm_apply_apply],
    refine div_le_div_of_le_of_nonneg _ _,
    { apply hC.d_norm_noninc' c i j h},
    { exact nnreal.coe_nonneg r },
  end,
  res_norm_noninc := Œª c' c i h v, div_le_div_of_le_of_nonneg
    (hC.res_norm_noninc c' c i h _) (nnreal.coe_nonneg r) }

end exact_and_admissible

instance (m : ‚Ñï) : fact (0 < m!) :=
‚ü®nat.factorial_pos _‚ü©

def rescale_functor : ‚Ñï ‚Üí (system_of_complexes ‚•§ system_of_complexes)
| 0     := ùü≠ _
| 1     := ùü≠ _
| (m+2) := rescale (m+2)!

instance rescale_functor.additive : Œ† m, (rescale_functor m).additive
| 0     := functor.id.additive
| 1     := functor.id.additive
| (m+2) := show (rescale (m+2)!).additive, from rescale.additive _

def rescale_nat_trans : Œ† i j, rescale_functor i ‚ü∂ rescale_functor j
| 0     1     := ùüô _
| 1     (j+2) := to_rescale (j+2)!
| (i+2) (j+2) := scale (i+2)! (j+2)!
| _     _     := 0

section scale_index

@[simps]
def ScaleIndexLeft (Œ∫ : ‚Ñù‚â•0) : system_of_complexes ‚•§ system_of_complexes :=
(whiskering_left _ _ _).obj (nnreal.MulLeft Œ∫).op

@[simp] lemma ScaleIndexLeft_apply (C : system_of_complexes) (Œ∫ c : ‚Ñù‚â•0) (i : ‚Ñï) :
  (ScaleIndexLeft Œ∫).obj C c i = C (Œ∫ * c) i := rfl

def scale_index_left (C : system_of_complexes) (Œ∫ : ‚Ñù‚â•0) := (ScaleIndexLeft Œ∫).obj C

lemma admissible.scale_index_left {C : system_of_complexes} (hC : C.admissible) (Œ∫ : ‚Ñù‚â•0) :
  (C.scale_index_left Œ∫).admissible :=
{ d_norm_noninc' := Œª c i j hij, (by { apply admissible.d_norm_noninc C hC (Œ∫ * c) i j, }),
  res_norm_noninc := Œª c‚ÇÅ c‚ÇÇ i hc, hC.res_norm_noninc _ _ i
    (by { resetI, dsimp, apply_instance }) }

lemma is_weak_bounded_exact.scale_index_left
  {C : system_of_complexes} {k K :‚Ñù‚â•0} {m : ‚Ñï} (c‚ÇÄ c‚ÇÅ: ‚Ñù‚â•0) [fact (1 ‚â§ k)]
  (hC : C.is_weak_bounded_exact k K m c‚ÇÄ) (Œ∫ : ‚Ñù‚â•0) [hŒ∫ : fact (c‚ÇÄ ‚â§ Œ∫ * c‚ÇÅ)]
  (C_adm : C.admissible) :
  (C.scale_index_left Œ∫).is_weak_bounded_exact k K m c‚ÇÅ :=
begin
  intros c hc i hi x Œµ hŒµ,
  dsimp [scale_index_left, ScaleIndexLeft_apply] at x,
  haveI aux1 : fact (k * (Œ∫ * c) ‚â§ Œ∫ * (k * c)) := ‚ü®(mul_left_comm _ _ _).le‚ü©,
  obtain ‚ü®i‚ÇÄ, j, hi‚ÇÄ, hj, y, hy‚ü© := hC (Œ∫ * c) _ i hi (res x) Œµ hŒµ,
  swap, { exact ‚ü®hŒ∫.1.trans $ fact.out _‚ü©, },
  refine ‚ü®i‚ÇÄ, j, hi‚ÇÄ, hj, y, _‚ü©,
  simp only [res_res, d_res] at hy,
  refine hy.trans (add_le_add (mul_le_mul le_rfl _ (norm_nonneg _) K.coe_nonneg) le_rfl),
  apply C_adm.res_norm_noninc,
end

@[simps]
def ScaleIndexRight (Œ∫ : ‚Ñù‚â•0) : system_of_complexes ‚•§ system_of_complexes :=
(whiskering_left _ _ _).obj (nnreal.MulRight Œ∫).op

@[simp] lemma ScaleIndexRight_apply (C : system_of_complexes) (Œ∫ c : ‚Ñù‚â•0) (i : ‚Ñï) :
  (ScaleIndexRight Œ∫).obj C c i = C (c * Œ∫) i := rfl

def scale_index_right (C : system_of_complexes) (Œ∫ : ‚Ñù‚â•0) := (ScaleIndexRight Œ∫).obj C

lemma admissible.scale_index_right {C : system_of_complexes} (hC : C.admissible) (Œ∫ : ‚Ñù‚â•0) :
  (C.scale_index_right Œ∫).admissible :=
{ d_norm_noninc' := Œª c i j hij, (by { apply admissible.d_norm_noninc C hC (c * Œ∫) i j, }),
  res_norm_noninc := Œª c‚ÇÅ c‚ÇÇ i hc, hC.res_norm_noninc _ _ i
    (by { resetI, dsimp, apply_instance }) }

lemma is_weak_bounded_exact.scale_index_right
  {C : system_of_complexes} {k K :‚Ñù‚â•0} {m : ‚Ñï} (c‚ÇÄ c‚ÇÅ : ‚Ñù‚â•0) [fact (1 ‚â§ k)]
  (hC : C.is_weak_bounded_exact k K m c‚ÇÄ) (Œ∫ : ‚Ñù‚â•0) [hŒ∫ : fact (c‚ÇÄ ‚â§ Œ∫ * c‚ÇÅ)]
  (C_adm : C.admissible) :
  (C.scale_index_right Œ∫).is_weak_bounded_exact k K m c‚ÇÅ :=
begin
  intros c hc i hi x Œµ hŒµ,
  dsimp [scale_index_right, ScaleIndexRight_apply] at x,
  haveI aux1 : fact (k * (c * Œ∫) ‚â§ k * c * Œ∫) := ‚ü®(mul_assoc _ _ _).ge‚ü©,
  obtain ‚ü®i‚ÇÄ, j, hi‚ÇÄ, hj, y, hy‚ü© := hC (c * Œ∫) _ i hi (res x) Œµ hŒµ,
  swap, { rw mul_comm, exact ‚ü®hŒ∫.1.trans $ fact.out _‚ü©, },
  refine ‚ü®i‚ÇÄ, j, hi‚ÇÄ, hj, y, _‚ü©,
  simp only [res_res, d_res] at hy,
  refine hy.trans (add_le_add (mul_le_mul le_rfl _ (norm_nonneg _) K.coe_nonneg) le_rfl),
  apply C_adm.res_norm_noninc,
end

end scale_index

end system_of_complexes

namespace thm95

def rescale_functor' : ‚Ñï ‚Üí ((‚Ñù‚â•0·µí·µñ ‚•§ SemiNormedGroup) ‚•§ (‚Ñù‚â•0·µí·µñ ‚•§ SemiNormedGroup))
| 0     := ùü≠ _
| 1     := ùü≠ _
| (m+2) := (whiskering_right _ _ _).obj (SemiNormedGroup.rescale (m+2)!)

instance rescale_functor'.additive : Œ† m, (rescale_functor' m).additive
| 0     := functor.id.additive
| 1     := functor.id.additive
| (m+2) := {}

def to_rescale' (r : ‚Ñù‚â•0) [fact (0 < r)] :
  ùü≠ (‚Ñù‚â•0·µí·µñ ‚•§ SemiNormedGroup) ‚ü∂ ((whiskering_right _ _ _).obj (SemiNormedGroup.rescale r)) :=
{ app := Œª V,
  { app := Œª c, (SemiNormedGroup.to_rescale r).app _,
    naturality' := by { intros c‚ÇÅ c‚ÇÇ h, dsimp, ext i : 2, refl } },
  naturality' := Œª C‚ÇÅ C‚ÇÇ f, by { ext, refl } }

@[simps app]
def scale' (i j : ‚Ñù‚â•0) [fact (0 < i)] [fact (0 < j)] :
  ((whiskering_right ‚Ñù‚â•0·µí·µñ _ _).obj (SemiNormedGroup.rescale i)) ‚ü∂
  ((whiskering_right ‚Ñù‚â•0·µí·µñ _ _).obj (SemiNormedGroup.rescale j)) :=
(whiskering_right ‚Ñù‚â•0·µí·µñ _ _).map $ SemiNormedGroup.scale i j

def rescale_nat_trans' : Œ† i j, rescale_functor' i ‚ü∂ rescale_functor' j
| 0     1     := ùüô _
| 1     (j+2) := to_rescale' (j+2)!
| (i+2) (j+2) := scale' (i+2)! (j+2)!
| _     _     := 0

end thm95
