import algebra.homology.chain_complex

import normed_group.NormedGroup
import algebra.ordered_group
import facts
import for_mathlib.category_theory

import tactic.gptf

universe variables v u
noncomputable theory
open opposite category_theory
open_locale nnreal

/-!
# Systems of complexes of normed abelian groups

In this file we define systems of complexes of normed abelian groups,
along the lines of Definition 9.3 of [Analytic].

## Main declarations

* `system_of_complexes`: a system of complexes of normed abelian groups.
* `is_bounded_exact`: an exactness criterion for such systems,
    requiring a suitable interplay between the norms and the algebraic properties of the system.
* `admissible`: such a system is *admissible* if all maps that occur in the system
    are norm-nonincreasing.
-/

-- TODO: at some point we can abstract the following definition over `NormedGroup` and `‚Ñù‚â•0`.
-- But I don't think that is relevant for this project.

/-- A system of complexes of normed abelian groups, indexed by `‚Ñù‚â•0`.
See also Definition 9.3 of [Analytic].

Implementation detail: `cochain_complex` assumes that the complex is indexed by `‚Ñ§`,
whereas we are interested in complexes indexed by `‚Ñï`.
We therefore set all objects indexed by negative integers to `0`, in our use case. -/
@[derive category_theory.category]
def system_of_complexes : Type* := ‚Ñù‚â•0·µí·µñ ‚•§ (cochain_complex NormedGroup)

variables {M M' N : system_of_complexes.{u}} (f : M ‚ü∂ M') (g : M' ‚ü∂ N)

instance : has_coe_to_fun system_of_complexes :=
‚ü®Œª C, ‚Ñù‚â•0 ‚Üí ‚Ñ§ ‚Üí NormedGroup, Œª C c i, (C.obj $ op c).X i‚ü©

/-- `f.apply c i` is application of the natural transformation `f`: $f_c^i : M_c^i ‚ü∂ N_c^i$. -/
def category_theory.has_hom.hom.apply (f : M ‚ü∂ N) {c : ‚Ñù‚â•0} {i : ‚Ñ§} : M c i ‚ü∂ N c i :=
(f.app (op c)).f i

instance hom_to_fun : has_coe_to_fun (M ‚ü∂ N) :=
‚ü®Œª f, Œ† {c : ‚Ñù‚â•0} {i : ‚Ñ§}, M c i ‚Üí N c i, Œª f {c} {i} x, f.apply x‚ü©

lemma system_of_complexes.map_sub (f : M ‚ü∂ N) {c i} (m m' : M c i) : f (m-m') = f m - f m' :=
normed_group_hom.map_sub _ _ _

/-- `f.apply c i` is application of the natural isomorphism `f`: $f_c^i : M_c^i ‚âÖ N_c^i$. -/
def category_theory.iso.apply (f : M ‚âÖ N) {c : ‚Ñù‚â•0} {i : ‚Ñ§} : M c i ‚âÖ N c i :=
pi.iso_app (differential_object.iso_app $ f.app $ op c) i

namespace system_of_complexes

section

open tactic

meta def nnreal_magic : tactic unit :=
do (assumption >> trace "by assumption" <|>
   `[rw ‚Üê nnreal.coe_le_coe at *, linarith] >> trace "by linarith") <|>
   `[simp [stupid_one, stupid_two, stupid_three, *]] <|>
   target >>= trace

meta def int_magic : tactic unit :=
do (assumption <|> tactic.interactive.ring1 none <|> tactic.interactive.refl) <|>
   target >>= trace

end

variables (C C‚ÇÅ C‚ÇÇ : system_of_complexes.{u})

/-- Convenience definition:
The identity morphism of an object in the system of complexes
when it is given by different indices that are not
definitionally equal. -/
def congr_hom {c c' : ‚Ñù‚â•0} {i i' : ‚Ñ§} (hc : c = c') (hi : i = i') :
  C c i ‚ü∂ C c' i' :=
eq_to_hom $ by { subst hc, subst hi }

/-- Convenience definition:
The identity morphism of an object in the system of complexes
when it is given by different indices that are not
definitionally equal. -/
def congr {C : system_of_complexes} {c c' : ‚Ñù‚â•0} {i i' : ‚Ñ§}
  (x : C c i) (hc : c = c' . nnreal_magic) (hi : i = i' . int_magic) :
  C c' i' :=
congr_hom _ hc hi x

/-- `res` is the restriction map `C c' i ‚ü∂ C c i` for a system of complexes `C`,
and nonnegative reals `c ‚â§ c'`. -/
def res {C : system_of_complexes} {c' c : ‚Ñù‚â•0} {i : ‚Ñ§} [h : fact (c ‚â§ c')] : C c' i ‚ü∂ C c i :=
(C.map (hom_of_le h).op).f i

variables {c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ : ‚Ñù‚â•0} (i i' i‚ÇÅ i‚ÇÇ i‚ÇÉ j j' : ‚Ñ§)

@[simp] lemma res_comp_res (h‚ÇÅ : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) (h‚ÇÇ : fact (c‚ÇÉ ‚â§ c‚ÇÇ)) :
  @res C _ _ i h‚ÇÅ ‚â´ @res C _ _ i h‚ÇÇ = @res C _ _ i (le_trans h‚ÇÇ h‚ÇÅ) :=
begin
  have := (category_theory.functor.map_comp C (hom_of_le h‚ÇÅ).op (hom_of_le h‚ÇÇ).op),
  rw [‚Üê op_comp] at this,
  delta res,
  erw this,
  refl,
end

@[simp] lemma res_res (h‚ÇÅ : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) (h‚ÇÇ : fact (c‚ÇÉ ‚â§ c‚ÇÇ)) (x : C c‚ÇÅ i) :
  @res C _ _ i h‚ÇÇ (res x) = @res C _ _ i (le_trans h‚ÇÇ h‚ÇÅ) x :=
by { rw ‚Üê (C.res_comp_res i h‚ÇÅ h‚ÇÇ), refl }

/-- `C.d` is the differential `C c i ‚ü∂ C c (i+1)` for a system of complexes `C`. -/
def differential (c : ‚Ñù‚â•0) (i j : ‚Ñ§) (hij : i + 1 = j) :
  C c i ‚ü∂ C c j :=
(C.obj $ op c).d i ‚â´ congr_hom _ rfl hij

local notation `d` := differential _ _ _ _ (by int_magic)

-- /-- `C.d` is the differential `C c i ‚ü∂ C c (i+1)` for a system of complexes `C`. -/
-- def d {C : system_of_complexes} {c : ‚Ñù‚â•0} {i : ‚Ñ§} :
--   C c i ‚ü∂ C c (i+1) :=
-- (C.obj $ op c).d i

lemma differential_rfl : differential C c‚ÇÅ i (i+1) rfl = (C.obj (op c‚ÇÅ)).d i :=
by { ext, refl }

lemma d_comp_d {c} (h : i‚ÇÅ + 1 = i‚ÇÇ) (h' : i‚ÇÇ + 1 = i‚ÇÉ) :
  (d : C c i‚ÇÅ ‚ü∂ C c i‚ÇÇ) ‚â´ (d : C c i‚ÇÇ ‚ü∂ C c i‚ÇÉ) = 0 :=
begin
  subst i‚ÇÇ, subst i‚ÇÉ,
  simp only [differential_rfl],
  exact homological_complex.d_squared _ _
end

lemma d_d {c} (h : i‚ÇÅ + 1 = i‚ÇÇ) (h' : i‚ÇÇ + 1 = i‚ÇÉ) (x : C c i‚ÇÅ) :
  (differential C c i‚ÇÇ _ (by int_magic) (d x : C c i‚ÇÇ) : C c i‚ÇÉ) = 0 :=
show ((d : C c i‚ÇÅ ‚ü∂ C c i‚ÇÇ) ‚â´ (d : C c i‚ÇÇ ‚ü∂ C c i‚ÇÉ)) x = 0,
by { rw d_comp_d, refl }

lemma d_comp_res (h : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) (hij : i + 1 = j) :
  d ‚â´ @res C _ _ j h = @res C _ _ i _ ‚â´ d :=
begin
  subst j,
  simp only [differential_rfl],
  exact homological_complex.comm_at (C.map (hom_of_le h).op) i,
end

lemma d_res (h : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) (hij : i + 1 = j) (x : C c‚ÇÅ i) :
  d (res x) = @res C _ _ j h (d x) :=
show (res ‚â´ d) x = (d ‚â´ res) x, by rw d_comp_res

section iso

variables (œï : M ‚âÖ N) (c : ‚Ñù‚â•0) (i)

lemma apply_hom_eq_hom_apply : (œï.apply.hom : M c i ‚ü∂ N c i) = œï.hom.apply := rfl

lemma apply_inv_eq_inv_apply : (œï.apply.inv : N c i ‚ü∂ M c i) = œï.inv.apply := rfl

@[simp] lemma hom_apply_comp_inv_apply :
  (œï.hom.apply : M c i ‚ü∂ N c i) ‚â´ œï.inv.apply = ùüô _ :=
by rw [‚Üê apply_hom_eq_hom_apply, ‚Üê apply_inv_eq_inv_apply, iso.hom_inv_id]

@[simp] lemma inv_apply_comp_hom_apply :
  (œï.inv.apply : N c i ‚ü∂ M c i) ‚â´ œï.hom.apply = ùüô _ :=
by rw [‚Üê apply_hom_eq_hom_apply, ‚Üê apply_inv_eq_inv_apply, iso.inv_hom_id]

@[simp] lemma inv_apply_hom_apply (x : M c i) :
  œï.inv.apply (œï.hom.apply x) = x :=
show ((œï.hom.apply : M c i ‚ü∂ N c i) ‚â´ œï.inv.apply) x = x,
by simp only [hom_apply_comp_inv_apply, coe_id, id.def]

@[simp] lemma hom_apply_inv_apply (x : N c i) :
  œï.hom (œï.inv x) = x :=
show ((œï.inv.apply : N c i ‚ü∂ M c i) ‚â´ œï.hom.apply) x = x,
by simp only [inv_apply_comp_hom_apply, coe_id, id.def]

end iso

variables (M M' N)

lemma d_apply (f : M ‚ü∂ N) {c : ‚Ñù‚â•0} {i j : ‚Ñ§} (hj : i + 1 = j) (m : M c i) :
  (d (f m) : N c j) = f (d m) :=
begin
  subst j,
  have h : ((M.obj (op c)).d i ‚â´ (f.app (op c)).f (i + 1)) m =
    (f.app (op c)).f (i + 1) ((M.obj (op c)).d i m),
  { exact coe_comp ((M.obj (op c)).d i) ((f.app (op c)).f (i + 1)) m },
  rwa [homological_complex.comm_at (f.app (op c)) i] at h,
end

lemma res_comp_apply (f : M ‚ü∂ N) (c c' : ‚Ñù‚â•0) [h : fact (c ‚â§ c')] (i : ‚Ñ§) :
  @res M c' c i _ ‚â´ f.apply = f.apply ‚â´ res :=
begin
  have step1 := f.naturality (hom_of_le h).op,
  have step2 := congr_arg differential_object.hom.f step1,
  exact congr_fun step2 i
end

lemma res_apply (f : M ‚ü∂ N) (c c' : ‚Ñù‚â•0) [h : fact (c ‚â§ c')] {i : ‚Ñ§} (m : M c' i) :
  @res N c' c _ _ (f m) = f (res m) :=
begin
  show (f.apply ‚â´ (@res N c' c _ _)) m = (@res M c' c _ _ ‚â´ (f.apply)) m,
  rw res_comp_apply
end

/-- A system of complexes is *admissible*
if all the differentials and restriction maps are norm-nonincreasing.

See Definition 9.3 of [Analytic]. -/
structure admissible (C : system_of_complexes) : Prop :=
(d_norm_noninc : ‚àÄ c i, (d : C c i ‚ü∂ C c (i+1)).norm_noninc)
(res_norm_noninc : ‚àÄ c' c i h, (@res C c' c i h).norm_noninc)

/-- `is_bounded_exact k K m c‚ÇÄ` is a predicate on systems of complexes.

A system of complexes `C` is `(k,K)`-exact in degrees `‚â§ m` for `c ‚â• c‚ÇÄ`*
if the following condition is satisfied:
For all `c ‚â• c‚ÇÄ` and all `x : C (k * c) i` with `i ‚â§ m` there is some `y : C c (i-1)`
(which is defined to be `0` when `i = 0`) such that `‚à•(C.res x) - (C.d y)‚à• ‚â§ K * ‚à•C.d x‚à•`.

See Definition 9.3 of [Analytic] (which coalesces the roles of `k` and `K`).

Implementation details:
* Because our chain complexes are indexed by `‚Ñ§` instead of `‚Ñï`,
  and we make sure that objects indexed by negative integers are `0`,
  we automatically take care of the parenthetical condition about `i = 0`.
* The original text bounds `i` as `i ‚â§ m`, and then requires `y : C c (i-1)`.
  We change this to `i < m` and `y : C c i`, because this has better definitional properties.
  (This is a hack around an inconvenience known as dependent type theory hell.) -/
def is_bounded_exact
  (k K : ‚Ñù‚â•0) (m : ‚Ñ§) [hk : fact (1 ‚â§ k)] (c‚ÇÄ : ‚Ñù‚â•0) : Prop :=
‚àÄ c ‚â• c‚ÇÄ, ‚àÄ i ‚â§ m,
‚àÄ x : C (k * c) i,
‚àÉ y : C c (i-1), ‚à•res x - d y‚à• ‚â§ K * ‚à•d x‚à•

/-- Weak version of `is_bounded_exact`. -/
def is_weak_bounded_exact
  (k K : ‚Ñù‚â•0) (m : ‚Ñ§) [hk : fact (1 ‚â§ k)] (c‚ÇÄ : ‚Ñù‚â•0) : Prop :=
‚àÄ c ‚â• c‚ÇÄ, ‚àÄ i ‚â§ m,
‚àÄ x : C (k * c) i,
‚àÄ Œµ : ‚Ñù, 0 < Œµ ‚Üí ‚àÉ y : C c (i-1), ‚à•res x - d y‚à• ‚â§ K * ‚à•d x‚à• + Œµ

namespace is_weak_bounded_exact

variables {C C‚ÇÅ C‚ÇÇ}
variables {k k' K K' : ‚Ñù‚â•0} {m m' : ‚Ñ§} {c‚ÇÄ c‚ÇÄ' : ‚Ñù‚â•0} [fact (1 ‚â§ k)] [fact (1 ‚â§ k')]

lemma of_le (hC : C.is_weak_bounded_exact k K m c‚ÇÄ)
  (hC_adm : C.admissible) (hk : k ‚â§ k') (hK : K ‚â§ K') (hm : m' ‚â§ m) (hc‚ÇÄ : c‚ÇÄ ‚â§ c‚ÇÄ') :
  C.is_weak_bounded_exact k' K' m' c‚ÇÄ' :=
begin
  intros c hc i hi x Œµ Œµ_pos,
  haveI : fact (k ‚â§ k') := hk,
  obtain ‚ü®y, hy‚ü© := hC c (hc‚ÇÄ.trans hc) i (hi.trans hm) (res x) Œµ Œµ_pos,
  use y,
  simp only [res_res] at hy,
  refine le_trans hy _,
  rw d_res,
  apply add_le_add_right,
  exact mul_le_mul hK (hC_adm.res_norm_noninc _ _ _ _ (d x)) (norm_nonneg _) ((zero_le K).trans hK)
end

lemma to_exact (hC : C.is_weak_bounded_exact k K m c‚ÇÄ) {Œ¥ : ‚Ñù‚â•0} (hŒ¥ : 0 < Œ¥)
  (H : ‚àÄ c ‚â• c‚ÇÄ, ‚àÄ i ‚â§ m, ‚àÄ x : C (k * c) i, d x = 0 ‚Üí ‚àÉ y : C c (i-1), res x = d y) :
  C.is_bounded_exact k (K + Œ¥) m c‚ÇÄ :=
begin
  intros c hc i hi x,
  by_cases hdx : d x = 0,
  { rcases H c hc i hi x hdx with ‚ü®y, hy‚ü©,
    exact ‚ü®y, by simp only [hy, hdx, norm_zero, mul_zero, sub_self]‚ü© },
  { have : ((K + Œ¥ : ‚Ñù‚â•0) : ‚Ñù) * ‚à•d x‚à• = K * ‚à•d x‚à• + Œ¥ * ‚à•d x‚à•,
    by simp only [add_mul, nnreal.coe_add],
    simp_rw this,
    refine hC c hc i hi x (Œ¥*‚à•d x‚à•) _,
    exact (mul_pos (by exact_mod_cast hŒ¥) $ norm_pos_iff.mpr hdx) },
end

end is_weak_bounded_exact

namespace is_bounded_exact

variables {C C‚ÇÅ C‚ÇÇ}
variables {k k' K K' : ‚Ñù‚â•0} {m m' : ‚Ñ§} {c‚ÇÄ c‚ÇÄ' : ‚Ñù‚â•0} [fact (1 ‚â§ k)] [fact (1 ‚â§ k')]

lemma of_le (hC : C.is_bounded_exact k K m c‚ÇÄ)
  (hC_adm : C.admissible) (hk : k ‚â§ k') (hK : K ‚â§ K') (hm : m' ‚â§ m) (hc‚ÇÄ : c‚ÇÄ ‚â§ c‚ÇÄ') :
  C.is_bounded_exact k' K' m' c‚ÇÄ' :=
begin
  intros c hc i hi x,
  haveI : fact (k ‚â§ k') := hk,
  obtain ‚ü®y, hy‚ü© := hC c (hc‚ÇÄ.trans hc) i (hi.trans hm) (res x),
  use y,
  simp only [res_res] at hy,
  refine le_trans hy _,
  rw d_res,
  exact mul_le_mul hK (hC_adm.res_norm_noninc _ _ _ _ (d x)) (norm_nonneg _) ((zero_le K).trans hK)
end

lemma of_iso (h : C‚ÇÅ.is_bounded_exact k K m c‚ÇÄ) (f : C‚ÇÅ ‚âÖ C‚ÇÇ)
  (hf : ‚àÄ c i, (f.hom.apply : C‚ÇÅ c i ‚ü∂ C‚ÇÇ c i).is_strict) :
  C‚ÇÇ.is_bounded_exact k K m c‚ÇÄ :=
begin
  intros c hc i hi x,
  obtain ‚ü®y, hy‚ü© := h c hc i hi (f.inv.apply x),
  refine ‚ü®f.hom y, _‚ü©,
  calc  ‚à•res x - d (f.hom y)‚à•
      = ‚à•res x - f.hom (d y)‚à• : by rw d_apply
  ... = ‚à•f.hom (f.inv (res x)) - f.hom (d y)‚à• : by rw hom_apply_inv_apply
  ... = ‚à•f.hom (f.inv (res x) - d y)‚à• : by congr ; exact (f.hom.apply.map_sub _ _).symm
  ... = ‚à•f.inv (res x) - d y‚à• : hf _ _ _
  ... = ‚à•res (f.inv x) - d y‚à• : by rw res_apply
  ... ‚â§ K * ‚à•d (f.inv x)‚à• : hy
  ... = K * ‚à•d x‚à• : congr_arg _ _,
  calc  ‚à•d (f.inv x)‚à•
      = ‚à•f.inv (d x)‚à• : by rw d_apply
  ... = ‚à•f.hom (f.inv (d x))‚à• : (hf _ _ _).symm
  ... = ‚à•d x‚à• : by rw hom_apply_inv_apply
end

end is_bounded_exact

section quotient

open normed_group_hom

variables {M M'}

/-- The quotient of a system of complexes. -/
def is_quotient (f : M ‚ü∂ M') : Prop :=
‚àÄ c i, normed_group_hom.is_quotient (f.apply : M c i ‚ü∂ M' c i)

-- The next three lemmas restate lemmas about normed_group_hom.is_quotient in terms of the coercion
-- of `M ‚ü∂ M'` to functions.

lemma is_quotient.surjective {f : M ‚ü∂ M'} (h : is_quotient f) {c i} (m' : M' c i) :
  ‚àÉ m : M c i, f m = m' := (h c i).surjective m'

lemma is_quotient.norm_lift {f : M ‚ü∂ M'} (h : is_quotient f) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {c i}
  (n : M' c i) : ‚àÉ (m : M c i), f m = n ‚àß ‚à•m‚à• < ‚à•n‚à• + Œµ :=
quotient_norm_lift (h c i) hŒµ n

lemma is_quotient.norm_le {f : M ‚ü∂ M'} (h : is_quotient f) {c i} (m : M c i) : ‚à•f m‚à• ‚â§ ‚à•m‚à• :=
quotient_norm_le (h c i) _

/-- The quotient of an admissible system of complexes is admissible. -/
lemma admissible_of_quotient {f : M ‚ü∂ M'} (hquot : is_quotient f) (hadm : M.admissible) :
  M'.admissible :=
begin
  split,
  { intros c i m',
    refine le_of_forall_pos_le_add _,
    intros Œµ hŒµ,
    obtain ‚ü®m, hm : f m = m' ‚àß ‚à•m‚à• < ‚à•m'‚à• + Œµ‚ü© := hquot.norm_lift hŒµ m',
    rw [‚Üê hm.1, d_apply],
    calc ‚à•f (d m)‚à• ‚â§ ‚à•d m‚à• : hquot.norm_le _
      ... ‚â§ ‚à•m‚à• : hadm.d_norm_noninc _ _ m
      ... ‚â§ ‚à•m'‚à• + Œµ : le_of_lt hm.2
      ... = ‚à•f m‚à• + Œµ : by rw [hm.1] },
  { intros c' c i hc m',
    letI h := hc,
    refine le_of_forall_pos_le_add _,
    intros Œµ hŒµ,
    obtain ‚ü®m, hm‚ü© := hquot.norm_lift hŒµ m',
    rw [‚Üê hm.1, res_apply],
    calc ‚à•f (res m)‚à• ‚â§ ‚à•res m‚à• : hquot.norm_le _
      ... ‚â§ ‚à•m‚à• : hadm.res_norm_noninc c' c _ hc m
      ... ‚â§ ‚à•m'‚à• + Œµ : le_of_lt hm.2
      ... = ‚à•f m‚à• + Œµ : by rw [hm.1] }
end

end quotient

end system_of_complexes

-- #lint- only unused_arguments def_lemma doc_blame
