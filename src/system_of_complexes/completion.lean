import analysis.specific_limits
import system_of_complexes.basic
import locally_constant.Vhat

open finset filter
open_locale nnreal big_operators topological_space

namespace system_of_complexes

universe variables u
variables (C C‚ÇÅ C‚ÇÇ : system_of_complexes.{u})
variables {k k' K K' : ‚Ñù‚â•0} {m m' : ‚Ñ§} {c‚ÇÄ c‚ÇÄ' : ‚Ñù‚â•0} [fact (1 ‚â§ k)] [fact (1 ‚â§ k')]

noncomputable def completion : system_of_complexes :=
C ‚ãô NormedGroup.Completion.pushforward_homological_complex

namespace is_weak_bounded_exact

lemma controlled_y (hC : C.is_weak_bounded_exact k K m c‚ÇÄ) :
‚àÄ c ‚â• c‚ÇÄ, ‚àÄ i < m,
‚àÄ x : C (k^2 * c) (i+1),
‚àÄ (Œµ > 0) (Œ¥ > 0), ‚àÉ y : C c i, ‚à•res x - d y‚à• ‚â§ K * ‚à•d x‚à• + Œµ ‚àß ‚à•y‚à• ‚â§ K*(K + 1)*‚à•x‚à• + Œ¥ :=
sorry

lemma completion (hC : C.is_weak_bounded_exact k K m c‚ÇÄ) :
 C.completion.is_weak_bounded_exact (k^2) K m c‚ÇÄ :=
sorry

lemma strong_of_complete (hC : C.is_weak_bounded_exact k K m c‚ÇÄ)
  (hC' : admissible C) [‚àÄ c i, complete_space (C c i)] :
  ‚àÄ Œ¥ > 0, C.is_bounded_exact (k^2) (K + Œ¥) m c‚ÇÄ :=
begin
  intros Œ¥ hŒ¥,
  suffices : ‚àÄ c ‚â• c‚ÇÄ, ‚àÄ i < m - 1, ‚àÄ x : C (k * (k * c)) (i + 1 + 1), d x = 0 ‚Üí ‚àÉ y : C c (i + 1), res x = d y,
  { apply is_weak_bounded_exact.to_exact _ hŒ¥,
    intros c hc i hi x hx,
    haveI : fact (k * (k * c) ‚â§ k ^ 2 * c) := by { show _ ‚â§ _, convert le_refl _ using 1, ring},
    rcases this c hc i hi (res x) _ with ‚ü®y, hy‚ü©,
    use [y, by simpa using hy],
    simp [C.d_res, hx],
    apply hC.of_le hC' _ (le_refl _) (le_refl _) (le_refl _),
    -- nnreal hell now
    have : (1 : ‚Ñù) ‚â§ k, assumption,
    suffices : (k : ‚Ñù) ‚â§ k^2, exact_mod_cast this,
    rw pow_two,
    conv_lhs { rw ‚Üê mul_one (k : ‚Ñù) },
    apply mul_le_mul ; linarith },
  intros c hc i hi x hx,
  haveI : fact (k * c ‚â§ k ^ 2 * c) := by { rw [pow_two, mul_assoc], apply_instance },
  have fact‚ÇÅ : k * c ‚â• c‚ÇÄ,
  calc c‚ÇÄ ‚â§ c : hc
  ... ‚â§ 1*c : by rw one_mul
  ... ‚â§ k*c : mul_le_mul' _inst_1 (le_refl _),
  let K' := if K = 0 then 1 else K,
  have hK' : (0 : ‚Ñù) < K',
  { dsimp [K'],
    split_ifs,
    norm_num,
    exact zero_lt_iff.mpr h },
  let Œµ : ‚Ñï ‚Üí ‚Ñù := Œª j, (1/2*(1 /  2) ^ j) / K' / 2,
  have Œµ_pos : ‚àÄ j, 0 < Œµ j,
  { intro j,
    dsimp [Œµ],
    refine div_pos (div_pos (mul_pos _ _) hK') zero_lt_two; norm_num },
  have Œµ_decr : ‚àÄ j, Œµ (j+1) ‚â§ Œµ j,
  { intros j,
    dsimp [Œµ],
    field_simp,
    apply one_div_le_one_div_of_le;
    norm_num [hK', pow_succ],
    calc (2 : ‚Ñù)^j = 1*2^j : (one_mul _).symm
       ... ‚â§ 2*2^j : mul_le_mul_of_nonneg_right one_le_two (pow_nonneg zero_le_two _) },
  have seq : ‚àÄ j : ‚Ñï, ‚àÉ w : C (k*c) (i + 1), ‚à•res x - d w‚à• ‚â§ Œµ j,
  { intro j,
    convert hC (k*c) fact‚ÇÅ (i + 1) (by linarith) x (Œµ j) (Œµ_pos j),
    simp only [hx, norm_zero, zero_add, mul_zero] },
  choose w hw using seq,
  let Œ¥ : ‚Ñï ‚Üí ‚Ñù := Œª j, 1/2*(1/2) ^ j,
  have Œ¥_pos : ‚àÄ j, 0 < Œ¥ j,
    by norm_num [Œ¥],
  have hŒµŒ¥ : ‚àÄ j, (K : ‚Ñù) * (2 * Œµ j) + Œ¥ j ‚â§ 1 * (1 / 2) ^ j,
  { intro j,
    dsimp [Œµ, Œ¥],
    conv_rhs { congr, rw [show (1 : ‚Ñù) = 1/2 + 1/2, by norm_num] },
    rw add_mul (1/2 : ‚Ñù) (1/2),
    by_cases hK : K = 0,
    { simp only [hK, div_zero, nnreal.coe_zero, zero_div, zero_add, le_add_iff_nonneg_left, mul_zero, K', if_pos, zero_mul],
      apply mul_nonneg,
      norm_num,
      apply pow_nonneg,
      norm_num },
    { apply le_of_eq,
      congr' 1,
      simp only [K', if_neg hK],
      rw [mul_div_cancel' _ (two_ne_zero : (2 : ‚Ñù) ‚â† 0),
          mul_div_cancel' _ (nnreal.coe_ne_zero.mpr hK)]} },
  have seq : ‚àÄ j : ‚Ñï, ‚àÉ z : C c i, ‚à•res (w (j+1) - w j) - d z‚à• ‚â§ K*‚à•d(w (j+1) - w j)‚à• + Œ¥ j,
    from Œª j, hC c hc i (by linarith) _ _ (Œ¥_pos j),
  choose z hz using seq,
  let y : ‚Ñï ‚Üí C c (i+1) := Œª j, res (w j) - ‚àë l in range j, d (z l),
  have cau_y : cauchy_seq y,
  { apply cauchy_seq_of_le_geometric (1/(2 : ‚Ñù)) 1 (half_lt_self zero_lt_one),
    intros j,
    have fact : ‚à•d (w (j + 1) - w j)‚à• ‚â§ 2*Œµ j :=
    calc ‚à•d (w (j + 1) - w j)‚à• = ‚à•(d (w (j + 1)) - res x) + (res x - d (w j))‚à• : by {congr' 1, rw d.map_sub, abel}
    ... ‚â§ ‚à•d (w (j + 1)) - res x‚à• + ‚à•res x - d (w j)‚à• : norm_add_le _ _
    ... = ‚à•res x - d (w (j + 1))‚à• + ‚à•res x - d (w j)‚à• : by { rw norm_sub_rev }
    ... ‚â§ Œµ (j+1) + Œµ j : add_le_add (hw $ j+1) (hw j)
    ... ‚â§ 2*Œµ j : by linarith [Œµ_decr j],
    calc dist (y j) (y (j + 1)) = ‚à•y (j+1) - y j‚à• : by rw dist_eq_norm'
    ... = ‚à•res (w (j + 1)) - res (w j) - (‚àë (l : ‚Ñï) in range (j + 1), d (z l)
                                - ‚àë (l : ‚Ñï) in range j, d (z l))‚à• : by { dsimp [y], congr' 1, abel }
    ... = ‚à•res (w (j + 1) - (w j)) - d (z j)‚à• : by simp [res.map_sub, sum_range_succ]
    ... ‚â§ K * ‚à•d (w (j + 1) - w j)‚à• + Œ¥ j : hz j
    ... ‚â§ K * (2* Œµ j) + Œ¥ j : by {apply add_le_add_right, apply mul_le_mul_of_nonneg_left fact (nnreal.coe_nonneg K)}
    ... ‚â§ 1 * (1 / 2) ^ j : hŒµŒ¥ j },
  have hdyj : ‚àÄ j, d (y j) = res (d $ w j),
  { intro j,
    calc d (y j) = d(res (w j) - ‚àë l in range j, d (z l)) : rfl
    ... = d(res (w j)) - ‚àë l in range j, d(d (z l)) : by rw [d.map_sub, d.map_sum]
    ... = res (d (w j))  : by simp only [d_res, d_d, sum_const_zero, sub_zero] },

  have hblop : ‚àÄ j, ‚à•res x - d (y j)‚à•  ‚â§ Œµ j,
  { intro j,
    calc ‚à•res x - d (y j)‚à• = ‚à•res x - res (d $ w j)‚à• : by rw hdyj
    ... = ‚à•(res (res x : C (k*c) (i+1+1)) - res (d $ w j) : C c _)‚à• : by { rw  C.res_res }
    ... = ‚à•res (res x - (d $ w j))‚à• : by rw res.map_sub
    ... ‚â§ ‚à•res x - d (w j)‚à• : by apply hC'.res_norm_noninc
    ... ‚â§ Œµ j : hw _},

  rcases cauchy_seq_tendsto_of_complete cau_y with ‚ü®y‚ÇÄ, hy‚ÇÄ‚ü©,
  use y‚ÇÄ,
  apply eq_of_norm_sub_le_zero,
  have lim_norm : tendsto (Œª j, ‚à•res x - d (y j)‚à•) at_top (ùìù ‚à•res x - d y‚ÇÄ‚à•),
  { have cont : continuous (Œª y : C c (i+1), ‚à•res x - d y‚à•),
      from continuous_norm.comp (continuous_const.sub d.continuous),
    exact (cont.tendsto y‚ÇÄ).comp hy‚ÇÄ },
  have lim_Œµ : tendsto Œµ at_top (ùìù 0),
  { rw show (0 : ‚Ñù) = (1/2*0)/K'/2, by norm_num,
    refine (tendsto.const_mul (1 / 2) (tendsto_pow_at_top_nhds_0_of_lt_1 _ _)).div_const.div_const;
    norm_num },
  exact le_of_tendsto_of_tendsto' lim_norm lim_Œµ hblop,
end

end is_weak_bounded_exact

end system_of_complexes
