import category_theory.abelian.projective
import pseudo_normed_group.category
import topology.continuous_function.algebra

import algebra.group.ulift

import for_mathlib.abelian_sheaves.main

import condensed.adjunctions
import condensed.top_comparison

/-!
# Properties of the category of condensed abelian groups

-/

open category_theory category_theory.limits

universes v u

-- Move this!
def Ab.ulift : Ab.{u} ‚•§ Ab.{max v u} :=
{ obj := Œª M, AddCommGroup.of $ ulift.{v} M,
  map := Œª M N f,
  { to_fun := Œª x, ‚ü®f x.down‚ü©,
    map_zero' := by { ext1, apply f.map_zero },
    map_add' := Œª x y, by { ext1, apply f.map_add } },
  map_id' := by { intros, ext, dsimp, simp },
  map_comp' := by { intros, ext, dsimp, simp } }

namespace Condensed

--instance : preadditive (Condensed Ab.{u+1}) := by admit

noncomputable theory

-- Sanity check
example {J : Type (u+1)} [small_category J] [is_filtered J] :
  limits.preserves_colimits_of_shape J (forget Ab.{u+1}) := by apply_instance

-- this is now available in `condensed/projective_resolutions.lean`...
--instance : enough_projectives (Condensed Ab.{u+1}) := by admit

instance : is_right_adjoint (Sheaf_to_presheaf _ _ : Condensed Ab.{u+1} ‚•§ _) :=
{ left := presheaf_to_Sheaf _ _,
  adj := (sheafification_adjunction _ _) }

def forget_to_CondensedType : Condensed Ab.{u+1} ‚•§ CondensedSet :=
{ obj := Œª F, ‚ü®F.val ‚ãô forget _, begin
    cases F with F hF,
    rwa (presheaf.is_sheaf_iff_is_sheaf_forget _ _ (forget Ab)) at hF,
    apply_instance
  end ‚ü©,
  map := Œª A B f, ‚ü®whisker_right f.val _‚ü© }

instance : is_right_adjoint forget_to_CondensedType :=
{ left := CondensedSet_to_Condensed_Ab,
  adj := Condensed_Ab_CondensedSet_adjunction }

section

variables (A : Type u) [add_comm_group A] [topological_space A] [topological_add_group A]

def of_top_ab.presheaf : Profinite.{u}·µí·µñ ‚•§ Ab.{u} :=
{ obj := Œª S, ‚ü®C(S.unop, A)‚ü©,
  map := Œª S‚ÇÅ S‚ÇÇ f, add_monoid_hom.mk' (Œª g, g.comp f.unop) $ Œª g‚ÇÅ g‚ÇÇ, rfl,
  map_id' := by { intros, ext, refl },
  map_comp' := by { intros, ext, refl } }

/-- The condensed abelian group associated with a topological abelian group -/
def of_top_ab : Condensed.{u} Ab.{u+1} :=
{ val := of_top_ab.presheaf A ‚ãô Ab.ulift.{u+1},
  cond := begin
    rw category_theory.presheaf.is_sheaf_iff_is_sheaf_forget _ _ (forget Ab),
    swap, apply_instance,
    let B := Top.of A,
    change presheaf.is_sheaf _ B.to_Condensed.val,
    exact B.to_Condensed.cond,
  end }

end

end Condensed

namespace CompHausFiltPseuNormGrp‚ÇÅ

open_locale nnreal
open pseudo_normed_group comphaus_filtered_pseudo_normed_group

def presheaf (A : CompHausFiltPseuNormGrp‚ÇÅ.{u}) (S : Profinite.{u}) : Type u :=
{ f : S ‚Üí A // ‚àÉ (c : ‚Ñù‚â•0) (f‚ÇÄ : S ‚Üí filtration A c), continuous f‚ÇÄ ‚àß f = coe ‚àò f‚ÇÄ }

namespace presheaf

variables (A : CompHausFiltPseuNormGrp‚ÇÅ.{u}) (S : Profinite.{u})

@[ext]
lemma ext {A : CompHausFiltPseuNormGrp‚ÇÅ} {S : Profinite} (f g : presheaf A S) : f.1 = g.1 ‚Üí f = g :=
subtype.ext

instance : has_zero (presheaf A S) := ‚ü®‚ü®0, 0, 0, continuous_zero, rfl‚ü©‚ü©

instance : has_neg (presheaf A S) :=
‚ü®Œª f, ‚ü®-f.1,
  begin
    obtain ‚ü®_, c, f, hf, rfl‚ü© := f,
    refine ‚ü®c, Œª s, - f s, _, rfl‚ü©,
    exact (continuous_neg' c).comp hf
  end‚ü©‚ü©

instance : has_add (presheaf A S) :=
‚ü®Œª f g, ‚ü®f.1 + g.1,
  begin
    obtain ‚ü®_, cf, f, hf, rfl‚ü© := f,
    obtain ‚ü®_, cg, g, hg, rfl‚ü© := g,
    refine ‚ü®cf + cg, Œª s, ‚ü®f s + g s, add_mem_filtration (f s).2 (g s).2‚ü©, _, rfl‚ü©,
    have aux := (hf.prod_mk hg),
    exact (continuous_add' cf cg).comp aux,
  end‚ü©‚ü©

instance : has_sub (presheaf A S) :=
‚ü®Œª f g, ‚ü®f.1 - g.1,
  begin
    obtain ‚ü®_, cf, f, hf, rfl‚ü© := f,
    obtain ‚ü®_, cg, g, hg, rfl‚ü© := g,
    refine ‚ü®cf + cg, Œª s, ‚ü®f s - g s, sub_mem_filtration (f s).2 (g s).2‚ü©, _, rfl‚ü©,
    have aux := (hf.prod_mk ((continuous_neg' cg).comp hg)),
    simp only [sub_eq_add_neg],
    exact (continuous_add' cf cg).comp aux,
  end‚ü©‚ü©

variables {A S}

protected def nsmul (n : ‚Ñï) (f : presheaf A S) : presheaf A S :=
‚ü®n ‚Ä¢ f.1,
begin
  obtain ‚ü®_, c, f, hf, rfl‚ü© := f,
  refine ‚ü®n * c, Œª s, ‚ü®n ‚Ä¢ f s, nat_smul_mem_filtration _ _ _ (f s).2‚ü©, _, rfl‚ü©,
  exact continuous_nsmul _ _ _ hf,
end‚ü©

protected def zsmul (n : ‚Ñ§) (f : presheaf A S) : presheaf A S :=
‚ü®n ‚Ä¢ f.1,
begin
  obtain ‚ü®_, c, f, hf, rfl‚ü© := f,
  refine ‚ü®n.nat_abs * c, Œª s, ‚ü®n ‚Ä¢ f s, int_smul_mem_filtration _ _ _ (f s).2‚ü©, _, rfl‚ü©,
  exact continuous_zsmul _ _ _ hf,
end‚ü©

variables (A S)

instance : add_comm_group (presheaf A S) :=
{ zero := 0,
  add := (+),
  nsmul := presheaf.nsmul,
  zsmul := presheaf.zsmul,
  add_assoc := by { intros, ext, exact add_assoc _ _ _ },
  zero_add := by { intros, ext, exact zero_add _ },
  add_zero := by { intros, ext, exact add_zero _ },
  add_comm := by { intros, ext, exact add_comm _ _ },
  add_left_neg := by { intros, ext, exact add_left_neg _ },
  sub_eq_add_neg := by { intros, ext, exact sub_eq_add_neg _ _ },
  nsmul_zero' := by { intros, ext, exact zero_nsmul _ },
  nsmul_succ' := by { intros, ext, exact succ_nsmul _ _ },
  zsmul_zero' := by { intros, ext, exact zero_zsmul _ },
  zsmul_succ' := by { intros, ext, exact add_comm_group.zsmul_succ' _ _ },
  zsmul_neg' := by { intros, ext, exact add_comm_group.zsmul_neg' _ _ },
  .. presheaf.has_sub A S, .. presheaf.has_neg A S }

def comap (A : CompHausFiltPseuNormGrp‚ÇÅ) {S T : Profinite} (œÜ : S ‚ü∂ T) :
  presheaf A T ‚Üí+ presheaf A S :=
{ to_fun := Œª f, ‚ü®f.1 ‚àò œÜ,
  begin
    obtain ‚ü®_, c, f, hf, rfl‚ü© := f,
    refine ‚ü®c, f ‚àò œÜ, hf.comp œÜ.continuous, rfl‚ü©,
  end‚ü©,
  map_zero' := rfl,
  map_add' := by { intros, refl } }

def map {A B : CompHausFiltPseuNormGrp‚ÇÅ} (œÜ : A ‚ü∂ B) (S : Profinite) :
  presheaf A S ‚Üí+ presheaf B S :=
{ to_fun := Œª f, ‚ü®œÜ ‚àò f.1,
  begin
    obtain ‚ü®_, c, f, hf, rfl‚ü© := f,
    refine ‚ü®c, (level.obj c).map œÜ ‚àò f, (œÜ.level_continuous c).comp hf, rfl‚ü©,
  end‚ü©,
  map_zero' := by { ext, exact œÜ.map_zero },
  map_add' := by { intros, ext, exact œÜ.map_add _ _ } }

end presheaf

open opposite

def Presheaf (A : CompHausFiltPseuNormGrp‚ÇÅ.{u}) : Profinite.{u}·µí·µñ ‚•§ Ab :=
{ obj := Œª S, ‚ü®presheaf A (unop S)‚ü©,
  map := Œª S T œÜ, presheaf.comap A œÜ.unop,
  map_id' := by { intros, ext, refl },
  map_comp' := by { intros, ext, refl } }

def Presheaf.map {A B : CompHausFiltPseuNormGrp‚ÇÅ} (œÜ : A ‚ü∂ B) :
  Presheaf A ‚ü∂ Presheaf B :=
{ app := Œª S, presheaf.map œÜ (unop S),
  naturality' := by { intros, refl } }

@[simp]
lemma Presheaf.map_id (A : CompHausFiltPseuNormGrp‚ÇÅ) :
  Presheaf.map (ùüô A) = ùüô _ := by { ext, refl }

@[simp]
lemma Presheaf.map_comp {A B C : CompHausFiltPseuNormGrp‚ÇÅ} (f : A ‚ü∂ B) (g : B ‚ü∂ C) :
  Presheaf.map (f ‚â´ g) = Presheaf.map f ‚â´ Presheaf.map g := by { ext, refl }

set_option pp.universes true

def to_Condensed : CompHausFiltPseuNormGrp‚ÇÅ.{u} ‚•§ Condensed.{u} Ab.{u+1} :=
{ obj := Œª A,
  { val := Presheaf A ‚ãô Ab.ulift.{u+1},
    cond := sorry }, -- ‚Üê this one will be hard
  map := Œª A B f, ‚ü®whisker_right (Presheaf.map f) _‚ü©,
  map_id' := Œª X, by { ext : 2, dsimp, simp },
  map_comp' := Œª X Y Z f g, by { ext : 2, dsimp, simp } }

end CompHausFiltPseuNormGrp‚ÇÅ
