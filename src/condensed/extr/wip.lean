import condensed.extr.basic
import condensed.proetale_site
import condensed.basic
import category_theory.sites.induced_topology

import for_mathlib.presieve

open category_theory

universes u v' u'

def ExtrDisc.cover_dense :
  cover_dense proetale_topology.{u} ExtrDisc_to_Profinite.{u} :=
  cover_dense.mk $ Œª U,
begin
  change ‚àÉ R, _,
  obtain ‚ü®‚ü®T,hT,œÄ,hœÄ‚ü©‚ü© := enough_projectives.presentation U,
  dsimp at hT hœÄ,
  let R : presieve U := presieve.of_arrows (Œª i : punit, T) (Œª i, œÄ),
  use R,
  split,
  { refine ‚ü®punit, infer_instance, Œª i, T, Œª i, œÄ, Œª x, ‚ü®punit.star, _‚ü©, rfl‚ü©,
    rw Profinite.epi_iff_surjective at hœÄ,
    exact hœÄ x },
  intros Y f hf,
  change nonempty _,
  rcases hf with ‚ü®a,b‚ü©,
  let t : presieve.cover_by_image_structure ExtrDisc_to_Profinite œÄ := _,
  swap,
  { resetI,
    refine ‚ü®‚ü®T‚ü©, ùüô _, œÄ, by simp‚ü© },
  use t,
end

def ExtrDisc.proetale_topology : grothendieck_topology ExtrDisc.{u} :=
  ExtrDisc.cover_dense.induced_topology.{u}

@[derive category]
def ExtrSheaf (C : Type u') [category.{v'} C] := Sheaf ExtrDisc.proetale_topology.{u} C

-- TODO: cover_densed.Sheaf_equiv still has unecessary universe restrictions that can be relaxed.
noncomputable
def Condensed_ExtrSheaf_equiv (C : Type u') [category.{u+1} C] [limits.has_limits C] :
  ExtrSheaf.{u} C ‚âå Condensed.{u} C :=
ExtrDisc.cover_dense.Sheaf_equiv_of_cover_preserving_cover_lifting
  ExtrDisc.cover_dense.locally_cover_dense.induced_topology_cover_preserving
  ExtrDisc.cover_dense.locally_cover_dense.induced_topology_cover_lifting

-- Sanity check
@[simp] lemma Condensed_ExtrSheaf_equiv_inverse_val (C : Type u') [category.{u+1} C]
  [limits.has_limits C] (F : Condensed.{u} C) :
  ((Condensed_ExtrSheaf_equiv C).inverse.obj F).val = ExtrDisc_to_Profinite.op ‚ãô F.val := rfl

open opposite

def is_ExtrSheaf_of_types (P : ExtrDisc.{u}·µí·µñ ‚•§ Type u') : Prop :=
‚àÄ (B : ExtrDisc.{u}) (Œπ : Type u) [fintype Œπ] (Œ± : Œπ ‚Üí ExtrDisc.{u})
  (f : Œ† i, Œ± i ‚ü∂ B) (hf : ‚àÄ b : B, ‚àÉ i (x : Œ± i), f i x = b)
  (x : Œ† i, P.obj (op (Œ± i)))
  (hx : ‚àÄ (i j : Œπ) (Z : ExtrDisc) (g‚ÇÅ : Z ‚ü∂ Œ± i) (g‚ÇÇ : Z ‚ü∂ Œ± j),
    g‚ÇÅ ‚â´ f _ = g‚ÇÇ ‚â´ f _ ‚Üí P.map g‚ÇÅ.op (x _) = P.map g‚ÇÇ.op (x _)),
‚àÉ! t : P.obj (op B), ‚àÄ i, P.map (f i).op t = x _

theorem is_ExtrSheaf_of_types_of_is_sheaf_ExtrDisc_proetale_topology
  (F : ExtrDisc·µí·µñ ‚•§ Type u') (H : presieve.is_sheaf ExtrDisc.proetale_topology F) :
  is_ExtrSheaf_of_types F :=
begin
  introsI B Œπ _ X f hf x hx,
  let S : presieve B := presieve.of_arrows X f,
  specialize H (sieve.generate S) _,
  { dsimp [ExtrDisc.proetale_topology],
    let R : presieve B.val := presieve.of_arrows (Œª i, (X i).val) (Œª i, (f i).val),
    use R,
    split,
    { use [Œπ, infer_instance, (Œª i, (X i).val), (Œª i, (f i).val), hf, rfl] },
    { intros Y f hf,
      rcases hf with ‚ü®i‚ü©,
      use [X i, f i, ùüô _],
      refine ‚ü®_, by simp‚ü©,
      use [X i, ùüô _, (f i), presieve.of_arrows.mk i],
      simp } },
  rw ‚Üê presieve.is_sheaf_for_iff_generate at H,
  let t : S.family_of_elements F := presieve.mk_family_of_elements_of_arrows X f F x,
  have ht : t.compatible := presieve.mk_family_of_elements_of_arrows_compatible X f F x hx,
  specialize H t ht,
  -- now use H.
  obtain ‚ü®tt,htt,htt'‚ü© := H,
  refine ‚ü®tt,_,_‚ü©,
  { dsimp,
    intros i,
    specialize htt (f i) (presieve.of_arrows.mk i),
    rw htt,
    apply presieve.mk_family_of_elements_of_arrows_eval _ _ _ _ hx },
  { intros y hy,
    apply htt',
    intros Z f hf,
    rcases hf with ‚ü®i‚ü©,
    rw hy,
    symmetry,
    apply presieve.mk_family_of_elements_of_arrows_eval _ _ _ _ hx }
end

-- This is more or less proved in the profinite case, along with a condition
-- that equalizers should be compatible, while the equalizer condition in the
-- ExtrDisc case can be found (in some form) in `condensed/extr.lean`.
-- It will take some time to convert these proofs to this case, but this is
-- very doable!
theorem ExtrSheaf_iff_is_ExtrSheaf_of_types
  (F : ExtrDisc·µí·µñ ‚•§ Type u') (H : is_ExtrSheaf_of_types F) :
  presieve.is_sheaf ExtrDisc.proetale_topology F :=
begin
  sorry
  /-
  intros B S hS,
  change proetale_topology _ _ at hS,
  rw ExtrDisc.cover_dense.locally_cover_dense.pushforward_cover_iff_cover_pullback at hS,
  obtain ‚ü®‚ü®T,hT‚ü©,rfl‚ü© := hS,
  obtain ‚ü®R,hR,hRT‚ü© := hT,
  dsimp,
  let R' := presieve.functor_pullback ExtrDisc_to_Profinite R,
  have : R' ‚â§ sieve.functor_pullback ExtrDisc_to_Profinite T,
  { sorry },
  have h : sieve.generate R' ‚â§ sieve.functor_pullback ExtrDisc_to_Profinite T,
  { sorry },
  apply category_theory.presieve.is_sheaf_for_subsieve,
  rotate 2,
  exact sieve.generate R',
  exact h,
  intros Y f,
  let R'' : presieve Y := sorry,
  have : sieve.pullback f (sieve.generate R') =
    sieve.generate R'' := sorry,
  intros x hx,
  dsimp [R'] at x,
  obtain ‚ü®Œπ,_,X,œÄ,surj,rfl‚ü© := hR,
  resetI,
  -- Now choose a projective presentation of (P i) for all i, and project onto the first object.
  -- This gives a cover of Y, which we can plug in to H.
  let PP : Œπ ‚Üí ExtrDisc := Œª i, (Profinite.pullback f.val (œÄ i)).pres,
  let pp : Œ† i, PP i ‚ü∂ Y := Œª i,
    ‚ü®(Profinite.pullback f.val (œÄ i)).pres_œÄ ‚â´ Profinite.pullback.fst _ _‚ü©,
  let y : Œ† i, F.obj (op (PP i)) := Œª i, x (pp i) sorry,

  specialize H Y Œπ PP pp sorry y sorry,

  obtain ‚ü®t,h1,h2‚ü© := H,
  refine ‚ü®t,_,_‚ü©,
  { dsimp,
    intros W g hg,
    change ‚àÉ Q, _ at hg,
    obtain ‚ü®Q,q,r,hr,hq‚ü© := hg,
    change (presieve.of_arrows _ _) _ at hr,
    rw presieve.mem_of_arrows_iff at hr,
    obtain ‚ü®i,e,hh‚ü© := hr,
    dsimp [y] at h1,
    specialize h1 i,
    specialize hx q g,

  },
  { intros a ha,
    apply h2,
    intros i,
    apply ha }
  -/
end
