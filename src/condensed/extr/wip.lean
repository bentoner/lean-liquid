import condensed.extr.basic
import condensed.proetale_site
import condensed.basic
import category_theory.sites.induced_topology

import for_mathlib.presieve

open category_theory

universes u v' u'

set_option pp.universes true

def ExtrDisc.cover_dense :
  cover_dense proetale_topology.{u} ExtrDisc_to_Profinite.{u} :=
  cover_dense.mk $ Œª U,
begin
  change ‚àÉ R, _,
  obtain ‚ü®‚ü®T,hT,œÄ,hœÄ‚ü©‚ü© := enough_projectives.presentation U,
  dsimp at hT hœÄ,
  let R : presieve U := presieve.of_arrows (Œª i : punit, T) (Œª i, œÄ),
  use R,
  split,
  { refine ‚ü®punit, infer_instance, Œª i, T, Œª i, œÄ, Œª x, ‚ü®punit.star, _‚ü©, rfl‚ü©,
    rw Profinite.epi_iff_surjective at hœÄ,
    exact hœÄ x },
  intros Y f hf,
  change nonempty _,
  rcases hf with ‚ü®a,b‚ü©,
  let t : presieve.cover_by_image_structure ExtrDisc_to_Profinite œÄ := _,
  swap,
  { resetI,
    refine ‚ü®‚ü®T‚ü©, ùüô _, œÄ, by simp‚ü© },
  use t,
end

def ExtrDisc.proetale_topology : grothendieck_topology ExtrDisc.{u} :=
  ExtrDisc.cover_dense.induced_topology.{u}

@[derive category]
def ExtrSheaf (C : Type u') [category.{v'} C] := Sheaf ExtrDisc.proetale_topology.{u} C

def Condensed_ExtrSheaf_equiv (C : Type u') [category.{u+1} C] [limits.has_limits C] :
  ExtrSheaf.{u} C ‚âå Condensed.{u} C := sorry
--cover_dense.Sheaf_equiv C (ExtrDisc.cover_dense.{u})  <--- universe issues.
-- Will be fixed using mathlib PR #11588

--theorem ExtrSheaf_iff (C : Type u') [category.{v'} C] [limits.has_limits C]
--  (F : ExtrDisc·µí·µñ ‚•§ C) : presheaf.is_sheaf ExtrDisc.proetale_topology F ‚Üî

open opposite

def is_ExtrSheaf_of_types (P : ExtrDisc.{u}·µí·µñ ‚•§ Type u') : Prop :=
‚àÄ (B : ExtrDisc.{u}) (Œπ : Type u) [fintype Œπ] (Œ± : Œπ ‚Üí ExtrDisc.{u})
  (f : Œ† i, Œ± i ‚ü∂ B) (hf : ‚àÄ b : B, ‚àÉ i (x : Œ± i), f i x = b)
  (x : Œ† i, P.obj (op (Œ± i)))
  (hx : ‚àÄ (i j : Œπ) (Z : ExtrDisc) (g‚ÇÅ : Z ‚ü∂ Œ± i) (g‚ÇÇ : Z ‚ü∂ Œ± j),
    g‚ÇÅ ‚â´ f _ = g‚ÇÇ ‚â´ f _ ‚Üí P.map g‚ÇÅ.op (x _) = P.map g‚ÇÇ.op (x _)),
‚àÉ! t : P.obj (op B), ‚àÄ i, P.map (f i).op t = x _

-- This is more or less proved in the profinite case, along with a condition
-- that equalizers should be compatible, while the equalizer condition in the
-- ExtrDisc case can be found (in some form) in `condensed/extr.lean`.
-- It will take some time to convert these proofs to this case, but this is
-- very doable!
theorem ExtrSheaf_iff_is_ExtrSheaf_of_types
  (F : ExtrDisc·µí·µñ ‚•§ Type u') :
  presieve.is_sheaf ExtrDisc.proetale_topology F ‚Üî
  is_ExtrSheaf_of_types F :=
begin
  split,
  { introsI H B Œπ _ X f hf x hx,
    let S : presieve B := presieve.of_arrows X f,
    specialize H (sieve.generate S) _,
    { sorry },
    rw ‚Üê presieve.is_sheaf_for_iff_generate at H,
    let t : S.family_of_elements F := presieve.mk_family_of_elements_of_arrows X f F x,
    have ht : t.compatible := presieve.mk_family_of_elements_of_arrows_compatible X f F x hx,
    specialize H t ht,
    -- now use H.
    sorry,
  },
  { sorry }
end
