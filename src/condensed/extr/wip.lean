import condensed.extr.basic
import condensed.proetale_site
import condensed.basic
import category_theory.sites.induced_topology

import for_mathlib.presieve

open category_theory

universes u v' u'

def ExtrDisc.cover_dense :
  cover_dense proetale_topology.{u} ExtrDisc_to_Profinite.{u} :=
  cover_dense.mk $ Œª U,
begin
  change ‚àÉ R, _,
  obtain ‚ü®‚ü®T,hT,œÄ,hœÄ‚ü©‚ü© := enough_projectives.presentation U,
  dsimp at hT hœÄ,
  let R : presieve U := presieve.of_arrows (Œª i : punit, T) (Œª i, œÄ),
  use R,
  split,
  { refine ‚ü®punit, infer_instance, Œª i, T, Œª i, œÄ, Œª x, ‚ü®punit.star, _‚ü©, rfl‚ü©,
    rw Profinite.epi_iff_surjective at hœÄ,
    exact hœÄ x },
  intros Y f hf,
  change nonempty _,
  rcases hf with ‚ü®a,b‚ü©,
  let t : presieve.cover_by_image_structure ExtrDisc_to_Profinite œÄ := _,
  swap,
  { resetI,
    refine ‚ü®‚ü®T‚ü©, ùüô _, œÄ, by simp‚ü© },
  use t,
end

def ExtrDisc.proetale_topology : grothendieck_topology ExtrDisc.{u} :=
  ExtrDisc.cover_dense.induced_topology.{u}

@[derive category]
def ExtrSheaf (C : Type u') [category.{v'} C] := Sheaf ExtrDisc.proetale_topology.{u} C

-- TODO: cover_densed.Sheaf_equiv still has unecessary universe restrictions that can be relaxed.
noncomputable
def Condensed_ExtrSheaf_equiv (C : Type u') [category.{u+1} C] [limits.has_limits C] :
  ExtrSheaf.{u} C ‚âå Condensed.{u} C :=
ExtrDisc.cover_dense.Sheaf_equiv_of_cover_preserving_cover_lifting
  ExtrDisc.cover_dense.locally_cover_dense.induced_topology_cover_preserving
  ExtrDisc.cover_dense.locally_cover_dense.induced_topology_cover_lifting

-- Sanity check
@[simp] lemma Condensed_ExtrSheaf_equiv_inverse_val (C : Type u') [category.{u+1} C]
  [limits.has_limits C] (F : Condensed.{u} C) :
  ((Condensed_ExtrSheaf_equiv C).inverse.obj F).val = ExtrDisc_to_Profinite.op ‚ãô F.val := rfl

open opposite

def is_ExtrSheaf_of_types (P : ExtrDisc.{u}·µí·µñ ‚•§ Type u') : Prop :=
‚àÄ (B : ExtrDisc.{u}) (Œπ : Type u) [fintype Œπ] (Œ± : Œπ ‚Üí ExtrDisc.{u})
  (f : Œ† i, Œ± i ‚ü∂ B) (hf : ‚àÄ b : B, ‚àÉ i (x : Œ± i), f i x = b)
  (x : Œ† i, P.obj (op (Œ± i)))
  (hx : ‚àÄ (i j : Œπ) (Z : ExtrDisc) (g‚ÇÅ : Z ‚ü∂ Œ± i) (g‚ÇÇ : Z ‚ü∂ Œ± j),
    g‚ÇÅ ‚â´ f _ = g‚ÇÇ ‚â´ f _ ‚Üí P.map g‚ÇÅ.op (x _) = P.map g‚ÇÇ.op (x _)),
‚àÉ! t : P.obj (op B), ‚àÄ i, P.map (f i).op t = x _

theorem is_ExtrSheaf_of_types_of_is_sheaf_ExtrDisc_proetale_topology
  (F : ExtrDisc·µí·µñ ‚•§ Type u') (H : presieve.is_sheaf ExtrDisc.proetale_topology F) :
  is_ExtrSheaf_of_types F :=
begin
  introsI B Œπ _ X f hf x hx,
  let S : presieve B := presieve.of_arrows X f,
  specialize H (sieve.generate S) _,
  { dsimp [ExtrDisc.proetale_topology],
    let R : presieve B.val := presieve.of_arrows (Œª i, (X i).val) (Œª i, (f i).val),
    use R,
    split,
    { use [Œπ, infer_instance, (Œª i, (X i).val), (Œª i, (f i).val), hf, rfl] },
    { intros Y f hf,
      rcases hf with ‚ü®i‚ü©,
      use [X i, f i, ùüô _],
      refine ‚ü®_, by simp‚ü©,
      use [X i, ùüô _, (f i), presieve.of_arrows.mk i],
      simp } },
  rw ‚Üê presieve.is_sheaf_for_iff_generate at H,
  let t : S.family_of_elements F := presieve.mk_family_of_elements_of_arrows X f F x,
  have ht : t.compatible := presieve.mk_family_of_elements_of_arrows_compatible X f F x hx,
  specialize H t ht,
  -- now use H.
  obtain ‚ü®tt,htt,htt'‚ü© := H,
  refine ‚ü®tt,_,_‚ü©,
  { dsimp,
    intros i,
    specialize htt (f i) (presieve.of_arrows.mk i),
    rw htt,
    apply presieve.mk_family_of_elements_of_arrows_eval _ _ _ _ hx },
  { intros y hy,
    apply htt',
    intros Z f hf,
    rcases hf with ‚ü®i‚ü©,
    rw hy,
    symmetry,
    apply presieve.mk_family_of_elements_of_arrows_eval _ _ _ _ hx }
end

theorem is_seprated_of_is_ExtrSheaf_of_types
  (F : ExtrDisc·µí·µñ ‚•§ Type u') (H : is_ExtrSheaf_of_types F) :
  presieve.is_separated ExtrDisc.proetale_topology F :=
begin
  intros B S hS x t‚ÇÅ t‚ÇÇ h‚ÇÅ h‚ÇÇ,
  change proetale_topology _ _ at hS,
  rw ExtrDisc.cover_dense.locally_cover_dense.pushforward_cover_iff_cover_pullback at hS,
  obtain ‚ü®‚ü®T,hT‚ü©,rfl‚ü© := hS,
  obtain ‚ü®R,hR,hRT‚ü© := hT,
  obtain ‚ü®Œπ, _, X, f, surj, rfl‚ü© := hR,
  resetI,
  let XX : Œπ ‚Üí ExtrDisc := Œª i, (X i).pres,
  let ff : Œ† i, (XX i) ‚ü∂ B := Œª i, ‚ü®(X i).pres_œÄ ‚â´ f i‚ü©,
  have surjff : ‚àÄ b : B, ‚àÉ (i : Œπ) (q : XX i), (ff i) q = b,
  { intros b,
    obtain ‚ü®i,y,rfl‚ü© := surj b,
    obtain ‚ü®z,rfl‚ü© := (X i).pres_œÄ_surjective y,
    use [i,z,rfl] },
  have hff : ‚àÄ i, T (ff i).val,
  { intros i,
    dsimp [ff],
    apply sieve.downward_closed,
    apply hRT,
    exact presieve.of_arrows.mk i },
  let xx : Œ† i, F.obj (op (XX i)) := Œª i, x _ _,
  swap, { exact ff i },
  swap, { exact hff i },
  specialize H B Œπ XX ff surjff xx _,
  { intros i j Z g‚ÇÅ g‚ÇÇ h,
    have hxcompat : x.compatible,
    { apply  presieve.is_compatible_of_exists_amalgamation,
      exact ‚ü®t‚ÇÅ, h‚ÇÅ‚ü© },
    dsimp [presieve.family_of_elements.compatible] at hxcompat,
    dsimp [xx],
    specialize hxcompat g‚ÇÅ g‚ÇÇ,
    apply hxcompat,
    exact h },
  obtain ‚ü®t,ht,ht'‚ü© := H,
  have ht‚ÇÅ : t‚ÇÅ = t,
  { apply ht',
    intros i,
    apply h‚ÇÅ },
  have ht‚ÇÇ : t‚ÇÇ = t,
  { apply ht',
    intros i,
    apply h‚ÇÇ },
  rw [ht‚ÇÅ, ht‚ÇÇ]
end

theorem is_sheaf_ExtrDisc_proetale_topology_of_is_ExtrSheaf_of_types
  (F : ExtrDisc·µí·µñ ‚•§ Type u') (H : is_ExtrSheaf_of_types F) :
  presieve.is_sheaf ExtrDisc.proetale_topology F :=
begin
  have hF : presieve.is_separated ExtrDisc.proetale_topology F,
  { apply is_seprated_of_is_ExtrSheaf_of_types,
    assumption },
  intros B S hS,
  rw ‚Üê presieve.is_separated_for_and_exists_is_amalgamation_iff_sheaf_for,
  split, { apply hF _ hS },
  intros x hx,
  change proetale_topology _ _ at hS,
  rw ExtrDisc.cover_dense.locally_cover_dense.pushforward_cover_iff_cover_pullback at hS,
  obtain ‚ü®‚ü®T,hT‚ü©,rfl‚ü© := hS,
  obtain ‚ü®R,hR,hRT‚ü© := hT,
  obtain ‚ü®Œπ, _, X, f, surj, rfl‚ü© := hR,
  resetI,
  let XX : Œπ ‚Üí ExtrDisc := Œª i, (X i).pres,
  let ff : Œ† i, (XX i) ‚ü∂ B := Œª i, ‚ü®(X i).pres_œÄ ‚â´ f i‚ü©,
  have surjff : ‚àÄ b : B, ‚àÉ (i : Œπ) (q : XX i), (ff i) q = b,
  { intros b,
    obtain ‚ü®i,y,rfl‚ü© := surj b,
    obtain ‚ü®z,rfl‚ü© := (X i).pres_œÄ_surjective y,
    use [i,z,rfl] },
  have hff : ‚àÄ i, T (ff i).val,
  { intros i,
    dsimp [ff],
    apply sieve.downward_closed,
    apply hRT,
    exact presieve.of_arrows.mk i },
  let xx : Œ† i, F.obj (op (XX i)) := Œª i, x _ _,
  swap, { exact ff i },
  swap, { exact hff i },
  specialize H B Œπ XX ff surjff xx _,
  { intros i j Z g‚ÇÅ g‚ÇÇ h,
    dsimp [presieve.family_of_elements.compatible] at hx,
    dsimp [xx],
    specialize hx g‚ÇÅ g‚ÇÇ,
    apply hx,
    exact h },
  obtain ‚ü®t,ht,ht'‚ü© := H,
  use t,
  intros Y f hf,
  let PP : Œπ ‚Üí Profinite := Œª i, Profinite.pullback f.val (ff i).val,
  let QQ : Œπ ‚Üí ExtrDisc := Œª i, (PP i).pres,
  let œÄœÄ : Œ† i, (QQ i) ‚ü∂ XX i := Œª i, ‚ü®(PP i).pres_œÄ ‚â´ Profinite.pullback.snd _ _‚ü©,
  let gg : Œ† i, (QQ i) ‚ü∂ Y := Œª i,
    ‚ü®(PP i).pres_œÄ ‚â´ Profinite.pullback.fst _ _‚ü©,
  let W : sieve Y := sieve.generate (presieve.of_arrows QQ gg),
  specialize hF W _,
  { change ‚àÉ _, _,
    use presieve.of_arrows (Œª i, (QQ i).val) (Œª i, (gg i).val),
    split,
    { use [Œπ, infer_instance, (Œª i, (QQ i).val), (Œª i, (gg i).val)],
      refine ‚ü®_,rfl‚ü©,
      intros y,
      obtain ‚ü®i,t,ht‚ü© := surj (f y),
      obtain ‚ü®w,hw‚ü© := (X i).pres_œÄ_surjective t,
      obtain ‚ü®z,hz‚ü© := (PP i).pres_œÄ_surjective ‚ü®‚ü®y,w‚ü©,_‚ü©,
      swap, { dsimp, rw hw, exact ht.symm },
      use [i, z],
      dsimp [gg],
      rw hz, refl },
    { intros Z f hf,
      obtain ‚ü®i‚ü© := hf,
      change ‚àÉ _, _,
      use [(QQ i), gg i, ùüô _],
      split,
      { apply sieve.le_generate,
        apply presieve.of_arrows.mk },
      { ext1, simp } } },
  dsimp [presieve.is_separated_for] at hF,
  have : ‚àÄ (Z : ExtrDisc) (g : Z ‚ü∂ Y) (hg : W g),
    ‚àÉ (i : Œπ) (e : Z ‚ü∂ QQ i), g = e ‚â´ gg i,
  { intros Z g hg,
    obtain ‚ü®QQ',e‚ÇÅ,e‚ÇÇ,h1,h2‚ü© := hg,
    obtain ‚ü®i‚ü© := h1,
    use [i, e‚ÇÅ, h2.symm] },
  choose ii ee hee using this,
  let y : presieve.family_of_elements F W := Œª Z g hg,
    F.map (ee _ _ hg ‚â´ œÄœÄ _).op (xx (ii _ _ hg)),
  have hy : y.compatible,
  { intros T‚ÇÅ T‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ w,
    dsimp [y, xx],
    simp only [‚Üê F.map_comp, ‚Üê op_comp],
    change (F.map _ ‚â´ F.map _) _ = (F.map _ ‚â´ F.map _) _,
    simp only [‚Üê F.map_comp, ‚Üê op_comp],
    apply hx,
    apply_fun (Œª e, e ‚â´ f) at w,
    simp only [category.assoc] at w ‚ä¢,
    convert w using 2,
    { ext1,
      dsimp [œÄœÄ, ff],
      simp only [category.assoc],
      rw [‚Üê Profinite.pullback.condition, ‚Üê category.assoc],
      change ((ee T‚ÇÅ f‚ÇÅ h‚ÇÅ ‚â´ gg _) ‚â´ f).val = (f‚ÇÅ ‚â´ f).val,
      congr' 2,
      symmetry,
      apply hee },
    { ext1,
      dsimp [œÄœÄ, ff],
      simp only [category.assoc],
      rw [‚Üê Profinite.pullback.condition, ‚Üê category.assoc],
      change ((ee T‚ÇÇ f‚ÇÇ h‚ÇÇ ‚â´ gg _) ‚â´ f).val = (f‚ÇÇ ‚â´ f).val,
      congr' 2,
      symmetry,
      apply hee } },
  apply hF y (F.map f.op t) (x f hf),
  { intros L e he,
    dsimp [y],
    have := hee _ _ he,
    conv_lhs { rw this },
    rw ‚Üê ht,
    simp only [‚Üê comp_apply, ‚Üê F.map_comp, ‚Üê op_comp],
    change (F.map _ ‚â´ F.map _) _ = (F.map _ ‚â´ F.map _) _,
    simp_rw [‚Üê F.map_comp, ‚Üê op_comp],
    congr' 2,
    simp only [category.assoc],
    congr' 1,
    ext1,
    dsimp,
    simp [Profinite.pullback.condition] },
  { intros L e he,
    dsimp [y],
    have := hee _ _ he,
    conv_lhs { rw this },
    dsimp only [xx],
    simp only [‚Üê F.map_comp, ‚Üê op_comp],
    apply hx,
    simp only [category.assoc],
    congr' 1,
    ext1,
    dsimp,
    simp [Profinite.pullback.condition] }
end
