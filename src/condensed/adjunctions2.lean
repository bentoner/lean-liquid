import condensed.adjunctions
import condensed.top_comparison

noncomputable theory

universe u

open category_theory

namespace Sheaf

@[simps]
def hom_equiv {C D : Type*} [category C] [category D]
  {J : grothendieck_topology C} (F G : Sheaf J D) :
  (F ‚ü∂ G) ‚âÉ (F.val ‚ü∂ G.val) :=
{ to_fun := Œª f, f.val,
  inv_fun := Œª f, ‚ü®f‚ü©,
  left_inv := Œª f, by { cases f, refl },
  right_inv := Œª f, rfl }

end Sheaf

namespace condensed

variables (M : Condensed.{u} Ab.{u+1}) (S T : Profinite.{u}·µí·µñ) (f : S ‚ü∂ T)

def profinite_free_adj_aux‚ÇÅ  :
  (CondensedSet_to_Condensed_Ab.obj (opposite.unop S).to_Condensed ‚ü∂ M) ‚âÉ
  ((opposite.unop S).to_Condensed ‚ü∂ Condensed_Ab_to_CondensedSet.obj M) :=
Condensed_Ab_CondensedSet_adjunction.hom_equiv S.unop.to_Condensed M

lemma profinite_free_adj_aux‚ÇÅ_naturality
  (x : CondensedSet_to_Condensed_Ab.obj S.unop.to_Condensed ‚ü∂ M) :
  profinite_free_adj_aux‚ÇÅ _ _
  ((CondensedSet_to_Condensed_Ab.map (Profinite_to_Condensed.map f.unop) ‚â´ x)) =
  Profinite_to_Condensed.map f.unop ‚â´ profinite_free_adj_aux‚ÇÅ _ _ x :=
begin
  dsimp only [profinite_free_adj_aux‚ÇÅ],
  simpa only [adjunction.hom_equiv_naturality_left],
end

def profinite_free_adj_aux‚ÇÇ (M : Condensed.{u} Ab.{u+1}) (S : Profinite.{u}·µí·µñ) :
  ((opposite.unop S).to_Condensed ‚ü∂ Condensed_Ab_to_CondensedSet.obj M) ‚âÉ
  ((opposite.unop S).to_Condensed.val ‚ü∂ (Condensed_Ab_to_CondensedSet.obj M).val) :=
(Sheaf.hom_equiv _ _)

lemma profinite_free_adj_aux‚ÇÇ_naturality
  (x : S.unop.to_Condensed ‚ü∂ Condensed_Ab_to_CondensedSet.obj M) :
  profinite_free_adj_aux‚ÇÇ _ _ ((Profinite_to_Condensed.map f.unop) ‚â´ x) =
  (Profinite_to_Condensed.map f.unop).val ‚â´ profinite_free_adj_aux‚ÇÇ _ _ x := rfl

def profinite_free_adj_aux‚ÇÉ (M : Condensed.{u} Ab.{u+1}) (S : Profinite.{u}·µí·µñ) :
  ((opposite.unop S).to_Condensed.val ‚ü∂ (Condensed_Ab_to_CondensedSet.obj M).val) ‚âÉ
  (M.val.obj S) :=
yoneda'_equiv _ _

lemma profinite_free_adj_aux‚ÇÉ_naturality
  (x : (opposite.unop S).to_Condensed.val ‚ü∂ (Condensed_Ab_to_CondensedSet.obj M).val) :
  profinite_free_adj_aux‚ÇÉ _ _ ((Profinite_to_Condensed.map f.unop).val ‚â´ x) =
  (M.val.map f) (profinite_free_adj_aux‚ÇÉ _ _ x) :=
begin
  have := x.naturality f,
  apply_fun (Œª e, e (ulift.up (ùüô S.unop))) at this,
  exact this,
end

def profinite_free_adj_aux (M : Condensed.{u} Ab.{u+1}) (S : Profinite.{u}·µí·µñ):
  (AddCommGroup.of ((CondensedSet_to_Condensed_Ab.obj (opposite.unop S).to_Condensed) ‚ü∂ M)) ‚âÉ+
  (M.val.obj S) :=
{ map_add' := Œª f g, rfl,
  ..((profinite_free_adj_aux‚ÇÅ M S).trans
    ((profinite_free_adj_aux‚ÇÇ _ _).trans
    (profinite_free_adj_aux‚ÇÉ _ _))) }

def profinite_free_adj (M : Condensed.{u} Ab.{u+1}) :
  (Profinite_to_Condensed ‚ãô CondensedSet_to_Condensed_Ab).op ‚ãô preadditive_yoneda.obj M ‚âÖ
  M.val :=
nat_iso.of_components
(Œª S, begin
  apply add_equiv.to_AddCommGroup_iso,
  apply profinite_free_adj_aux,
end)
begin
  intros S T f, ext t,
  change ((profinite_free_adj_aux‚ÇÅ M T).trans
    ((profinite_free_adj_aux‚ÇÇ M T).trans (profinite_free_adj_aux‚ÇÉ M T))) _ = _,
  dsimp only [equiv.trans_apply, functor.comp_map, functor.op_map, preadditive_yoneda],
  erw profinite_free_adj_aux‚ÇÅ_naturality,
  erw profinite_free_adj_aux‚ÇÇ_naturality,
  erw profinite_free_adj_aux‚ÇÉ_naturality,
  refl,
end

end condensed
