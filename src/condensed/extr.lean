import topology.category.Profinite.projective
import for_mathlib.Profinite.product

open category_theory

universe u

structure ExtrDisc :=
(val : Profinite.{u})
[cond : projective val]

namespace ExtrDisc

@[ext]
structure hom (X Y : ExtrDisc) :=
mk :: (val : X.val ‚ü∂ Y.val)

@[simps]
instance : category ExtrDisc :=
{ hom := hom,
  id := Œª X, ‚ü®ùüô _‚ü©,
  comp := Œª X Y Z f g, ‚ü®f.val ‚â´ g.val‚ü© }

@[simps]
def _root_.ExtrDisc_to_Profinite : ExtrDisc ‚•§ Profinite :=
{ obj := val,
  map := Œª X Y f, f.val }

instance : concrete_category ExtrDisc.{u} :=
{ forget := ExtrDisc_to_Profinite ‚ãô forget _,
  forget_faithful := ‚ü®‚ü© }

instance (X : ExtrDisc) : projective X.val := X.cond

example (X : ExtrDisc) : projective (ExtrDisc_to_Profinite.obj X) :=
by { dsimp, apply_instance }

noncomputable
def split {X Y : ExtrDisc} (f : X ‚ü∂ Y) (hf : function.surjective f.val) :
  Y ‚ü∂ X :=
begin
  have : epi f.val, by rwa Profinite.epi_iff_surjective f.val,
  resetI,
  choose g h using projective.factors (ùüô Y.val) f.val,
  exact ‚ü®g‚ü©,
end

@[simp, reassoc]
lemma splitting_is_splitting {X Y : ExtrDisc} (f : X ‚ü∂ Y)
  (hf : function.surjective f.val) : split f hf ‚â´ f = ùüô _ :=
begin
  have : epi f.val, by rwa Profinite.epi_iff_surjective f.val,
  resetI,
  ext1,
  exact (projective.factors (ùüô Y.val) f.val).some_spec,
end

instance : has_coe_to_sort ExtrDisc Type* :=
concrete_category.has_coe_to_sort _

instance {X Y : ExtrDisc} : has_coe_to_fun (X ‚ü∂ Y) (Œª f, X ‚Üí Y) :=
concrete_category.has_coe_to_fun

@[simp]
lemma coe_fun_eq {X Y : ExtrDisc} (f : X ‚ü∂ Y) : ‚áë(f.val) = f := rfl

instance (X : ExtrDisc) : topological_space X :=
show topological_space X.val, by apply_instance

instance (X : ExtrDisc) : compact_space X :=
show compact_space X.val, by apply_instance

instance (X : ExtrDisc) : t2_space X :=
show t2_space X.val, by apply_instance

instance (X : ExtrDisc) : totally_disconnected_space X :=
show totally_disconnected_space X.val, by apply_instance

def free (Œ± : Type u) : ExtrDisc.{u} :=
{ val := Profinite.of $ ultrafilter Œ±,
  cond := Profinite.projective_ultrafilter Œ± }

def free.Œπ (Œ± : Type u) : Œ± ‚Üí free Œ± :=
Œª t, (pure t : ultrafilter Œ±)

noncomputable
def free.lift {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) : free Œ± ‚ü∂ X :=
‚ü®‚ü®ultrafilter.extend f, continuous_ultrafilter_extend _‚ü©‚ü©

@[simp]
lemma free.Œπ_lift {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) :
  free.lift f ‚àò free.Œπ _ = f :=
begin
  ext,
  dsimp [free.lift, free.Œπ],
  change (ultrafilter.extend _ ‚àò pure) _ = _,
  rw ultrafilter_extend_extends,
end

@[simp]
lemma free.Œπ_lift_apply {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) (a : Œ±) :
  free.lift f (free.Œπ Œ± a) = f a :=
show (free.lift f ‚àò free.Œπ Œ±) a = f a, by simp

lemma free.lift_unique {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X)
  (g : free Œ± ‚ü∂ X) (h : g ‚àò free.Œπ Œ± = f) : g = free.lift f :=
begin
  letI hh : topological_space Œ± := ‚ä•,
  have : dense_range (free.Œπ Œ±) := dense_range_pure,
  rw ‚Üê free.Œπ_lift f at h,
  ext : 2,
  have := this.equalizer _ _ h,
  erw this,
  refl,
  exact g.val.continuous,
  exact (free.lift f).val.continuous,
end

@[ext]
lemma free.hom_ext {X : ExtrDisc.{u}} {Œ± : Type u} (f g : free Œ± ‚ü∂ X)
  (h : f ‚àò (free.Œπ Œ±) = g ‚àò (free.Œπ Œ±)) : f = g :=
by rw [free.lift_unique _ f rfl, free.lift_unique _ g rfl, h]

end ExtrDisc
