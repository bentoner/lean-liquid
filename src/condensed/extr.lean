import topology.category.Profinite.projective
import for_mathlib.Profinite.disjoint_union

@[simp]
lemma ultrafilter_extend_extends_apply {Œ± X : Type*}
  [topological_space X] [t2_space X]
  (f : Œ± ‚Üí X) (a : Œ±) :
  ultrafilter.extend f (pure a) = f a :=
begin
  change (ultrafilter.extend _ ‚àò pure) _ = _,
  rw ultrafilter_extend_extends,
end

open category_theory

universe u

structure ExtrDisc :=
(val : Profinite.{u})
[cond : projective val]

namespace ExtrDisc

@[ext]
structure hom (X Y : ExtrDisc) := mk :: (val : X.val ‚ü∂ Y.val)

def of (X : Profinite) [projective X] : ExtrDisc := ‚ü®X‚ü©

@[simp]
def of_val (X : Profinite) [projective X] : (of X).val = X := rfl

@[simps]
instance : category ExtrDisc :=
{ hom := hom,
  id := Œª X, ‚ü®ùüô _‚ü©,
  comp := Œª X Y Z f g, ‚ü®f.val ‚â´ g.val‚ü© }

@[simps]
def _root_.ExtrDisc_to_Profinite : ExtrDisc ‚•§ Profinite :=
{ obj := val,
  map := Œª X Y f, f.val }

instance : concrete_category ExtrDisc.{u} :=
{ forget := ExtrDisc_to_Profinite ‚ãô forget _,
  forget_faithful := ‚ü®‚ü© }

instance : has_coe_to_sort ExtrDisc Type* :=
concrete_category.has_coe_to_sort _

instance {X Y : ExtrDisc} : has_coe_to_fun (X ‚ü∂ Y) (Œª f, X ‚Üí Y) :=
‚ü®Œª f, f.val‚ü©

instance (X : ExtrDisc) : projective X.val := X.cond

example (X : ExtrDisc) : projective (ExtrDisc_to_Profinite.obj X) :=
by { dsimp, apply_instance }

noncomputable
def split {X Y : ExtrDisc} (f : X ‚ü∂ Y) (hf : function.surjective f) :
  Y ‚ü∂ X :=
begin
  have : epi f.val, by  rwa Profinite.epi_iff_surjective f.val,
  resetI,
  choose g h using projective.factors (ùüô Y.val) f.val,
  exact ‚ü®g‚ü©,
end

@[simp, reassoc]
lemma splitting_is_splitting {X Y : ExtrDisc} (f : X ‚ü∂ Y)
  (hf : function.surjective f) : split f hf ‚â´ f = ùüô _ :=
begin
  have : epi f.val, by  rwa Profinite.epi_iff_surjective f.val,
  resetI,
  ext1,
  exact (projective.factors (ùüô Y.val) f.val).some_spec,
end

instance (X : ExtrDisc) : topological_space X :=
show topological_space X.val, by apply_instance

instance (X : ExtrDisc) : compact_space X :=
show compact_space X.val, by apply_instance

instance (X : ExtrDisc) : t2_space X :=
show t2_space X.val, by apply_instance

instance (X : ExtrDisc) : totally_disconnected_space X :=
show totally_disconnected_space X.val, by apply_instance

def free (Œ± : Type u) : ExtrDisc.{u} :=
{ val := Profinite.of $ ultrafilter Œ±,
  cond := Profinite.projective_ultrafilter Œ± }

def free.Œπ (Œ± : Type u) : Œ± ‚Üí free Œ± :=
Œª t, (pure t : ultrafilter Œ±)

@[simp]
lemma free.Œπ_apply {Œ± : Type u} (a : Œ±) : free.Œπ Œ± a = (pure a : ultrafilter Œ±) := rfl

noncomputable
def free.lift {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) : free Œ± ‚ü∂ X :=
‚ü®‚ü®ultrafilter.extend f, continuous_ultrafilter_extend _‚ü©‚ü©

@[simp]
lemma free.lift_apply {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) (F : free Œ±) :
  free.lift f F = ultrafilter.extend f F := rfl

@[simp]
lemma free.Œπ_lift {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) :
  free.lift f ‚àò free.Œπ _ = f :=
begin
  ext,
  dsimp,
  simp,
end

@[simp]
lemma free.Œπ_lift_apply {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) (a : Œ±) :
  free.lift f (free.Œπ Œ± a) = f a :=
show (free.lift f ‚àò free.Œπ Œ±) a = f a, by simp

lemma free.lift_unique {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X)
  (g : free Œ± ‚ü∂ X) (h : g ‚àò free.Œπ Œ± = f) : g = free.lift f :=
begin
  letI hh : topological_space Œ± := ‚ä•,
  have : dense_range (free.Œπ Œ±) := dense_range_pure,
  rw ‚Üê free.Œπ_lift f at h,
  ext : 2,
  have := this.equalizer _ _ h,
  erw this,
  refl,
  exact g.val.continuous,
  exact (free.lift f).val.continuous,
end

@[ext]
lemma free.hom_ext {X : ExtrDisc.{u}} {Œ± : Type u} (f g : free Œ± ‚ü∂ X)
  (h : f ‚àò (free.Œπ Œ±) = g ‚àò (free.Œπ Œ±)) : f = g :=
by rw [free.lift_unique _ f rfl, free.lift_unique _ g rfl, h]

@[simps]
noncomputable
def free_functor : Type u ‚•§ ExtrDisc.{u} :=
{ obj := Œª Œ±, free Œ±,
  map := Œª Œ± Œ≤ f, free.lift $ (free.Œπ _) ‚àò f,
  map_id' := by tidy,
  map_comp' := begin
    intros Œ± Œ≤ Œ≥ f g,
    ext : 2,
    dsimp,
    simp,
  end } .

@[simps]
noncomputable
def adjunction : free_functor ‚ä£ forget _ :=
adjunction.mk_of_hom_equiv $
{ hom_equiv := Œª Œ± X,
  { to_fun := Œª f, f ‚àò free.Œπ _,
    inv_fun := Œª f, free.lift f,
    left_inv := Œª f, by { ext, dsimp, simp },
    right_inv := Œª f, by { ext, dsimp, simp } },
  hom_equiv_naturality_left_symm' := Œª _ _ _ _ _, by { ext, dsimp, simp },
  hom_equiv_naturality_right' := Œª _ _ _ _ _, by { ext, dsimp, simp } } .

@[simps]
def sigma {Œπ : Type u} [fintype Œπ] (X : Œπ ‚Üí ExtrDisc) : ExtrDisc :=
{ val := Profinite.sigma $ Œª i : Œπ, (X i).val,
  cond := begin
    let Z := Profinite.sigma (Œª i : Œπ, (X i).val),
    let e : Z ‚âÖ ‚àê (Œª i, (X i).val) :=
      (Profinite.sigma_cofan_is_colimit _).cocone_point_unique_up_to_iso
      (limits.colimit.is_colimit _),
    apply projective.of_iso e.symm,
    apply_instance,
  end }

@[simps]
def sigma.Œπ {Œπ : Type u} [fintype Œπ] (X : Œπ ‚Üí ExtrDisc) (i : Œπ) :
  X i ‚ü∂ sigma X := ‚ü®Profinite.sigma.Œπ _ i‚ü©

@[simps]
def sigma.desc {Y : ExtrDisc} {Œπ : Type u} [fintype Œπ] (X : Œπ ‚Üí ExtrDisc)
  (f : Œ† i, X i ‚ü∂ Y) : sigma X ‚ü∂ Y := ‚ü®Profinite.sigma.desc _ $ Œª i, (f i).val‚ü©

@[simp, reassoc]
lemma sigma.Œπ_desc {Y} {Œπ : Type u} (i : Œπ) [fintype Œπ] (X : Œπ ‚Üí ExtrDisc) (f : Œ† a, X a ‚ü∂ Y) :
  sigma.Œπ X i ‚â´ sigma.desc X f = f _ := by { ext1, simp }

@[ext]
lemma sigma.hom_ext {Y} {Œπ : Type u} [fintype Œπ] (X : Œπ ‚Üí ExtrDisc) (f g : sigma X ‚ü∂ Y)
  (w : ‚àÄ i, sigma.Œπ X i ‚â´ f = sigma.Œπ X i ‚â´ g) : f = g :=
begin
  ext1,
  apply Profinite.sigma.hom_ext,
  intros i,
  specialize w i,
  apply_fun (Œª e, e.val) at w,
  exact w,
end

end ExtrDisc

namespace Profinite

instance (Y : Profinite) : t2_space Y := infer_instance

def free_pres (X : Profinite.{u}) : ExtrDisc.{u} :=
ExtrDisc.free X

noncomputable
def free_pres_œÄ (X : Profinite.{u}) :
  X.free_pres.val ‚ü∂ X :=
‚ü®ultrafilter.extend id, continuous_ultrafilter_extend _‚ü©

noncomputable
def map_free_pres {X Y : Profinite.{u}} (f : X ‚ü∂ Y) : X.free_pres ‚ü∂ Y.free_pres :=
ExtrDisc.free_functor.map f

-- functoriality of the presentation
@[simp]
lemma map_free_pres_œÄ {X Y : Profinite.{u}} (f : X ‚ü∂ Y) :
  (map_free_pres f).val ‚â´ Y.free_pres_œÄ = X.free_pres_œÄ ‚â´ f :=
begin
  apply_fun (Œª e, (forget Profinite).map e),
  swap, { exact (forget Profinite).map_injective },
  dsimp [free_pres_œÄ, map_free_pres, ExtrDisc.free.lift, ExtrDisc.free.Œπ],
  have : dense_range (ExtrDisc.free.Œπ _ : X ‚Üí X.free_pres) := dense_range_pure,
  refine this.equalizer _ _ _,
  continuity,
  exact continuous_ultrafilter_extend id,
  apply continuous_ultrafilter_extend,
  exact continuous_ultrafilter_extend id,
  ext,
  dsimp,
  simp,
end

end Profinite
