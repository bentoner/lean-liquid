import topology.category.Profinite.projective
import for_mathlib.Profinite.disjoint_union
import condensed.is_proetale_sheaf
import condensed.basic

noncomputable theory

@[simp]
lemma ultrafilter_extend_extends_apply {Œ± X : Type*}
  [topological_space X] [t2_space X]
  (f : Œ± ‚Üí X) (a : Œ±) :
  ultrafilter.extend f (pure a) = f a :=
begin
  change (ultrafilter.extend _ ‚àò pure) _ = _,
  rw ultrafilter_extend_extends,
end

open category_theory

universes u w v

structure ExtrDisc :=
(val : Profinite.{u})
[cond : projective val]

namespace ExtrDisc

@[ext]
structure hom (X Y : ExtrDisc) := mk :: (val : X.val ‚ü∂ Y.val)

def of (X : Profinite) [projective X] : ExtrDisc := ‚ü®X‚ü©

@[simp]
def of_val (X : Profinite) [projective X] : (of X).val = X := rfl

@[simps]
instance : category ExtrDisc :=
{ hom := hom,
  id := Œª X, ‚ü®ùüô _‚ü©,
  comp := Œª X Y Z f g, ‚ü®f.val ‚â´ g.val‚ü© }

@[simps]
def _root_.ExtrDisc_to_Profinite : ExtrDisc ‚•§ Profinite :=
{ obj := val,
  map := Œª X Y f, f.val }

instance : concrete_category ExtrDisc.{u} :=
{ forget := ExtrDisc_to_Profinite ‚ãô forget _,
  forget_faithful := ‚ü®‚ü© }

instance : has_coe_to_sort ExtrDisc Type* :=
concrete_category.has_coe_to_sort _

instance {X Y : ExtrDisc} : has_coe_to_fun (X ‚ü∂ Y) (Œª f, X ‚Üí Y) :=
‚ü®Œª f, f.val‚ü©

instance (X : ExtrDisc) : projective X.val := X.cond

example (X : ExtrDisc) : projective (ExtrDisc_to_Profinite.obj X) :=
by { dsimp, apply_instance }

def split {X Y : ExtrDisc} (f : X ‚ü∂ Y) (hf : function.surjective f) :
  Y ‚ü∂ X :=
begin
  have : epi f.val, by  rwa Profinite.epi_iff_surjective f.val,
  resetI,
  choose g h using projective.factors (ùüô Y.val) f.val,
  exact ‚ü®g‚ü©,
end

@[simp, reassoc]
lemma splitting_is_splitting {X Y : ExtrDisc} (f : X ‚ü∂ Y)
  (hf : function.surjective f) : split f hf ‚â´ f = ùüô _ :=
begin
  have : epi f.val, by  rwa Profinite.epi_iff_surjective f.val,
  resetI,
  ext1,
  exact (projective.factors (ùüô Y.val) f.val).some_spec,
end

instance (X : ExtrDisc) : topological_space X :=
show topological_space X.val, by apply_instance

instance (X : ExtrDisc) : compact_space X :=
show compact_space X.val, by apply_instance

instance (X : ExtrDisc) : t2_space X :=
show t2_space X.val, by apply_instance

instance (X : ExtrDisc) : totally_disconnected_space X :=
show totally_disconnected_space X.val, by apply_instance

def free (Œ± : Type u) : ExtrDisc.{u} :=
{ val := Profinite.of $ ultrafilter Œ±,
  cond := Profinite.projective_ultrafilter Œ± }

def free.Œπ (Œ± : Type u) : Œ± ‚Üí free Œ± :=
Œª t, (pure t : ultrafilter Œ±)

@[simp]
lemma free.Œπ_apply {Œ± : Type u} (a : Œ±) : free.Œπ Œ± a = (pure a : ultrafilter Œ±) := rfl

def free.lift {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) : free Œ± ‚ü∂ X :=
‚ü®‚ü®ultrafilter.extend f, continuous_ultrafilter_extend _‚ü©‚ü©

@[simp]
lemma free.lift_apply {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) (F : free Œ±) :
  free.lift f F = ultrafilter.extend f F := rfl

@[simp]
lemma free.Œπ_lift {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) :
  free.lift f ‚àò free.Œπ _ = f :=
begin
  ext,
  dsimp,
  simp,
end

@[simp]
lemma free.Œπ_lift_apply {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) (a : Œ±) :
  free.lift f (free.Œπ Œ± a) = f a :=
show (free.lift f ‚àò free.Œπ Œ±) a = f a, by simp

lemma free.lift_unique {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X)
  (g : free Œ± ‚ü∂ X) (h : g ‚àò free.Œπ Œ± = f) : g = free.lift f :=
begin
  letI hh : topological_space Œ± := ‚ä•,
  have : dense_range (free.Œπ Œ±) := dense_range_pure,
  rw ‚Üê free.Œπ_lift f at h,
  ext : 2,
  have := this.equalizer _ _ h,
  erw this,
  refl,
  exact g.val.continuous,
  exact (free.lift f).val.continuous,
end

@[ext]
lemma free.hom_ext {X : ExtrDisc.{u}} {Œ± : Type u} (f g : free Œ± ‚ü∂ X)
  (h : f ‚àò (free.Œπ Œ±) = g ‚àò (free.Œπ Œ±)) : f = g :=
by rw [free.lift_unique _ f rfl, free.lift_unique _ g rfl, h]

@[simps]
def free_functor : Type u ‚•§ ExtrDisc.{u} :=
{ obj := Œª Œ±, free Œ±,
  map := Œª Œ± Œ≤ f, free.lift $ (free.Œπ _) ‚àò f,
  map_id' := by tidy,
  map_comp' := begin
    intros Œ± Œ≤ Œ≥ f g,
    ext : 2,
    dsimp,
    simp,
  end } .

@[simps]
def adjunction : free_functor ‚ä£ forget _ :=
adjunction.mk_of_hom_equiv $
{ hom_equiv := Œª Œ± X,
  { to_fun := Œª f, f ‚àò free.Œπ _,
    inv_fun := Œª f, free.lift f,
    left_inv := Œª f, by { ext, dsimp, simp },
    right_inv := Œª f, by { ext, dsimp, simp } },
  hom_equiv_naturality_left_symm' := Œª _ _ _ _ _, by { ext, dsimp, simp },
  hom_equiv_naturality_right' := Œª _ _ _ _ _, by { ext, dsimp, simp } } .

@[simps]
def sigma {Œπ : Type u} [fintype Œπ] (X : Œπ ‚Üí ExtrDisc) : ExtrDisc :=
{ val := Profinite.sigma $ Œª i : Œπ, (X i).val,
  cond := begin
    let Z := Profinite.sigma (Œª i : Œπ, (X i).val),
    let e : Z ‚âÖ ‚àê (Œª i, (X i).val) :=
      (Profinite.sigma_cofan_is_colimit _).cocone_point_unique_up_to_iso
      (limits.colimit.is_colimit _),
    apply projective.of_iso e.symm,
    apply_instance,
  end }

@[simps]
def sigma.Œπ {Œπ : Type u} [fintype Œπ] (X : Œπ ‚Üí ExtrDisc) (i : Œπ) :
  X i ‚ü∂ sigma X := ‚ü®Profinite.sigma.Œπ _ i‚ü©

@[simps]
def sigma.desc {Y : ExtrDisc} {Œπ : Type u} [fintype Œπ] (X : Œπ ‚Üí ExtrDisc)
  (f : Œ† i, X i ‚ü∂ Y) : sigma X ‚ü∂ Y := ‚ü®Profinite.sigma.desc _ $ Œª i, (f i).val‚ü©

@[simp, reassoc]
lemma sigma.Œπ_desc {Y} {Œπ : Type u} (i : Œπ) [fintype Œπ] (X : Œπ ‚Üí ExtrDisc) (f : Œ† a, X a ‚ü∂ Y) :
  sigma.Œπ X i ‚â´ sigma.desc X f = f _ := by { ext1, simp }

@[ext]
lemma sigma.hom_ext {Y} {Œπ : Type u} [fintype Œπ] (X : Œπ ‚Üí ExtrDisc) (f g : sigma X ‚ü∂ Y)
  (w : ‚àÄ i, sigma.Œπ X i ‚â´ f = sigma.Œπ X i ‚â´ g) : f = g :=
begin
  ext1,
  apply Profinite.sigma.hom_ext,
  intros i,
  specialize w i,
  apply_fun (Œª e, e.val) at w,
  exact w,
end

def sigma.cofan {Œπ : Type u} [fintype Œπ] (X : Œπ ‚Üí ExtrDisc) : limits.cofan X :=
limits.cofan.mk (sigma X) $ Œª i, sigma.Œπ _ i

@[simps]
def sigma.is_colimit {Œπ : Type u} [fintype Œπ] (X : Œπ ‚Üí ExtrDisc) :
  limits.is_colimit (sigma.cofan X) :=
{ desc := Œª S, sigma.desc _ $ Œª i, S.Œπ.app i,
  fac' := Œª S i, sigma.Œπ_desc _ _ _,
  uniq' := begin
    intros S m h,
    apply sigma.hom_ext,
    intros i,
    simpa using h i,
  end }

.-- move this
-- @[simps]
def _root_.Profinite.sum_iso_coprod (X Y : Profinite.{u}) :
  Profinite.sum X Y ‚âÖ X ‚®ø Y :=
{ hom := Profinite.sum.desc _ _ limits.coprod.inl limits.coprod.inr,
  inv := limits.coprod.desc (Profinite.sum.inl _ _) (Profinite.sum.inr _ _),
  hom_inv_id' := by { apply Profinite.sum.hom_ext;
    simp only [‚Üê category.assoc, category.comp_id, Profinite.sum.inl_desc,
      limits.coprod.inl_desc, Profinite.sum.inr_desc, limits.coprod.inr_desc] },
  inv_hom_id' := by { apply limits.coprod.hom_ext;
    simp only [‚Üê category.assoc, category.comp_id, Profinite.sum.inl_desc,
      limits.coprod.inl_desc, Profinite.sum.inr_desc, limits.coprod.inr_desc] } }

@[simps]
def sum (X Y : ExtrDisc.{u}) : ExtrDisc.{u} :=
{ val := Profinite.sum X.val Y.val,
  cond := begin
    let Z := Profinite.sum X.val Y.val,
    apply projective.of_iso (Profinite.sum_iso_coprod X.val Y.val).symm,
    apply_instance,
  end }

@[simps]
def sum.inl (X Y : ExtrDisc) : X ‚ü∂ sum X Y :=
‚ü®Profinite.sum.inl _ _‚ü©

@[simps]
def sum.inr (X Y : ExtrDisc) : Y ‚ü∂ sum X Y :=
‚ü®Profinite.sum.inr _ _‚ü©

@[simps]
def sum.desc {X Y Z : ExtrDisc} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  sum X Y ‚ü∂ Z :=
‚ü®Profinite.sum.desc _ _ f.val g.val‚ü©

@[simp]
lemma sum.inl_desc {X Y Z : ExtrDisc} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  sum.inl X Y ‚â´ sum.desc f g = f :=
by { ext1, dsimp, simp }

@[simp]
lemma sum.inr_desc {X Y Z : ExtrDisc} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  sum.inr X Y ‚â´ sum.desc f g = g :=
by { ext1, dsimp, simp }

@[ext]
lemma sum.hom_ext {X Y Z : ExtrDisc} (f g : sum X Y ‚ü∂ Z)
  (hl : sum.inl X Y ‚â´ f = sum.inl X Y ‚â´ g)
  (hr : sum.inr X Y ‚â´ f = sum.inr X Y ‚â´ g) : f = g :=
begin
  ext1,
  apply Profinite.sum.hom_ext,
  { apply_fun (Œª e, e.val) at hl, exact hl },
  { apply_fun (Œª e, e.val) at hr, exact hr }
end

-- move this
lemma _root_.Profinite.empty_is_initial : limits.is_initial Profinite.empty.{u} :=
@limits.is_initial.of_unique.{u} _ _ _ (Œª Y, ‚ü®‚ü®Profinite.empty.elim _‚ü©, Œª f, by { ext, cases x, }‚ü©)

@[simps]
def empty : ExtrDisc :=
{ val := Profinite.empty,
  cond := begin
    let e : Profinite.empty ‚âÖ ‚ä•_ _ :=
    Profinite.empty_is_initial.unique_up_to_iso limits.initial_is_initial,
    apply projective.of_iso e.symm,
    -- apply_instance, <-- missing instance : projective (‚ä•_ _)
    constructor,
    introsI A B f g _,
    refine ‚ü®limits.initial.to A, by simp‚ü©,
  end }

@[simps]
def empty.elim (X : ExtrDisc) : empty ‚ü∂ X :=
‚ü®Profinite.empty.elim _‚ü©

@[ext]
def empty.hom_ext {X : ExtrDisc} (f g : empty ‚ü∂ X) : f = g :=
by { ext x, cases x }

open opposite

variables {C : Type v} [category.{w} C] (F : ExtrDisc.{u}·µí·µñ ‚•§ C)

def terminal_condition [limits.has_terminal C] : Prop :=
  is_iso (limits.terminal.from (F.obj (op empty)))

def binary_product_condition [limits.has_binary_products C] : Prop := ‚àÄ (X Y : ExtrDisc.{u}),
  is_iso (limits.prod.lift (F.map (sum.inl X Y).op) (F.map (sum.inr X Y).op))

end ExtrDisc

namespace Profinite

instance (Y : Profinite) : t2_space Y := infer_instance

def pres (X : Profinite.{u}) : ExtrDisc.{u} :=
ExtrDisc.free X

def pres_œÄ (X : Profinite.{u}) :
  X.pres.val ‚ü∂ X :=
‚ü®ultrafilter.extend id, continuous_ultrafilter_extend _‚ü©

def map_pres {X Y : Profinite.{u}} (f : X ‚ü∂ Y) : X.pres ‚ü∂ Y.pres :=
ExtrDisc.free_functor.map f

-- functoriality of the presentation
@[simp]
lemma map_pres_œÄ {X Y : Profinite.{u}} (f : X ‚ü∂ Y) :
  (map_pres f).val ‚â´ Y.pres_œÄ = X.pres_œÄ ‚â´ f :=
begin
  apply_fun (Œª e, (forget Profinite).map e),
  swap, { exact (forget Profinite).map_injective },
  dsimp [pres_œÄ, map_pres, ExtrDisc.free.lift, ExtrDisc.free.Œπ],
  have : dense_range (ExtrDisc.free.Œπ _ : X ‚Üí X.pres) := dense_range_pure,
  refine this.equalizer _ _ _,
  continuity,
  exact continuous_ultrafilter_extend id,
  apply continuous_ultrafilter_extend,
  exact continuous_ultrafilter_extend id,
  ext,
  dsimp,
  simp,
end

def rels (X : Profinite.{u}) : ExtrDisc.{u} :=
(Profinite.pullback X.pres_œÄ X.pres_œÄ).pres

def rels_fst (X : Profinite.{u}) : X.rels ‚ü∂ X.pres :=
‚ü®pres_œÄ _ ‚â´ Profinite.pullback.fst _ _‚ü©

def rels_snd (X : Profinite.{u}) : X.rels ‚ü∂ X.pres :=
‚ü®pres_œÄ _ ‚â´ Profinite.pullback.snd _ _‚ü©

def map_rels {X Y : Profinite.{u}} (f : X ‚ü∂ Y) : X.rels ‚ü∂ Y.rels :=
map_pres $ pullback.lift _ _
  (pullback.fst _ _ ‚â´ (map_pres f).val)
  (pullback.snd _ _ ‚â´ (map_pres f).val) sorry

lemma rels_fst_map {X Y : Profinite.{u}} (f : X ‚ü∂ Y) :
  X.rels_fst ‚â´ map_pres f = map_rels f ‚â´ Y.rels_fst := sorry

lemma rels_snd_map {X Y : Profinite.{u}} (f : X ‚ü∂ Y) :
  X.rels_snd ‚â´ map_pres f = map_rels f ‚â´ Y.rels_snd := sorry

/-

Given `X : Profinite`, this is the diagram

Œ≤(Œ≤X √ó_X Œ≤X) ‚áâ Œ≤X

whose colimit is isomorphic to `X`, except here we consider it as a diagram in `ExtrDisc`.

Notation: `Œ≤X` = the Stone Cech compactification of `X^Œ¥` (= the set `X` as a discrete space).

-/
def extr_diagram (X : Profinite) : limits.walking_parallel_pair.{u} ‚•§ ExtrDisc.{u} :=
limits.parallel_pair X.rels_fst X.rels_snd

end Profinite

section

variables (C : Type v) [category.{w} C] [limits.has_terminal C] [limits.has_binary_products C]

structure ExtrSheaf :=
(val : ExtrDisc.{u}·µí·µñ ‚•§ C)
(terminal : ExtrDisc.terminal_condition val)
(binary_product : ExtrDisc.binary_product_condition val)

namespace ExtrSheaf

variable {C}

@[ext] structure hom (X Y : ExtrSheaf C) := mk :: (val : X.val ‚ü∂ Y.val)

@[simps]
instance : category (ExtrSheaf C) :=
{ hom := hom,
  id := Œª X, ‚ü®ùüô _‚ü©,
  comp := Œª A B C f g, ‚ü®f.val ‚â´ g.val‚ü©,
  id_comp' := Œª X Y Œ∑, by { ext1, simp },
  comp_id' := Œª X Y Œ≥, by { ext1, simp },
  assoc' := Œª X Y Z W a b c, by { ext1, simp } }

end ExtrSheaf

@[simps]
def ExtrSheaf_to_presheaf : ExtrSheaf C ‚•§ ExtrDisc·µí·µñ ‚•§ C :=
{ obj := Œª X, X.val,
  map := Œª X Y f, f.val }

instance : full (ExtrSheaf_to_presheaf C) := ‚ü®Œª _ _ f, ‚ü®f‚ü©, Œª X Y f, by { ext1, refl }‚ü©
instance : faithful (ExtrSheaf_to_presheaf C) := ‚ü®‚ü©

variable [limits.has_equalizers C]

@[simps]
def Condensed_to_ExtrSheaf : Condensed C ‚•§ ExtrSheaf C :=
{ obj := Œª F,
  { val := ExtrDisc_to_Profinite.op ‚ãô F.val,
    terminal := begin
      have hF := F.cond,
      rw (functor.is_proetale_sheaf_tfae F.val).out 0 3 at hF,
      exact hF.1,
    end,
    binary_product := begin
      have hF := F.cond,
      rw (functor.is_proetale_sheaf_tfae F.val).out 0 3 at hF,
      rcases hF with ‚ü®h1,h2,h3‚ü©,
      intros X Y,
      apply h2,
    end },
  map := Œª F G Œ∑, ‚ü® whisker_left _ Œ∑.val ‚ü© }

variable {C}

def ExtrSheaf.extend_to_obj (F : ExtrSheaf.{u} C) (X : Profinite.{u}) : C :=
limits.equalizer (F.val.map X.rels_fst.op) (F.val.map X.rels_snd.op)

def ExtrSheaf.extend_to_hom (F : ExtrSheaf.{u} C) {X Y : Profinite.{u}} (f : X ‚ü∂ Y) :
  F.extend_to_obj Y ‚ü∂ F.extend_to_obj X :=
limits.equalizer.lift (limits.equalizer.Œπ _ _ ‚â´ F.val.map (Profinite.map_pres f).op)
begin
  simp only [category.assoc, ‚Üê F.val.map_comp, ‚Üê op_comp],
  have := limits.equalizer.condition (F.val.map Y.rels_fst.op) (F.val.map Y.rels_snd.op),
  simp only [Profinite.rels_fst_map, Profinite.rels_snd_map, op_comp, F.val.map_comp,
    ‚Üê category.assoc, this],
end

def ExtrSheaf.extend_to_presheaf (F : ExtrSheaf.{u} C) : Profinite·µí·µñ ‚•§ C :=
{ obj := Œª X, F.extend_to_obj X.unop,
  map := Œª X Y f, F.extend_to_hom f.unop,
  map_id' := sorry,
  map_comp' := sorry }

-- This will be a bit hard... One should use the proetale sheaf condition involving
-- binary products, the empty profinite set, and equalizers.
theorem ExtrSheaf.extend_is_sheaf (F : ExtrSheaf.{u} C) : presheaf.is_sheaf proetale_topology
  F.extend_to_presheaf := sorry

def ExtrSheaf.extend (F : ExtrSheaf.{u} C) : Condensed C :=
‚ü®F.extend_to_presheaf, F.extend_is_sheaf‚ü©

def ExtrSheaf.extend_restrict_hom (F : ExtrSheaf.{u} C) :
  F ‚ü∂ (Condensed_to_ExtrSheaf C).obj F.extend := ExtrSheaf.hom.mk $
{ app := Œª X, limits.equalizer.lift
    (F.val.map $ eq_to_hom (X.op_unop).symm ‚â´ quiver.hom.op ‚ü®X.unop.val.pres_œÄ‚ü©) sorry,
  naturality' := sorry }

instance extend_restrict_hom_app_is_iso (F : ExtrSheaf.{u} C) (X : ExtrDisc·µí·µñ) :
  is_iso (F.extend_restrict_hom.val.app X) := sorry

instance extend_restrict_hom (F : ExtrSheaf.{u} C) : is_iso F.extend_restrict_hom :=
begin
  haveI : is_iso F.extend_restrict_hom.val := nat_iso.is_iso_of_is_iso_app _,
  use ‚ü®inv F.extend_restrict_hom.val‚ü©,
  split,
  all_goals { ext1, dsimp, simp }
end

def Condensed.restrict_extend_hom (F : Condensed.{u} C) :
  F ‚ü∂ ((Condensed_to_ExtrSheaf C).obj F).extend := Sheaf.hom.mk $
{ app := Œª X, limits.equalizer.lift (F.val.map X.unop.pres_œÄ.op) sorry,
  naturality' := sorry }

instance restrict_extend_hom_app_is_iso (F : Condensed.{u} C) (X : Profinite·µí·µñ) :
  is_iso (F.restrict_extend_hom.val.app X) := sorry

instance restrict_extend_hom_is_iso (F : Condensed.{u} C) :
  is_iso F.restrict_extend_hom :=
begin
  haveI : is_iso F.restrict_extend_hom.val := nat_iso.is_iso_of_is_iso_app _,
  use ‚ü®inv F.restrict_extend_hom.val‚ü©,
  split,
  all_goals { ext1, dsimp, simp }
end

def ExtrSheaf.extend_nat_trans {F G : ExtrSheaf.{u} C} (Œ∑ : F ‚ü∂ G) :
  F.extend_to_presheaf ‚ü∂ G.extend_to_presheaf :=
{ app := Œª X, limits.equalizer.lift
    (limits.equalizer.Œπ _ _ ‚â´ Œ∑.val.app _) sorry,
  naturality' := sorry }

@[simp]
lemma ExtrSheaf.extend_nat_trans_id (F : ExtrSheaf.{u} C) :
  ExtrSheaf.extend_nat_trans (ùüô F) = ùüô _ := sorry

@[simp]
lemma ExtrSheaf.extend_nat_trans_comp {F G H : ExtrSheaf.{u} C} (Œ∑ : F ‚ü∂ G) (Œ≥ : G ‚ü∂ H) :
  ExtrSheaf.extend_nat_trans (Œ∑ ‚â´ Œ≥) =
  ExtrSheaf.extend_nat_trans Œ∑ ‚â´ ExtrSheaf.extend_nat_trans Œ≥ := sorry

variable (C)
@[simps]
def ExtrSheaf_to_Condensed : ExtrSheaf.{u} C ‚•§ Condensed.{u} C :=
{ obj := Œª F, F.extend,
  map := Œª F G Œ∑, ‚ü®ExtrSheaf.extend_nat_trans Œ∑‚ü©,
  map_id' := Œª X, by { ext1, apply ExtrSheaf.extend_nat_trans_id },
  map_comp' := Œª X Y Z f g, by { ext1, apply ExtrSheaf.extend_nat_trans_comp } }

def ExtrSheaf_Condensed_equivalence : ExtrSheaf.{u} C ‚âå Condensed.{u} C :=
equivalence.mk (ExtrSheaf_to_Condensed C) (Condensed_to_ExtrSheaf C)
(nat_iso.of_components (Œª X,
  { hom := X.extend_restrict_hom,
    inv := let e := inv X.extend_restrict_hom in e,
    hom_inv_id' := is_iso.hom_inv_id _,
    inv_hom_id' := is_iso.inv_hom_id _ }) sorry)
(nat_iso.of_components (Œª X,
  { hom := let e := inv X.restrict_extend_hom in e,
    inv := X.restrict_extend_hom,
    hom_inv_id' := is_iso.inv_hom_id _,
    inv_hom_id' := is_iso.hom_inv_id _ }) sorry)

end
