import topology.category.Profinite.projective
import for_mathlib.Profinite.product

open category_theory

universe u

structure ExtrDisc :=
(val : Profinite.{u})
[cond : projective val]

namespace ExtrDisc

@[ext]
structure hom (X Y : ExtrDisc) :=
mk :: (val : X.val ‚ü∂ Y.val)

@[simps]
instance : category ExtrDisc :=
{ hom := hom,
  id := Œª X, ‚ü®ùüô _‚ü©,
  comp := Œª X Y Z f g, ‚ü®f.val ‚â´ g.val‚ü© }

@[simps]
def _root_.ExtrDisc_to_Profinite : ExtrDisc ‚•§ Profinite :=
{ obj := val,
  map := Œª X Y f, f.val }

instance : concrete_category ExtrDisc :=
{ forget := ExtrDisc_to_Profinite ‚ãô forget _,
  forget_faithful := ‚ü®‚ü© }

instance (X : ExtrDisc) : projective X.val := X.cond

example (X : ExtrDisc) : projective (ExtrDisc_to_Profinite.obj X) :=
by { dsimp, apply_instance }

noncomputable
def split {X Y : ExtrDisc} (f : X ‚ü∂ Y) (hf : function.surjective f.val) :
  Y ‚ü∂ X :=
begin
  have : epi f.val, by rwa Profinite.epi_iff_surjective f.val,
  resetI,
  choose g h using projective.factors (ùüô Y.val) f.val,
  exact ‚ü®g‚ü©,
end

@[simp]
lemma splitting_is_splitting {X Y : ExtrDisc} (f : X ‚ü∂ Y)
  (hf : function.surjective f.val) : split f hf ‚â´ f = ùüô _ :=
begin
  have : epi f.val, by rwa Profinite.epi_iff_surjective f.val,
  resetI,
  ext1,
  exact (projective.factors (ùüô Y.val) f.val).some_spec,
end

end ExtrDisc
