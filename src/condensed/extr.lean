import topology.category.Profinite.projective
import for_mathlib.Profinite.product

@[simp]
lemma ultrafilter_extend_extends_apply {Œ± X : Type*}
  [topological_space X] [t2_space X]
  (f : Œ± ‚Üí X) (a : Œ±) :
  ultrafilter.extend f (pure a) = f a :=
begin
  change (ultrafilter.extend _ ‚àò pure) _ = _,
  rw ultrafilter_extend_extends,
end

open category_theory

universe u

structure ExtrDisc :=
(val : Profinite.{u})
[cond : projective val]

namespace ExtrDisc

@[simps]
instance : category ExtrDisc :=
{ hom := Œª X Y, X.val ‚ü∂ Y.val,
  id := Œª X, ùüô _,
  comp := Œª X Y Z f g, f ‚â´ g }

@[simps]
def _root_.ExtrDisc_to_Profinite : ExtrDisc ‚•§ Profinite :=
{ obj := val,
  map := Œª X Y f, f }

instance : concrete_category ExtrDisc.{u} :=
{ forget := ExtrDisc_to_Profinite ‚ãô forget _,
  forget_faithful := ‚ü®‚ü© }

instance : has_coe_to_sort ExtrDisc Type* :=
concrete_category.has_coe_to_sort _

instance {X Y : ExtrDisc} : has_coe_to_fun (X ‚ü∂ Y) (Œª f, X ‚Üí Y) :=
‚ü®Œª f, f‚ü©

instance (X : ExtrDisc) : projective X.val := X.cond

example (X : ExtrDisc) : projective (ExtrDisc_to_Profinite.obj X) :=
by { dsimp, apply_instance }

noncomputable
def split {X Y : ExtrDisc} (f : X ‚ü∂ Y) (hf : function.surjective f) :
  Y ‚ü∂ X :=
begin
  let f' : X.val ‚ü∂ Y.val := f,
  have : epi f', by  rwa Profinite.epi_iff_surjective f',
  resetI,
  choose g h using projective.factors (ùüô Y.val) f,
  exact ‚ü®g‚ü©,
end

@[simp, reassoc]
lemma splitting_is_splitting {X Y : ExtrDisc} (f : X ‚ü∂ Y)
  (hf : function.surjective f) : split f hf ‚â´ f = ùüô _ :=
begin
  let f' : X.val ‚ü∂ Y.val := f,
  have : epi f', by  rwa Profinite.epi_iff_surjective f',
  resetI,
  exact (projective.factors (ùüô Y.val) f).some_spec,
end

instance (X : ExtrDisc) : topological_space X :=
show topological_space X.val, by apply_instance

instance (X : ExtrDisc) : compact_space X :=
show compact_space X.val, by apply_instance

instance (X : ExtrDisc) : t2_space X :=
show t2_space X.val, by apply_instance

instance (X : ExtrDisc) : totally_disconnected_space X :=
show totally_disconnected_space X.val, by apply_instance

def free (Œ± : Type u) : ExtrDisc.{u} :=
{ val := Profinite.of $ ultrafilter Œ±,
  cond := Profinite.projective_ultrafilter Œ± }

def free.Œπ (Œ± : Type u) : Œ± ‚Üí free Œ± :=
Œª t, (pure t : ultrafilter Œ±)

@[simp]
lemma free.Œπ_apply {Œ± : Type u} (a : Œ±) : free.Œπ Œ± a = (pure a : ultrafilter Œ±) := rfl

noncomputable
def free.lift {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) : free Œ± ‚ü∂ X :=
‚ü®ultrafilter.extend f, continuous_ultrafilter_extend _‚ü©

@[simp]
lemma free.lift_apply {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) (F : free Œ±) :
  free.lift f F = ultrafilter.extend f F := rfl

@[simp]
lemma free.Œπ_lift {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) :
  free.lift f ‚àò free.Œπ _ = f :=
begin
  ext,
  dsimp,
  simp,
end

@[simp]
lemma free.Œπ_lift_apply {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X) (a : Œ±) :
  free.lift f (free.Œπ Œ± a) = f a :=
show (free.lift f ‚àò free.Œπ Œ±) a = f a, by simp

lemma free.lift_unique {X : ExtrDisc.{u}} {Œ± : Type u} (f : Œ± ‚Üí X)
  (g : free Œ± ‚ü∂ X) (h : g ‚àò free.Œπ Œ± = f) : g = free.lift f :=
begin
  letI hh : topological_space Œ± := ‚ä•,
  have : dense_range (free.Œπ Œ±) := dense_range_pure,
  rw ‚Üê free.Œπ_lift f at h,
  ext1,
  have := this.equalizer _ _ h,
  erw this,
  exact g.continuous,
  exact (free.lift f).continuous,
end

@[ext]
lemma free.hom_ext {X : ExtrDisc.{u}} {Œ± : Type u} (f g : free Œ± ‚ü∂ X)
  (h : f ‚àò (free.Œπ Œ±) = g ‚àò (free.Œπ Œ±)) : f = g :=
by rw [free.lift_unique _ f rfl, free.lift_unique _ g rfl, h]

@[simps]
noncomputable
def free_functor : Type u ‚•§ ExtrDisc.{u} :=
{ obj := Œª Œ±, free Œ±,
  map := Œª Œ± Œ≤ f, free.lift $ (free.Œπ _) ‚àò f,
  map_id' := by tidy,
  map_comp' := begin
    intros Œ± Œ≤ Œ≥ f g,
    ext : 2,
    dsimp,
    simp,
  end } .

noncomputable
def adjunction : free_functor ‚ä£ forget _ :=
adjunction.mk_of_hom_equiv $
{ hom_equiv := Œª Œ± X,
  { to_fun := Œª f, f ‚àò free.Œπ _,
    inv_fun := Œª f, free.lift f,
    left_inv := Œª f, by { ext, dsimp, simp },
    right_inv := Œª f, by { ext, dsimp, simp } },
  hom_equiv_naturality_left_symm' := Œª _ _ _ _ _, by { ext, dsimp, simp },
  hom_equiv_naturality_right' := Œª _ _ _ _ _, by { ext, dsimp, simp } }

end ExtrDisc
