import topology.category.Profinite.projective
import for_mathlib.Profinite.disjoint_union
import condensed.is_proetale_sheaf
import condensed.basic

noncomputable theory

-- Move this
@[simp]
lemma ultrafilter_extend_extends_apply {Œ± X : Type*}
  [topological_space X] [t2_space X]
  (f : Œ± ‚Üí X) (a : Œ±) :
  ultrafilter.extend f (pure a) = f a :=
begin
  change (ultrafilter.extend _ ‚àò pure) _ = _,
  rw ultrafilter_extend_extends,
end

open category_theory

-- Move this
lemma category_theory.is_iso.is_iso_of_is_iso_comp
  {C : Type*} [category C] {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  [is_iso f] [is_iso (f ‚â´ g)] : is_iso g :=
begin
  have : g = (inv f) ‚â´ (f ‚â´ g), by simp,
  rw this,
  apply_instance
end

-- Move this
lemma category_theory.is_iso.is_iso_of_comp_is_iso
  {C : Type*} [category C] {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  [is_iso g] [is_iso (f ‚â´ g)] : is_iso f :=
begin
  have : f = f ‚â´ g ‚â´ inv g, by simp,
  rw [this, ‚Üê category.assoc],
  apply_instance,
end

universes u w v

structure ExtrDisc :=
(val : Profinite.{u})
[cond : projective val]

namespace ExtrDisc

@[ext]
structure hom (X Y : ExtrDisc) := mk :: (val : X.val ‚ü∂ Y.val)

def of (X : Profinite) [projective X] : ExtrDisc := ‚ü®X‚ü©

@[simp]
def of_val (X : Profinite) [projective X] : (of X).val = X := rfl

@[simps]
instance : category ExtrDisc :=
{ hom := hom,
  id := Œª X, ‚ü®ùüô _‚ü©,
  comp := Œª X Y Z f g, ‚ü®f.val ‚â´ g.val‚ü© }

@[simps]
def _root_.ExtrDisc_to_Profinite : ExtrDisc ‚•§ Profinite :=
{ obj := val,
  map := Œª X Y f, f.val }

instance : concrete_category ExtrDisc.{u} :=
{ forget := ExtrDisc_to_Profinite ‚ãô forget _,
  forget_faithful := ‚ü®‚ü© }

instance : has_coe_to_sort ExtrDisc Type* :=
concrete_category.has_coe_to_sort _

instance {X Y : ExtrDisc} : has_coe_to_fun (X ‚ü∂ Y) (Œª f, X ‚Üí Y) :=
‚ü®Œª f, f.val‚ü©

@[simp]
lemma coe_fun_eq {X Y : ExtrDisc} (f : X ‚ü∂ Y) (x : X) :
  f x = f.val x := rfl

instance (X : ExtrDisc) : projective X.val := X.cond

example (X : ExtrDisc) : projective (ExtrDisc_to_Profinite.obj X) :=
by { dsimp, apply_instance }

def lift {X Y : Profinite} {P : ExtrDisc} (f : X ‚ü∂ Y)
  (hf : function.surjective f) (e : P.val ‚ü∂ Y) : P.val ‚ü∂ X :=
begin
  haveI : epi f := by rwa Profinite.epi_iff_surjective f,
  choose g h using projective.factors e f,
  exact g,
end

@[simp, reassoc]
lemma lift_lifts {X Y : Profinite} {P : ExtrDisc} (f : X ‚ü∂ Y)
  (hf : function.surjective f) (e : P.val ‚ü∂ Y) :
  lift f hf e ‚â´ f = e :=
begin
  haveI : epi f := by rwa Profinite.epi_iff_surjective f,
  apply (projective.factors e f).some_spec,
end

instance (X : ExtrDisc) : topological_space X :=
show topological_space X.val, by apply_instance

instance (X : ExtrDisc) : compact_space X :=
show compact_space X.val, by apply_instance

instance (X : ExtrDisc) : t2_space X :=
show t2_space X.val, by apply_instance

instance (X : ExtrDisc) : totally_disconnected_space X :=
show totally_disconnected_space X.val, by apply_instance

.-- move this
-- @[simps]
def _root_.Profinite.sum_iso_coprod (X Y : Profinite.{u}) :
  Profinite.sum X Y ‚âÖ X ‚®ø Y :=
{ hom := Profinite.sum.desc _ _ limits.coprod.inl limits.coprod.inr,
  inv := limits.coprod.desc (Profinite.sum.inl _ _) (Profinite.sum.inr _ _),
  hom_inv_id' := by { apply Profinite.sum.hom_ext;
    simp only [‚Üê category.assoc, category.comp_id, Profinite.sum.inl_desc,
      limits.coprod.inl_desc, Profinite.sum.inr_desc, limits.coprod.inr_desc] },
  inv_hom_id' := by { apply limits.coprod.hom_ext;
    simp only [‚Üê category.assoc, category.comp_id, Profinite.sum.inl_desc,
      limits.coprod.inl_desc, Profinite.sum.inr_desc, limits.coprod.inr_desc] } }

@[simps]
def sum (X Y : ExtrDisc.{u}) : ExtrDisc.{u} :=
{ val := Profinite.sum X.val Y.val,
  cond := begin
    let Z := Profinite.sum X.val Y.val,
    apply projective.of_iso (Profinite.sum_iso_coprod X.val Y.val).symm,
    apply_instance,
  end }

@[simps]
def sum.inl (X Y : ExtrDisc) : X ‚ü∂ sum X Y :=
‚ü®Profinite.sum.inl _ _‚ü©

@[simps]
def sum.inr (X Y : ExtrDisc) : Y ‚ü∂ sum X Y :=
‚ü®Profinite.sum.inr _ _‚ü©

@[simps]
def sum.desc {X Y Z : ExtrDisc} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  sum X Y ‚ü∂ Z :=
‚ü®Profinite.sum.desc _ _ f.val g.val‚ü©

@[simp]
lemma sum.inl_desc {X Y Z : ExtrDisc} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  sum.inl X Y ‚â´ sum.desc f g = f :=
by { ext1, dsimp, simp }

@[simp]
lemma sum.inr_desc {X Y Z : ExtrDisc} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  sum.inr X Y ‚â´ sum.desc f g = g :=
by { ext1, dsimp, simp }

@[ext]
lemma sum.hom_ext {X Y Z : ExtrDisc} (f g : sum X Y ‚ü∂ Z)
  (hl : sum.inl X Y ‚â´ f = sum.inl X Y ‚â´ g)
  (hr : sum.inr X Y ‚â´ f = sum.inr X Y ‚â´ g) : f = g :=
begin
  ext1,
  apply Profinite.sum.hom_ext,
  { apply_fun (Œª e, e.val) at hl, exact hl },
  { apply_fun (Œª e, e.val) at hr, exact hr }
end

-- move this
lemma _root_.Profinite.empty_is_initial : limits.is_initial Profinite.empty.{u} :=
@limits.is_initial.of_unique.{u} _ _ _ (Œª Y, ‚ü®‚ü®Profinite.empty.elim _‚ü©, Œª f, by { ext, cases x, }‚ü©)

@[simps]
def empty : ExtrDisc :=
{ val := Profinite.empty,
  cond := begin
    let e : Profinite.empty ‚âÖ ‚ä•_ _ :=
    Profinite.empty_is_initial.unique_up_to_iso limits.initial_is_initial,
    apply projective.of_iso e.symm,
    -- apply_instance, <-- missing instance : projective (‚ä•_ _)
    constructor,
    introsI A B f g _,
    refine ‚ü®limits.initial.to A, by simp‚ü©,
  end }

@[simps]
def empty.elim (X : ExtrDisc) : empty ‚ü∂ X :=
‚ü®Profinite.empty.elim _‚ü©

@[ext]
def empty.hom_ext {X : ExtrDisc} (f g : empty ‚ü∂ X) : f = g :=
by { ext x, cases x }

open opposite

variables {C : Type v} [category.{w} C] (F : ExtrDisc.{u}·µí·µñ ‚•§ C)

def terminal_condition [limits.has_terminal C] : Prop :=
  is_iso (limits.terminal.from (F.obj (op empty)))

def binary_product_condition [limits.has_binary_products C] : Prop := ‚àÄ (X Y : ExtrDisc.{u}),
  is_iso (limits.prod.lift (F.map (sum.inl X Y).op) (F.map (sum.inr X Y).op))

end ExtrDisc

namespace Profinite

lemma exists_ExtrDisc (B : Profinite.{u}) :
  ‚àÉ (X : ExtrDisc.{u}) (f : X.val ‚ü∂ B), function.surjective f :=
begin
  obtain ‚ü®‚ü®X',hX,f,hf‚ü©‚ü© := enough_projectives.presentation B,
  dsimp at hX hf,
  resetI,
  refine ‚ü®‚ü®X'‚ü©,f,_‚ü©,
  rwa ‚Üê Profinite.epi_iff_surjective,
end

def E (B : Profinite.{u}) : ExtrDisc := B.exists_ExtrDisc.some

def œÄ (B : Profinite.{u}) : B.E.val ‚ü∂ B := B.exists_ExtrDisc.some_spec.some

lemma œÄ_surjective (B : Profinite.{u}) :
  function.surjective B.œÄ := B.exists_ExtrDisc.some_spec.some_spec

--instance (Y : Profinite) : t2_space Y := infer_instance

structure presentation (B : Profinite) :=
(G : ExtrDisc)
(œÄ : G.val ‚ü∂ B)
(hœÄ : function.surjective œÄ)
(R : ExtrDisc)
(r : R.val ‚ü∂ Profinite.pullback œÄ œÄ)
(hr : function.surjective r)

@[simps]
def presentation.fst {B : Profinite} (X : B.presentation) :
  X.R ‚ü∂ X.G := ‚ü®X.r ‚â´ pullback.fst _ _‚ü©

@[simps]
def presentation.snd {B : Profinite} (X : B.presentation) :
  X.R ‚ü∂ X.G := ‚ü®X.r ‚â´ pullback.snd _ _‚ü©

lemma presentation.condition {B : Profinite} (X : B.presentation) :
  X.fst.val ‚â´ X.œÄ = X.snd.val ‚â´ X.œÄ :=
begin
  dsimp [presentation.fst, presentation.snd],
  simp [pullback.condition],
end

/-
@[simps]
def presentation.map_G {B‚ÇÅ B‚ÇÇ : Profinite} (X‚ÇÅ : B‚ÇÅ.presentation)
  (X‚ÇÇ : B‚ÇÇ.presentation) (f : B‚ÇÅ ‚ü∂ B‚ÇÇ) : X‚ÇÅ.G ‚ü∂ X‚ÇÇ.G :=
‚ü®ExtrDisc.lift X‚ÇÇ.œÄ X‚ÇÇ.hœÄ (X‚ÇÅ.œÄ ‚â´ f)‚ü©

@[simp, reassoc]
lemma presentation.map_G_œÄ {B‚ÇÅ B‚ÇÇ : Profinite} (X‚ÇÅ : B‚ÇÅ.presentation)
  (X‚ÇÇ : B‚ÇÇ.presentation) (f : B‚ÇÅ ‚ü∂ B‚ÇÇ) :
  (X‚ÇÅ.map_G X‚ÇÇ f).val ‚â´ X‚ÇÇ.œÄ = X‚ÇÅ.œÄ ‚â´ f :=
begin
  dsimp [presentation.map_G],
  simp,
end

-- this is essentially a truncated simplicial homotopy between `œÉ‚ÇÅ` and `œÉ‚ÇÇ`.
@[simps]
def presentation.map_R {B‚ÇÅ B‚ÇÇ : Profinite} (X‚ÇÅ : B‚ÇÅ.presentation)
  (X‚ÇÇ : B‚ÇÇ.presentation) (f : B‚ÇÅ ‚ü∂ B‚ÇÇ)
  (œÉ‚ÇÅ œÉ‚ÇÇ : X‚ÇÅ.G ‚ü∂ X‚ÇÇ.G)
  (w‚ÇÅ : œÉ‚ÇÅ.val ‚â´ X‚ÇÇ.œÄ = X‚ÇÅ.œÄ ‚â´ f)
  (w‚ÇÇ : œÉ‚ÇÇ.val ‚â´ X‚ÇÇ.œÄ = X‚ÇÅ.œÄ ‚â´ f) : X‚ÇÅ.R ‚ü∂ X‚ÇÇ.R :=
‚ü®ExtrDisc.lift _ X‚ÇÇ.hr $ X‚ÇÅ.r ‚â´ pullback.lift _ _
  (pullback.fst _ _ ‚â´ œÉ‚ÇÅ.val)
  (pullback.snd _ _ ‚â´ œÉ‚ÇÇ.val)
  (by simp [pullback.condition_assoc, w‚ÇÅ, w‚ÇÇ] )‚ü©

@[simp, reassoc]
lemma presentation.map_R_fst {B‚ÇÅ B‚ÇÇ : Profinite} (X‚ÇÅ : B‚ÇÅ.presentation)
  (X‚ÇÇ : B‚ÇÇ.presentation) (f : B‚ÇÅ ‚ü∂ B‚ÇÇ) (œÉ‚ÇÅ œÉ‚ÇÇ : X‚ÇÅ.G ‚ü∂ X‚ÇÇ.G)
  (w‚ÇÅ : œÉ‚ÇÅ.val ‚â´ X‚ÇÇ.œÄ = X‚ÇÅ.œÄ ‚â´ f)
  (w‚ÇÇ : œÉ‚ÇÇ.val ‚â´ X‚ÇÇ.œÄ = X‚ÇÅ.œÄ ‚â´ f) :
  X‚ÇÅ.map_R X‚ÇÇ f œÉ‚ÇÅ œÉ‚ÇÇ w‚ÇÅ w‚ÇÇ ‚â´ X‚ÇÇ.fst = X‚ÇÅ.fst ‚â´ œÉ‚ÇÅ := sorry


@[simp, reassoc]
lemma presentation.map_R_snd {B‚ÇÅ B‚ÇÇ : Profinite} (X‚ÇÅ : B‚ÇÅ.presentation)
  (X‚ÇÇ : B‚ÇÇ.presentation) (f : B‚ÇÅ ‚ü∂ B‚ÇÇ) (œÉ‚ÇÅ œÉ‚ÇÇ : X‚ÇÅ.G ‚ü∂ X‚ÇÇ.G)
  (w‚ÇÅ : œÉ‚ÇÅ.val ‚â´ X‚ÇÇ.œÄ = X‚ÇÅ.œÄ ‚â´ f)
  (w‚ÇÇ : œÉ‚ÇÇ.val ‚â´ X‚ÇÇ.œÄ = X‚ÇÅ.œÄ ‚â´ f) :
  X‚ÇÅ.map_R X‚ÇÇ f œÉ‚ÇÅ œÉ‚ÇÇ w‚ÇÅ w‚ÇÇ ‚â´ X‚ÇÇ.snd = X‚ÇÅ.snd ‚â´ œÉ‚ÇÇ := sorry
-/

@[simps G œÄ]
def pres_with (B : Profinite) {X : ExtrDisc} (œÄ : X.val ‚ü∂ B) (hœÄ : function.surjective œÄ) :
  B.presentation :=
{ G := X,
  œÄ := œÄ,
  hœÄ := hœÄ,
  R := (Profinite.pullback œÄ œÄ).E,
  r := (Profinite.pullback œÄ œÄ).œÄ,
  hr := (Profinite.pullback œÄ œÄ).œÄ_surjective }

lemma exists_presentation (X : Profinite) : ‚àÉ (P : X.presentation), true :=
‚ü®X.pres_with X.œÄ X.œÄ_surjective, trivial‚ü©

@[irreducible]
def pres (X : Profinite.{u}) : X.presentation :=
X.exists_presentation.some

structure presentation.hom_over {B‚ÇÅ B‚ÇÇ : Profinite}
  (X‚ÇÅ : B‚ÇÅ.presentation) (X‚ÇÇ : B‚ÇÇ.presentation) (f : B‚ÇÅ ‚ü∂ B‚ÇÇ) :=
(g : X‚ÇÅ.G ‚ü∂ X‚ÇÇ.G)
(w : ExtrDisc.hom.val g ‚â´ X‚ÇÇ.œÄ = X‚ÇÅ.œÄ ‚â´ f)
(r : X‚ÇÅ.R ‚ü∂ X‚ÇÇ.R)
(fst : r ‚â´ X‚ÇÇ.fst = X‚ÇÅ.fst ‚â´ g)
(snd : r ‚â´ X‚ÇÇ.snd = X‚ÇÅ.snd ‚â´ g)

lemma presentation.exists_lift {B‚ÇÅ B‚ÇÇ : Profinite}
  (X‚ÇÅ : B‚ÇÅ.presentation) (X‚ÇÇ : B‚ÇÇ.presentation) (f : B‚ÇÅ ‚ü∂ B‚ÇÇ) :
  ‚àÉ F : X‚ÇÅ.hom_over X‚ÇÇ f, true :=
begin
  /-
  let g : X‚ÇÅ.G ‚ü∂ X‚ÇÇ.G := ‚ü®ExtrDisc.lift _ X‚ÇÇ.hœÄ (X‚ÇÅ.œÄ ‚â´ f)‚ü©,
  let r' : X‚ÇÅ.R.val ‚ü∂
  refine ‚ü®‚ü®‚ü®ExtrDisc.lift _ X‚ÇÇ.hœÄ (X‚ÇÅ.œÄ ‚â´ f)‚ü©, _, ‚ü®ExtrDisc.lift _ X‚ÇÇ.hr _‚ü©, _, _‚ü©, trivial‚ü©,
  { ext1,
    simp },
  { refine pullback.lift _ _ _ _ _,
    exact X‚ÇÅ.fst ‚â´
  }
  -/
  sorry
end

@[irreducible]
def presentation.lift {B‚ÇÅ B‚ÇÇ : Profinite}
  (X‚ÇÅ : B‚ÇÅ.presentation) (X‚ÇÇ : B‚ÇÇ.presentation) (f : B‚ÇÅ ‚ü∂ B‚ÇÇ) :
  X‚ÇÅ.hom_over X‚ÇÇ f := (X‚ÇÅ.exists_lift X‚ÇÇ f).some

def presentation.id {B : Profinite} (X : B.presentation) :
  X.hom_over X (ùüô _) :=
{ g := ùüô _,
  w := by simp,
  r := ùüô _,
  fst := by simp,
  snd := by simp }

def presentation.hom_over.comp {B‚ÇÅ B‚ÇÇ B‚ÇÉ : Profinite}
  {X‚ÇÅ : B‚ÇÅ.presentation}
  {X‚ÇÇ : B‚ÇÇ.presentation}
  {X‚ÇÉ : B‚ÇÉ.presentation}
  {f‚ÇÅ : B‚ÇÅ ‚ü∂ B‚ÇÇ}
  {f‚ÇÇ : B‚ÇÇ ‚ü∂ B‚ÇÉ}
  (e‚ÇÅ : X‚ÇÅ.hom_over X‚ÇÇ f‚ÇÅ) (e‚ÇÇ : X‚ÇÇ.hom_over X‚ÇÉ f‚ÇÇ) : X‚ÇÅ.hom_over X‚ÇÉ (f‚ÇÅ ‚â´ f‚ÇÇ) :=
{ g := e‚ÇÅ.g ‚â´ e‚ÇÇ.g,
  w := by simp [e‚ÇÇ.w, reassoc_of e‚ÇÅ.w],
  r := e‚ÇÅ.r ‚â´ e‚ÇÇ.r,
  fst := by simp [e‚ÇÇ.fst, reassoc_of e‚ÇÅ.fst],
  snd := by simp [e‚ÇÇ.snd, reassoc_of e‚ÇÅ.snd] }

def presentation.hom_over.map {B‚ÇÅ B‚ÇÇ : Profinite}
  {X‚ÇÅ : B‚ÇÅ.presentation}
  {X‚ÇÇ : B‚ÇÇ.presentation}
  (f‚ÇÅ f‚ÇÇ : B‚ÇÅ ‚ü∂ B‚ÇÇ)
  (e : X‚ÇÅ.hom_over X‚ÇÇ f‚ÇÅ)
  (h : f‚ÇÅ = f‚ÇÇ) :
  X‚ÇÅ.hom_over X‚ÇÇ f‚ÇÇ := by rwa ‚Üê h

structure presentation.hom_over.relator {B‚ÇÅ B‚ÇÇ : Profinite} {X‚ÇÅ : B‚ÇÅ.presentation}
  {X‚ÇÇ : B‚ÇÇ.presentation} {f : B‚ÇÅ ‚ü∂ B‚ÇÇ} (e‚ÇÅ e‚ÇÇ : X‚ÇÅ.hom_over X‚ÇÇ f) :=
(r : X‚ÇÅ.G ‚ü∂ X‚ÇÇ.R)
(fst : r ‚â´ X‚ÇÇ.fst = e‚ÇÅ.g)
(snd : r ‚â´ X‚ÇÇ.snd = e‚ÇÇ.g)

lemma presentation.hom_over.exists_relator {B‚ÇÅ B‚ÇÇ : Profinite} {X‚ÇÅ : B‚ÇÅ.presentation}
  {X‚ÇÇ : B‚ÇÇ.presentation} {f : B‚ÇÅ ‚ü∂ B‚ÇÇ} (e‚ÇÅ e‚ÇÇ : X‚ÇÅ.hom_over X‚ÇÇ f) :
  ‚àÉ (r : e‚ÇÅ.relator e‚ÇÇ), true :=
‚ü®‚ü®‚ü®ExtrDisc.lift X‚ÇÇ.r X‚ÇÇ.hr $ Profinite.pullback.lift _ _ e‚ÇÅ.g.val e‚ÇÇ.g.val begin
  simp [e‚ÇÅ.w, e‚ÇÇ.w],
end‚ü©,begin
  ext1,
  dsimp,
  simp,
end, begin
  ext1,
  dsimp,
  simp,
end‚ü©,trivial‚ü©

@[irreducible]
def presentation.hom_over.relate {B‚ÇÅ B‚ÇÇ : Profinite} {X‚ÇÅ : B‚ÇÅ.presentation}
  {X‚ÇÇ : B‚ÇÇ.presentation} {f : B‚ÇÅ ‚ü∂ B‚ÇÇ} (e‚ÇÅ e‚ÇÇ : X‚ÇÅ.hom_over X‚ÇÇ f) : e‚ÇÅ.relator e‚ÇÇ :=
(e‚ÇÅ.exists_relator e‚ÇÇ).some

def presentation.terminal : ExtrDisc.empty.val.presentation :=
{ G := ExtrDisc.empty,
  œÄ := ‚ü®Œª x, pempty.elim x, continuous_bot‚ü©,
  hœÄ := by tidy,
  R := ExtrDisc.empty,
  r := ‚ü®Œª x, pempty.elim x, continuous_bot‚ü©,
  hr := by tidy }

def presentation.sum {X Y : Profinite.{u}} (P : X.presentation) (Q : Y.presentation) :
  (X.sum Y).presentation :=
{ G := P.G.sum Q.G,
  œÄ := Profinite.sum.desc _ _ (P.œÄ ‚â´ Profinite.sum.inl _ _) (Q.œÄ ‚â´ Profinite.sum.inr _ _),
  hœÄ := begin
    rintros (a|a),
    { obtain ‚ü®a,rfl‚ü© := P.hœÄ a, use a, refl },
    { obtain ‚ü®a,rfl‚ü© := Q.hœÄ a,
      refine ‚ü®_root_.sum.inr a, rfl‚ü© },
  end,
  R := P.R.sum Q.R,
  r := Profinite.sum.desc _ _
    (pullback.lift _ _
      (P.r ‚â´ pullback.fst _ _ ‚â´ Profinite.sum.inl _ _)
      (P.r ‚â´ pullback.snd _ _ ‚â´ Profinite.sum.inl _ _ ) begin
        simp only [category.assoc, Profinite.pullback.condition_assoc,
          sum.inl_desc, sum.inr_desc],
      end)
    (pullback.lift _ _
      (Q.r ‚â´ pullback.fst _ _ ‚â´ Profinite.sum.inr _ _ )
      (Q.r ‚â´ pullback.snd _ _ ‚â´ Profinite.sum.inr _ _ ) begin
        simp only [category.assoc, Profinite.pullback.condition_assoc,
          sum.inl_desc, sum.inr_desc],
      end),
  hr := begin
    rintros ‚ü®‚ü®(a|a),(b|b)‚ü©,h‚ü©,
    { dsimp [sum.desc] at h,
      let t : Profinite.pullback P.œÄ P.œÄ := ‚ü®‚ü®a,b‚ü©, sum.inl.inj h‚ü©,
      obtain ‚ü®A,hA‚ü© := P.hr t,
      use A,
      dsimp [sum.desc, pullback.lift],
      congr,
      all_goals { rw hA, refl } },
    { exact false.elim (_root_.sum.inl_ne_inr h) },
    { exact false.elim (_root_.sum.inl_ne_inr h.symm) },
    { dsimp [sum.desc] at h,
      let t : Profinite.pullback Q.œÄ Q.œÄ := ‚ü®‚ü®a,b‚ü©, sum.inr.inj h‚ü©,
      obtain ‚ü®A,hA‚ü© := Q.hr t,
      use _root_.sum.inr A,
      dsimp [sum.desc, pullback.lift],
      congr,
      all_goals { rw hA, refl } }
  end }

def presentation.sum_inl {X Y : Profinite.{u}} (P : X.presentation) (Q : Y.presentation) :
  P.hom_over (P.sum Q) (Profinite.sum.inl _ _) :=
{ g := ExtrDisc.sum.inl _ _,
  w := begin
    dsimp [presentation.sum],
    simp,
  end,
  r := ExtrDisc.sum.inl _ _,
  fst := sorry,
  snd := sorry }

def presentation.sum_inr {X Y : Profinite.{u}} (P : X.presentation) (Q : Y.presentation) :
  Q.hom_over (P.sum Q) (Profinite.sum.inr _ _) :=
{ g := ExtrDisc.sum.inr _ _,
  w := begin
    dsimp [presentation.sum],
    simp,
  end,
  r := ExtrDisc.sum.inr _ _,
  fst := sorry,
  snd := sorry }

end Profinite

--- Start here...
section

variables (C : Type v) [category.{w} C] [limits.has_terminal C] [limits.has_binary_products C]

structure ExtrSheaf :=
(val : ExtrDisc.{u}·µí·µñ ‚•§ C)
(terminal : ExtrDisc.terminal_condition val)
(binary_product : ExtrDisc.binary_product_condition val)

namespace ExtrSheaf

variable {C}

@[ext] structure hom (X Y : ExtrSheaf C) := mk :: (val : X.val ‚ü∂ Y.val)

@[simps]
instance : category (ExtrSheaf C) :=
{ hom := hom,
  id := Œª X, ‚ü®ùüô _‚ü©,
  comp := Œª A B C f g, ‚ü®f.val ‚â´ g.val‚ü©,
  id_comp' := Œª X Y Œ∑, by { ext1, simp },
  comp_id' := Œª X Y Œ≥, by { ext1, simp },
  assoc' := Œª X Y Z W a b c, by { ext1, simp } }

end ExtrSheaf

@[simps]
def ExtrSheaf_to_presheaf : ExtrSheaf C ‚•§ ExtrDisc·µí·µñ ‚•§ C :=
{ obj := Œª X, X.val,
  map := Œª X Y f, f.val }

instance : full (ExtrSheaf_to_presheaf C) := ‚ü®Œª _ _ f, ‚ü®f‚ü©, Œª X Y f, by { ext1, refl }‚ü©
instance : faithful (ExtrSheaf_to_presheaf C) := ‚ü®‚ü©

variable [limits.has_equalizers C]

@[simps]
def Condensed_to_ExtrSheaf : Condensed C ‚•§ ExtrSheaf C :=
{ obj := Œª F,
  { val := ExtrDisc_to_Profinite.op ‚ãô F.val,
    terminal := begin
      have hF := F.cond,
      rw (functor.is_proetale_sheaf_tfae F.val).out 0 3 at hF,
      exact hF.1,
    end,
    binary_product := begin
      have hF := F.cond,
      rw (functor.is_proetale_sheaf_tfae F.val).out 0 3 at hF,
      rcases hF with ‚ü®h1,h2,h3‚ü©,
      intros X Y,
      apply h2,
    end },
  map := Œª F G Œ∑, ‚ü® whisker_left _ Œ∑.val ‚ü© }

variable {C}

/-
@[simps]
def ExtrDisc.via_pullback_fst {X Y Z : ExtrDisc} (f : Y ‚ü∂ X)
  (g : Z.val ‚ü∂ Profinite.pullback f.val f.val) :
  Z ‚ü∂ Y := ‚ü®g ‚â´ Profinite.pullback.fst f.val f.val‚ü©

@[simps]
def ExtrDisc.via_pullback_snd {X Y Z : ExtrDisc} (f : Y ‚ü∂ X)
  (g : Z.val ‚ü∂ Profinite.pullback f.val f.val) :
  Z ‚ü∂ Y := ‚ü®g ‚â´ Profinite.pullback.snd f.val f.val‚ü©

@[reassoc]
lemma ExtrDisc.via_pullback_condition {X Y Z : ExtrDisc} (f : Y ‚ü∂ X)
  (g : Z.val ‚ü∂ Profinite.pullback f.val f.val) :
  ExtrDisc.via_pullback_fst f g ‚â´ f = ExtrDisc.via_pullback_snd f g ‚â´ f :=
begin
  dsimp [ExtrDisc.via_pullback_fst, ExtrDisc.via_pullback_snd],
  ext1,
  dsimp,
  simp [Profinite.pullback.condition],
end
-/

open opposite category_theory.limits

def ExtrSheaf.map_to_equalizer (F : ExtrSheaf.{u} C) {B : ExtrDisc}
  (P : B.val.presentation) : F.val.obj (op B) ‚ü∂
  limits.equalizer (F.val.map P.fst.op) (F.val.map P.snd.op) :=
limits.equalizer.lift (F.val.map (quiver.hom.op ‚ü®P.œÄ‚ü©)) $
begin
  simp only [‚Üê F.val.map_comp, ‚Üê op_comp],
  congr' 2,
  ext1,
  simp [Profinite.pullback.condition],
end

-- This should follow from the projectivity of the objects involved.
lemma ExtrSheaf.equalizer_condition (F : ExtrSheaf.{u} C) {B : ExtrDisc}
  (P : B.val.presentation) :
  is_iso (F.map_to_equalizer P) :=
begin
  --TODO: Add general stuff about split (co)equalizers.
  --This is a fun proof!

  -- First, let's split the surjective `œÄ : P.G ‚ü∂ B`.
  let s : B ‚ü∂ P.G := ‚ü®ExtrDisc.lift _ P.hœÄ (ùüô _)‚ü©,
  have hs : s ‚â´ ‚ü®P.œÄ‚ü© = ùüô _ := by { ext1, apply ExtrDisc.lift_lifts },

  -- Now, consider the map from `P.G` to the pullback of `P.œÄ` with itself
  -- given by `ùüô B` on one component and `f ‚â´ s` on the other.
  let e : P.G.val ‚ü∂ Profinite.pullback P.œÄ P.œÄ :=
    Profinite.pullback.lift _ _ (ùüô _) (P.œÄ ‚â´ s.val) _,
  swap,
  { apply_fun (Œª e, e.val) at hs, change s.val ‚â´ P.œÄ = ùüô _ at hs, simp [hs] },

  -- Since `g`, the map from `Z` to this pullback, is surjective (hence epic),
  -- we can use the projectivity of `Y` to lift `e` above to a morphism
  -- `t : Y ‚ü∂ Z`.
  -- The universal property ensures that `t` composed with the first projection
  -- is the identity (i.e. `t` splits the map from `Z` to the pullback via `g`),
  -- and `t` composed with the second projection becomes `f ‚â´ s`.

  -- We have thus obtained the basic setting of a split equalizer,
  -- Once we apply `F` (which is a presheaf), we obtain a split coequalizer.
  -- Now we simply need to use the fact that the cofork point of a split
  -- coequalizer is the coequalizer of the diagram, and the proof below does
  -- essentially this.

  let t : P.G ‚ü∂ P.R := ‚ü®ExtrDisc.lift _ P.hr e‚ü©,
  have ht : t.val ‚â´ P.r = e := by apply ExtrDisc.lift_lifts,

  -- Just some abbreviations for the stuff below.
  let e‚ÇÅ := F.val.map P.fst.op,
  let e‚ÇÇ := F.val.map P.snd.op,

  -- This will become the inverse of the canonical map from the cofork point...
  let i : limits.equalizer e‚ÇÅ e‚ÇÇ ‚ü∂ F.val.obj (op B) :=
    limits.equalizer.Œπ e‚ÇÅ e‚ÇÇ ‚â´ F.val.map s.op,

  -- so we use it!
  use i,
  split,
  { -- The first step of the proof follows simply from the fact that `s` splits `f`.
    dsimp [ExtrSheaf.map_to_equalizer, i],
    simp only [limits.equalizer.lift_Œπ_assoc, ‚Üê F.val.map_comp, ‚Üê op_comp, hs,
      op_id, F.val.map_id] },
  { -- The rest of the proof uses the properties of `t` mentioned above.
    ext,
    dsimp [i, ExtrSheaf.map_to_equalizer],
    simp only [limits.equalizer.lift_Œπ, category.id_comp, category.assoc,
      ‚Üê F.val.map_comp, ‚Üê op_comp],
    let œÄ' : P.G ‚ü∂ B := ‚ü®P.œÄ‚ü©,
    have : œÄ' ‚â´ s = t ‚â´ P.snd,
    { ext1,
      dsimp [œÄ'],
      rw reassoc_of ht,
      dsimp only [e],
      simp },
    dsimp only [e‚ÇÅ, e‚ÇÇ],
    rw [this, op_comp, F.val.map_comp, ‚Üê category.assoc, ‚Üê limits.equalizer.condition,
      category.assoc, ‚Üê F.val.map_comp, ‚Üê op_comp],
    have : t ‚â´ P.fst = ùüô _,
    { ext1,
      dsimp,
      change t.val ‚â´ _ ‚â´ _ = ùüô _,
      rw reassoc_of ht,
      dsimp [e],
      simp, },
    rw [this, op_id, F.val.map_id, category.comp_id], }
end

def ExtrSheaf.extend_to_obj (F : ExtrSheaf.{u} C) {X : Profinite.{u}} (P : X.presentation) : C :=
limits.equalizer (F.val.map P.fst.op) (F.val.map P.snd.op)

def ExtrSheaf.equalizer_condition' (F : ExtrSheaf.{u} C) {X : ExtrDisc.{u}}
  (P : X.val.presentation) :
  F.val.obj (op X) ‚âÖ F.extend_to_obj P :=
begin
  haveI : is_iso (F.map_to_equalizer P) := F.equalizer_condition _,
  exact as_iso (F.map_to_equalizer P),
end

def ExtrSheaf.extend_to_hom (F : ExtrSheaf.{u} C) {X Y : Profinite.{u}}
  {P : X.presentation} {Q : Y.presentation} {f : X ‚ü∂ Y}
  (e : P.hom_over Q f) :
  F.extend_to_obj Q ‚ü∂ F.extend_to_obj P :=
limits.equalizer.lift (limits.equalizer.Œπ _ _ ‚â´ F.val.map e.g.op)
begin
  simp only [category.assoc, ‚Üê F.val.map_comp, ‚Üê op_comp],
  have : F.val.map (P.fst ‚â´ e.g).op = F.val.map Q.fst.op ‚â´ F.val.map e.r.op,
  { simp only [‚Üê F.val.map_comp, ‚Üê op_comp],
    congr' 2,
    ext1,
    simp [e.fst, e.snd] },
  rw this, clear this,
  have : F.val.map (P.snd ‚â´ e.g).op = F.val.map Q.snd.op ‚â´ F.val.map e.r.op,
  { simp only [‚Üê F.val.map_comp, ‚Üê op_comp],
    congr' 2,
    ext1,
    simp [e.fst, e.snd] },
  rw this, clear this,
  rw equalizer.condition_assoc,
end

-- Use relators here
lemma ExtrSheaf.extend_to_hom_unique
  (F : ExtrSheaf.{u} C) {X Y : Profinite.{u}}
  {P : X.presentation} {Q : Y.presentation} (f : X ‚ü∂ Y)
  (e‚ÇÅ e‚ÇÇ : P.hom_over Q f) :
  F.extend_to_hom e‚ÇÅ = F.extend_to_hom e‚ÇÇ :=
begin
  let R := e‚ÇÅ.relate e‚ÇÇ,
  dsimp [ExtrSheaf.extend_to_hom],
  ext,
  simp [‚Üê R.fst, ‚Üê R.snd, equalizer.condition_assoc],
end

@[simp]
lemma ExtrSheaf.extend_to_hom_id
  (F : ExtrSheaf.{u} C) {X : Profinite.{u}} (P : X.presentation) :
  F.extend_to_hom P.id = ùüô _ :=
begin
  ext,
  dsimp [ExtrSheaf.extend_to_hom, Profinite.presentation.id],
  simp,
end

@[simp]
lemma ExtrSheaf.extend_to_hom_comp
  (F : ExtrSheaf.{u} C) {X Y Z : Profinite.{u}}
  {P : X.presentation} {Q : Y.presentation} {R : Z.presentation}
  (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  (a : P.hom_over Q f) (b : Q.hom_over R g) :
  F.extend_to_hom (a.comp b) = F.extend_to_hom b ‚â´ F.extend_to_hom a :=
begin
  ext,
  dsimp [ExtrSheaf.extend_to_hom, Profinite.presentation.hom_over.comp],
  simp,
end

@[simp]
lemma ExtrSheaf.extend_to_hom_map
  (F : ExtrSheaf.{u} C) {X Y : Profinite.{u}} {P : X.presentation} {Q : Y.presentation}
  (f g : X ‚ü∂ Y)
  (e : P.hom_over Q f)
  (h : f = g) :
  F.extend_to_hom (e.map f g h) = F.extend_to_hom e :=
begin
  cases h,
  refl,
end

instance ExtrSheaf.extend_to_hom_is_iso
  (F : ExtrSheaf.{u} C) {X Y : Profinite.{u}}
  {P : X.presentation} {Q : Y.presentation} (f : X ‚ü∂ Y)
  [is_iso f]
  (e : P.hom_over Q f) : is_iso (F.extend_to_hom e) :=
begin
  use F.extend_to_hom (Q.lift P (inv f)),
  split,
  { rw ‚Üê ExtrSheaf.extend_to_hom_comp,
    rw ‚Üê ExtrSheaf.extend_to_hom_id,
    let i : Q.hom_over Q (ùüô _) :=
      ((Q.lift P (inv f)).comp e).map _ _ (by simp),
    rw ‚Üê F.extend_to_hom_map (inv f ‚â´ f) (ùüô _) _ (by simp),
    apply F.extend_to_hom_unique },
  { rw ‚Üê ExtrSheaf.extend_to_hom_comp,
    rw ‚Üê ExtrSheaf.extend_to_hom_id,
    let i : P.hom_over P (ùüô _) :=
      (e.comp (Q.lift P (inv f))).map _ _ (by simp),
    rw ‚Üê F.extend_to_hom_map (f ‚â´ inv f) (ùüô _) _ (by simp),
    apply F.extend_to_hom_unique }
end

def ExtrSheaf.extend_to_iso
  (F : ExtrSheaf.{u} C) {X Y : Profinite.{u}}
  (P : X.presentation) (Q : Y.presentation) (e : X ‚âÖ Y) :
  F.extend_to_obj Q ‚âÖ F.extend_to_obj P :=
{ hom := F.extend_to_hom (P.lift _ e.hom),
  inv := F.extend_to_hom (Q.lift _ e.inv),
  hom_inv_id' := begin
    rw ‚Üê F.extend_to_hom_id,
    rw ‚Üê F.extend_to_hom_comp,
    rw ‚Üê F.extend_to_hom_map,
    rotate 2, { exact ùüô _ }, swap, { simp },
    apply F.extend_to_hom_unique,
  end,
  inv_hom_id' := begin
    rw ‚Üê F.extend_to_hom_id,
    rw ‚Üê F.extend_to_hom_comp,
    rw ‚Üê F.extend_to_hom_map,
    rotate 2, { exact ùüô _ }, swap, { simp },
    apply F.extend_to_hom_unique,
  end }

@[simps]
def ExtrSheaf.extend_to_presheaf (F : ExtrSheaf.{u} C) : Profinite·µí·µñ ‚•§ C :=
{ obj := Œª X, F.extend_to_obj X.unop.pres,
  map := Œª X Y f, F.extend_to_hom (Y.unop.pres.lift X.unop.pres f.unop),
  map_id' := begin
    intros X,
    rw ‚Üê F.extend_to_hom_id,
    apply F.extend_to_hom_unique,
  end,
  map_comp' := begin
    intros X Y Z f g,
    rw ‚Üê F.extend_to_hom_comp,
    apply F.extend_to_hom_unique,
  end }

-- Note for AT:
-- This will be a bit hard... One should use the proetale sheaf condition involving
-- binary products, the empty profinite set, and equalizers.
-- One should presumably also use `ExtrSheaf.equalizer_condition` above.
-- Essentially, this proof is about various limits commuting with other limits.
-- I think it will be easiest to just construct the inverses needed for preserving empty,
-- products and equalizers in terms of `limit.lift` for various kinds of limits.

instance ExtrSheaf.equalizer_Œπ_is_iso
  (F : ExtrSheaf.{u} C) {X : ExtrDisc.{u}} (P : X.val.presentation) :
  is_iso (F.map_to_equalizer P) := ExtrSheaf.equalizer_condition _ _

def ExtrSheaf.equalizer_iso (F : ExtrSheaf.{u} C) {X : ExtrDisc.{u}} (P : X.val.presentation) :
  F.val.obj (op X) ‚âÖ F.extend_to_obj P :=
as_iso (F.map_to_equalizer P)

lemma ExtrSheaf.empty_condition_extend (F : ExtrSheaf.{u} C) :
  F.extend_to_presheaf.empty_condition' :=
begin
  dsimp [functor.empty_condition'],
  have := F.2,
  dsimp [ExtrDisc.terminal_condition] at this,
  resetI,
  let e : F.val.obj (op ExtrDisc.empty) ‚ü∂ F.extend_to_obj Profinite.presentation.terminal :=
    F.map_to_equalizer _,
  let i : Profinite.empty.pres.hom_over Profinite.presentation.terminal (ùüô _) :=
    Profinite.empty.pres.lift _ _,
  let t : F.extend_to_obj Profinite.presentation.terminal ‚ü∂
    F.extend_to_obj Profinite.empty.pres :=
    F.extend_to_hom i,
  have : terminal.from (F.extend_to_obj Profinite.empty.pres) =
    inv t ‚â´ inv e ‚â´ terminal.from (F.val.obj (op ExtrDisc.empty)),
    by apply subsingleton.elim,
  rw this,
  apply_instance,
end

@[simp, reassoc]
def ExtrSheaf.equalizer_iso_hom_Œπ (F : ExtrSheaf.{u} C) {X : ExtrDisc.{u}}
  (P : X.val.presentation) : (F.equalizer_iso P).hom ‚â´ equalizer.Œπ _ _ =
  F.val.map (quiver.hom.op $ ‚ü®P.œÄ‚ü©) :=
begin
  dsimp [ExtrSheaf.equalizer_iso, ExtrSheaf.map_to_equalizer],
  simp,
end

def ExtrSheaf.prod_iso (F : ExtrSheaf.{u} C) (X Y : ExtrDisc.{u}) :
  F.val.obj (op $ X.sum Y) ‚âÖ F.val.obj (op X) ‚®Ø F.val.obj (op Y) :=
begin
  letI := F.3 X Y,
  exact as_iso
    (prod.lift (F.val.map (ExtrDisc.sum.inl X Y).op) (F.val.map (ExtrDisc.sum.inr X Y).op)),
end

@[simp, reassoc]
lemma ExtrSheaf.prod_iso_fst (F : ExtrSheaf.{u} C) (X Y : ExtrDisc.{u}) :
  (F.prod_iso X Y).hom ‚â´ limits.prod.fst = F.val.map (ExtrDisc.sum.inl _ _).op :=
begin
  dsimp [ExtrSheaf.prod_iso],
  simp,
end

@[simp, reassoc]
lemma ExtrSheaf.prod_iso_snd (F : ExtrSheaf.{u} C) (X Y : ExtrDisc.{u}) :
  (F.prod_iso X Y).hom ‚â´ limits.prod.snd = F.val.map (ExtrDisc.sum.inr _ _).op :=
begin
  dsimp [ExtrSheaf.prod_iso],
  simp,
end

def ExtrSheaf.equalizer_of_products (F : ExtrSheaf.{u} C) {X Y : Profinite.{u}}
  (P : X.presentation) (Q : Y.presentation) : C :=
let e‚ÇÅ‚ÇÅ : F.val.obj (op P.G) ‚ü∂ F.val.obj (op P.R) := F.val.map P.fst.op,
    e‚ÇÅ‚ÇÇ : F.val.obj (op P.G) ‚ü∂ F.val.obj (op P.R) := F.val.map P.snd.op,
    e‚ÇÇ‚ÇÅ : F.val.obj (op Q.G) ‚ü∂ F.val.obj (op Q.R) := F.val.map Q.fst.op,
    e‚ÇÇ‚ÇÇ : F.val.obj (op Q.G) ‚ü∂ F.val.obj (op Q.R) := F.val.map Q.snd.op,
    i‚ÇÅ : F.val.obj (op P.G) ‚®Ø F.val.obj (op Q.G) ‚ü∂
      F.val.obj (op P.R) ‚®Ø F.val.obj (op Q.R) :=
      prod.lift (limits.prod.fst ‚â´ e‚ÇÅ‚ÇÅ) (limits.prod.snd ‚â´ e‚ÇÇ‚ÇÅ),
    i‚ÇÇ : F.val.obj (op P.G) ‚®Ø F.val.obj (op Q.G) ‚ü∂
      F.val.obj (op P.R) ‚®Ø F.val.obj (op Q.R) :=
      prod.lift (limits.prod.fst ‚â´ e‚ÇÅ‚ÇÇ) (limits.prod.snd ‚â´ e‚ÇÇ‚ÇÇ) in
equalizer i‚ÇÅ i‚ÇÇ

-- Equalizers commute with products.
def ExtrSheaf.equalizer_of_products_iso (F : ExtrSheaf.{u} C) {X Y : Profinite.{u}}
  (P : X.presentation) (Q : Y.presentation) :
  F.extend_to_obj P ‚®Ø F.extend_to_obj Q ‚âÖ F.equalizer_of_products P Q :=
{ hom := equalizer.lift
    (prod.lift
      (limits.prod.fst ‚â´ equalizer.Œπ _ _)
      (limits.prod.snd ‚â´ equalizer.Œπ _ _)) $ by ext; simp [equalizer.condition],
  inv := prod.lift
    (equalizer.lift (equalizer.Œπ _ _ ‚â´ limits.prod.fst) begin
      simp only [category.assoc],
      have :
        (limits.prod.fst : F.val.obj (op P.G) ‚®Ø F.val.obj (op Q.G) ‚ü∂ F.val.obj (op P.G))
         ‚â´ F.val.map P.fst.op =
        (prod.lift
          (limits.prod.fst ‚â´ F.val.map P.fst.op)
          (limits.prod.snd ‚â´ F.val.map Q.fst.op)) ‚â´ limits.prod.fst,
      { simp },
      slice_lhs 2 4 { rw this },
      clear this,
      have :
        (limits.prod.fst : F.val.obj (op P.G) ‚®Ø F.val.obj (op Q.G) ‚ü∂ F.val.obj (op P.G))
         ‚â´ F.val.map P.snd.op =
        (prod.lift
          (limits.prod.fst ‚â´ F.val.map P.snd.op)
          (limits.prod.snd ‚â´ F.val.map Q.snd.op)) ‚â´ limits.prod.fst,
      { simp },
      slice_rhs 2 4 { rw this },
      rw equalizer.condition_assoc,
    end)
    (equalizer.lift (equalizer.Œπ _ _ ‚â´ limits.prod.snd) begin
      simp only [category.assoc],
      have :
        (limits.prod.snd : F.val.obj (op P.G) ‚®Ø F.val.obj (op Q.G) ‚ü∂ F.val.obj (op Q.G))
         ‚â´ F.val.map Q.fst.op =
        (prod.lift
          (limits.prod.fst ‚â´ F.val.map P.fst.op)
          (limits.prod.snd ‚â´ F.val.map Q.fst.op)) ‚â´ limits.prod.snd,
      { simp },
      slice_lhs 2 4 { rw this },
      clear this,
      have :
        (limits.prod.snd : F.val.obj (op P.G) ‚®Ø F.val.obj (op Q.G) ‚ü∂ F.val.obj (op Q.G))
         ‚â´ F.val.map Q.snd.op =
        (prod.lift
          (limits.prod.fst ‚â´ F.val.map P.snd.op)
          (limits.prod.snd ‚â´ F.val.map Q.snd.op)) ‚â´ limits.prod.snd,
      { simp },
      slice_rhs 2 4 { rw this },
      rw equalizer.condition_assoc,
    end),
  hom_inv_id' := begin
    ext,
    simp only [equalizer.lift_Œπ, category.id_comp, equalizer.lift_Œπ_assoc,
      prod.lift_fst, category.assoc],
    slice_lhs 2 3 { rw limits.prod.lift_snd },
    simp,
  end,
  inv_hom_id' := begin
    ext,
    simp only [equalizer.lift_Œπ, prod.lift_fst_comp_snd_comp, category.id_comp,
      prod.lift_fst, prod.lift_map, category.assoc],
    slice_lhs 2 3 { rw equalizer.lift_Œπ },
    simp,
  end }

def ExtrSheaf.equalizer_of_products_iso_extend_sum (F : ExtrSheaf.{u} C) {X Y : Profinite.{u}}
  (P : X.presentation) (Q : Y.presentation) :
  F.equalizer_of_products P Q ‚âÖ F.extend_to_obj (P.sum Q) :=
{ hom := equalizer.lift (equalizer.Œπ _ _ ‚â´ (F.prod_iso _ _).inv) begin
    simp only [category.assoc],
    have : (F.prod_iso P.G Q.G).inv ‚â´ F.val.map (P.sum Q).fst.op =
      prod.lift (limits.prod.fst ‚â´ F.val.map P.fst.op) (limits.prod.snd ‚â´ F.val.map Q.fst.op)
      ‚â´ (F.prod_iso _ _).inv,
    { rw [iso.eq_comp_inv, category.assoc, iso.inv_comp_eq],
      ext,
      { dsimp [ExtrSheaf.prod_iso],
        simp only [prod.lift_fst_comp_snd_comp, prod.comp_lift, prod.lift_fst, prod.lift_map,
          ‚Üê F.val.map_comp, ‚Üê op_comp],
        refl },
      { dsimp [ExtrSheaf.prod_iso],
        simp only [prod.lift_fst_comp_snd_comp, prod.comp_lift, prod.lift_snd, prod.lift_map,
          ‚Üê F.val.map_comp, ‚Üê op_comp],
        refl } },
    rw this, clear this,
    have : (F.prod_iso P.G Q.G).inv ‚â´ F.val.map (P.sum Q).snd.op =
      prod.lift (limits.prod.fst ‚â´ F.val.map P.snd.op) (limits.prod.snd ‚â´ F.val.map Q.snd.op)
      ‚â´ (F.prod_iso _ _).inv,
    { rw [iso.eq_comp_inv, category.assoc, iso.inv_comp_eq],
      ext,
      { dsimp [ExtrSheaf.prod_iso],
        simp only [prod.lift_fst_comp_snd_comp, prod.comp_lift, prod.lift_fst, prod.lift_map,
          ‚Üê F.val.map_comp, ‚Üê op_comp],
        refl },
      { dsimp [ExtrSheaf.prod_iso],
        simp only [prod.lift_fst_comp_snd_comp, prod.comp_lift, prod.lift_snd, prod.lift_map,
          ‚Üê F.val.map_comp, ‚Üê op_comp],
        refl } },
    rw [this, equalizer.condition_assoc],
  end,
  inv := equalizer.lift (equalizer.Œπ _ _ ‚â´ (F.prod_iso _ _).hom) begin
    ext,
    { simp only [prod.lift_fst_comp_snd_comp, prod.map_fst,
        ExtrSheaf.prod_iso_fst_assoc, category.assoc, limits.prod.map_fst],
      have : F.val.map (ExtrDisc.sum.inl P.G Q.G).op ‚â´ F.val.map P.fst.op =
        F.val.map (P.sum Q).fst.op ‚â´ F.val.map (ExtrDisc.sum.inl _ _).op,
      { simp only [‚Üê F.val.map_comp, ‚Üê op_comp], refl },
      rw this, clear this,
      have : F.val.map (ExtrDisc.sum.inl P.G Q.G).op ‚â´ F.val.map P.snd.op =
        F.val.map (P.sum Q).snd.op ‚â´ F.val.map (ExtrDisc.sum.inl _ _).op,
      { simp only [‚Üê F.val.map_comp, ‚Üê op_comp], refl },
      rw this, clear this,
      apply equalizer.condition_assoc },
    { simp only [prod.map_snd, prod.lift_fst_comp_snd_comp,
        ExtrSheaf.prod_iso_snd_assoc, category.assoc, limits.prod.map_snd],
      have : F.val.map (ExtrDisc.sum.inr P.G Q.G).op ‚â´ F.val.map Q.fst.op =
        F.val.map (P.sum Q).fst.op ‚â´ F.val.map (ExtrDisc.sum.inr _ _).op,
      { simp only [‚Üê F.val.map_comp, ‚Üê op_comp], refl },
      rw this, clear this,
      have : F.val.map (ExtrDisc.sum.inr P.G Q.G).op ‚â´ F.val.map Q.snd.op =
        F.val.map (P.sum Q).snd.op ‚â´ F.val.map (ExtrDisc.sum.inr _ _).op,
      { simp only [‚Üê F.val.map_comp, ‚Üê op_comp], refl },
      rw this, clear this,
      apply equalizer.condition_assoc },
  end,
  hom_inv_id' := begin
    ext,
    iterate 2
    { slice_lhs 2 3 { rw equalizer.lift_Œπ },
      slice_lhs 1 2 { rw equalizer.lift_Œπ },
      simp },
  end,
  inv_hom_id' := begin
    ext,
    simp,
  end }

@[reassoc]
lemma ExtrSheaf.equalizer_Œπ_comp_map_g (F : ExtrSheaf.{u} C) {X Y : Profinite} {P : X.presentation}
  {Q : Y.presentation} {f : X ‚ü∂ Y} (e : P.hom_over Q f) :
  (equalizer.Œπ _ _ : F.extend_to_obj Q ‚ü∂ _) ‚â´ F.val.map e.g.op =
  F.extend_to_hom e ‚â´ equalizer.Œπ _ _ :=
begin
  dsimp [ExtrSheaf.extend_to_hom],
  simp,
end

lemma ExtrSheaf.product_condition_extend (F : ExtrSheaf.{u} C) :
  F.extend_to_presheaf.product_condition' :=
begin
  intros X Y,
  let t := prod.lift (F.extend_to_presheaf.map
    (Profinite.sum.inl X Y).op) (F.extend_to_presheaf.map (Profinite.sum.inr X Y).op),
  change is_iso t,
  dsimp [ExtrSheaf.extend_to_presheaf] at t,
  let e‚ÇÅ : F.extend_to_obj (X.sum Y).pres ‚âÖ
    F.extend_to_obj (X.pres.sum Y.pres) := F.extend_to_iso _ _ (iso.refl _),
  let e‚ÇÇ : F.extend_to_obj (X.pres.sum Y.pres) ‚âÖ F.equalizer_of_products X.pres Y.pres :=
    (F.equalizer_of_products_iso_extend_sum _ _).symm,
  let e‚ÇÉ : F.equalizer_of_products X.pres Y.pres ‚âÖ
    F.extend_to_obj X.pres ‚®Ø F.extend_to_obj Y.pres :=
    (F.equalizer_of_products_iso _ _).symm,
  have : t = e‚ÇÅ.hom ‚â´ e‚ÇÇ.hom ‚â´ e‚ÇÉ.hom,
  { dsimp [e‚ÇÅ,e‚ÇÇ,e‚ÇÉ],
    simp only [‚Üê category.assoc, iso.eq_comp_inv],
    simp only [category.assoc],
    dsimp [ExtrSheaf.extend_to_iso, ExtrSheaf.equalizer_of_products_iso_extend_sum,
      ExtrSheaf.equalizer_of_products_iso, t, ExtrSheaf.extend_to_hom],
    ext,
    simp,
    rw iso.comp_inv_eq,
    dsimp [ExtrSheaf.prod_iso],
    ext,
    { simp,
      rw [‚Üê F.val.map_comp, ‚Üê op_comp],
      let E : X.pres.hom_over (X.sum Y).pres (Profinite.sum.inl _ _ ‚â´ ùüô _) :=
        (X.pres.sum_inl Y.pres).comp ((X.pres.sum Y.pres).lift (X.sum Y).pres (ùüô (X.sum Y))),
      change _ = equalizer.Œπ _ _ ‚â´ F.val.map E.g.op,
      simp_rw [ExtrSheaf.equalizer_Œπ_comp_map_g],
      congr' 1,
      let E' : X.pres.hom_over (X.sum Y).pres (Profinite.sum.inl _ _) :=
        E.map _ _ (by simp),
      have : F.extend_to_hom E = F.extend_to_hom E', by simp [ExtrSheaf.extend_to_hom_map],
      rw this,
      apply F.extend_to_hom_unique },
    { simp,
      rw [‚Üê F.val.map_comp, ‚Üê op_comp],
      let E : Y.pres.hom_over (X.sum Y).pres (Profinite.sum.inr _ _ ‚â´ ùüô _) :=
        (X.pres.sum_inr Y.pres).comp ((X.pres.sum Y.pres).lift (X.sum Y).pres (ùüô (X.sum Y))),
      change _ = equalizer.Œπ _ _ ‚â´ F.val.map E.g.op,
      simp_rw [ExtrSheaf.equalizer_Œπ_comp_map_g],
      congr' 1,
      let E' : Y.pres.hom_over (X.sum Y).pres (Profinite.sum.inr _ _) :=
        E.map _ _ (by simp),
      have : F.extend_to_hom E = F.extend_to_hom E', by simp [ExtrSheaf.extend_to_hom_map],
      rw this,
      apply F.extend_to_hom_unique } },
  rw this,
  apply_instance,
end

section equalizer_condition
/-!
Now we prove the eualizer condition...
-/

parameters (X B : Profinite.{u}) (f : X ‚ü∂ B) (hf : function.surjective f)
include hf

def G‚ÇÅ := B.E

def e‚ÇÅ : G‚ÇÅ.val ‚ü∂ B := B.œÄ
lemma he‚ÇÅ : function.surjective e‚ÇÅ := B.œÄ_surjective

  /- We now have the following diagram
                G‚ÇÅ
                |e‚ÇÅ
                v
  X √ó_B X ‚Üí X ‚Üí B
              f
  -/

def P‚ÇÅ := Profinite.pullback f B.œÄ
def G‚ÇÇ := P‚ÇÅ.E

def G‚ÇÇtoP‚ÇÅ := P‚ÇÅ.œÄ
lemma hG‚ÇÇtoP‚ÇÅ : function.surjective G‚ÇÇtoP‚ÇÅ := P‚ÇÅ.œÄ_surjective

def e‚ÇÇ : G‚ÇÇ.val ‚ü∂ X := G‚ÇÇtoP‚ÇÅ ‚â´ Profinite.pullback.fst _ _

lemma he‚ÇÇ : function.surjective e‚ÇÇ :=
begin
  intros t,
  obtain ‚ü®g,hg‚ü© := he‚ÇÅ (f t),
  obtain ‚ü®i,hi‚ü© := hG‚ÇÇtoP‚ÇÅ ‚ü®‚ü®t,g‚ü©,hg.symm‚ü©,
  use i,
  dsimp [e‚ÇÇ],
  rw hi,
  refl
end

def œÄ : G‚ÇÇ ‚ü∂ G‚ÇÅ := ‚ü®G‚ÇÇtoP‚ÇÅ ‚â´ Profinite.pullback.snd _ _‚ü©
lemma hœÄ : function.surjective œÄ :=
begin
  intros g,
  obtain ‚ü®x,hx‚ü© := hf (e‚ÇÅ g),
  obtain ‚ü®i,hi‚ü© := hG‚ÇÇtoP‚ÇÅ ‚ü®‚ü®x,g‚ü©,hx‚ü©,
  use i,
  dsimp [œÄ],
  rw hi,
  refl
end

lemma hœÄe‚ÇÅe‚ÇÇf : œÄ.val ‚â´ e‚ÇÅ = e‚ÇÇ ‚â´ f :=
begin
  dsimp only [œÄ, e‚ÇÅ],
  rw [category.assoc, ‚Üê Profinite.pullback.condition, ‚Üê category.assoc],
  refl,
end


  /- We now have the following diagram
               œÄ
            G‚ÇÇ ‚Üí G‚ÇÅ
          e‚ÇÇ|    |e‚ÇÅ
            v    v
  X √ó_B X ‚Üí X  ‚Üí B
              f
  -/

def P‚ÇÇ := Profinite.pullback œÄ.val œÄ.val
def G‚ÇÉ := P‚ÇÇ.E
def G‚ÇÉtoP‚ÇÇ : G‚ÇÉ.val ‚ü∂ P‚ÇÇ := P‚ÇÇ.œÄ
lemma hG‚ÇÉtoP‚ÇÇ : function.surjective G‚ÇÉtoP‚ÇÇ := P‚ÇÇ.œÄ_surjective

def G : G‚ÇÅ.val.presentation := ‚ü®G‚ÇÇ,œÄ.val,hœÄ,G‚ÇÉ,G‚ÇÉtoP‚ÇÇ,hG‚ÇÉtoP‚ÇÇ‚ü©

def e‚ÇÉ : G‚ÇÉ.val ‚ü∂ Profinite.pullback f f :=
  Profinite.pullback.lift _ _ (G.fst.val ‚â´ e‚ÇÇ) (G.snd.val ‚â´ e‚ÇÇ)
  begin
  { slice_lhs 2 4 { erw ‚Üê hœÄe‚ÇÅe‚ÇÇf },
    slice_rhs 2 4 { erw ‚Üê hœÄe‚ÇÅe‚ÇÇf },
    dsimp only [G, Profinite.presentation.fst, Profinite.presentation.snd],
    slice_lhs 2 4 { rw Profinite.pullback.condition_assoc },
    simp only [category.assoc] },
  end

lemma he‚ÇÉ : function.surjective e‚ÇÉ :=
begin
  rintros ‚ü®‚ü®x,y‚ü©,h‚ü©,
  obtain ‚ü®a,ha‚ü© := he‚ÇÅ (f x),
  obtain ‚ü®b,hb‚ü© := he‚ÇÅ (f y),
  let t‚ÇÅ : P‚ÇÅ := ‚ü®‚ü®x,a‚ü©,ha.symm‚ü©,
  let t‚ÇÇ : P‚ÇÅ := ‚ü®‚ü®y,a‚ü©,_‚ü©,
  swap, { dsimp at h ‚ä¢, rw [‚Üê h, ‚Üê ha], refl },
  obtain ‚ü®u‚ÇÅ,hu‚ÇÅ‚ü© := hG‚ÇÇtoP‚ÇÅ t‚ÇÅ,
  obtain ‚ü®u‚ÇÇ,hu‚ÇÇ‚ü© := hG‚ÇÇtoP‚ÇÅ t‚ÇÇ,
  let u : P‚ÇÇ := ‚ü®‚ü®u‚ÇÅ,u‚ÇÇ‚ü©,_‚ü©,
  swap, { dsimp [œÄ], rw [hu‚ÇÅ, hu‚ÇÇ], refl },
  obtain ‚ü®v,hv‚ü© := hG‚ÇÉtoP‚ÇÇ u,
  use v,
  let t : P‚ÇÇ ‚ü∂ Profinite.pullback f f := Profinite.pullback.lift _ _
    (Profinite.pullback.fst _ _ ‚â´ e‚ÇÇ)
    (Profinite.pullback.snd _ _ ‚â´ e‚ÇÇ) _,
  swap,
  { simp only [category.assoc, ‚Üê hœÄe‚ÇÅe‚ÇÇf, Profinite.pullback.condition_assoc] },
  have : e‚ÇÉ = G‚ÇÉtoP‚ÇÇ ‚â´ t,
  { apply Profinite.pullback.hom_ext,
    { dsimp [e‚ÇÉ, t], simpa },
    { dsimp [e‚ÇÉ, t], simpa } },
  rw this,
  change t _ = _,
  rw hv,
  dsimp [t, u, Profinite.pullback.lift, Profinite.pullback.fst,
    Profinite.pullback.snd],
  have : e‚ÇÇ = G‚ÇÇtoP‚ÇÅ ‚â´ Profinite.pullback.fst _ _, refl,
  congr,
  { rw this, dsimp, rw hu‚ÇÅ, refl },
  { rw this, dsimp, rw hu‚ÇÇ, refl }
end

  /- We now have the following diagram
               œÄ
  G‚ÇÉ  ‚Üí ‚Üí   G‚ÇÇ ‚Üí G‚ÇÅ    <--- This is really a presentation of `G‚ÇÅ`, bundled as `G`.
  |       e‚ÇÇ|    |e‚ÇÅ
  v         v    v
  X √ó_B X ‚Üí X  ‚Üí B
              f
  -/

-- Some compatibility with the relations...
lemma he‚ÇÉfst : e‚ÇÉ ‚â´ Profinite.pullback.fst _ _ = G.fst.val ‚â´ e‚ÇÇ :=
begin
  dsimp [e‚ÇÇ, e‚ÇÉ, G, Profinite.presentation.fst],
  simp,
end

lemma he‚ÇÉsnd : e‚ÇÉ ‚â´ Profinite.pullback.snd _ _ = G.snd.val ‚â´ e‚ÇÇ :=
begin
  dsimp [e‚ÇÇ, e‚ÇÉ, G, Profinite.presentation.fst],
  simp,
end

-- TODO: We want the maps on the level of relations to be an equalizer as well...
-- Now we promote `e‚ÇÅ`, `e‚ÇÇ` and `e‚ÇÉ` to presentations of the corresponding objects
def E‚ÇÅ : B.presentation := B.pres_with e‚ÇÅ he‚ÇÅ -- <-- change this
def E‚ÇÇ : X.presentation := X.pres_with e‚ÇÇ he‚ÇÇ -- <-- change this
def E‚ÇÉ : (Profinite.pullback f f).presentation := (Profinite.pullback f f).pres_with e‚ÇÉ he‚ÇÉ
--  ^--- change this

-- Now we bundle the morphisms using `hom_over`.
def œÄ' : E‚ÇÇ.hom_over E‚ÇÅ f :=
‚ü®œÄ, hœÄe‚ÇÅe‚ÇÇf, sorry, sorry, sorry‚ü©

def fst' : E‚ÇÉ.hom_over E‚ÇÇ (Profinite.pullback.fst _ _) :=
‚ü®G.fst, he‚ÇÉfst.symm, sorry, sorry, sorry‚ü©

def snd' : E‚ÇÉ.hom_over E‚ÇÇ (Profinite.pullback.snd _ _) :=
‚ü®G.snd, he‚ÇÉsnd.symm, sorry, sorry, sorry‚ü©

/-
In the diagram:

     ----->
G‚ÇÉ   ----->   G‚ÇÇ  ---œÄ-->   G‚ÇÅ

|             |             |
e‚ÇÉ            e‚ÇÇ            e‚ÇÅ
|             |             |
V             V             v

X√óX  ----->   X   ---f-->   B
 B   ----->

The columns have been completed to bundled presentations `E‚ÇÅ, E‚ÇÇ, E‚ÇÉ`
and the top row a bundled presentation `G`.

-/

def ExtrSheaf.eq_iso_hom_aux (F : ExtrSheaf.{u} C) :
  equalizer
    (F.extend_to_presheaf.map (Profinite.pullback.fst f f).op)
    (F.extend_to_presheaf.map (Profinite.pullback.snd f f).op) ‚ü∂
  equalizer
    (F.extend_to_hom fst')
    (F.extend_to_hom snd') :=
equalizer.lift (equalizer.Œπ _ _ ‚â´ (F.extend_to_iso _ _ (iso.refl _)).hom)
begin
  -- this proof is much harder than it neeeds to be...
  let ee : F.extend_to_obj E‚ÇÉ ‚âÖ F.extend_to_obj (Profinite.pullback f f).pres :=
    F.extend_to_iso _ _ (iso.refl _),
  apply_fun (Œª e, e ‚â´ ee.hom),
  swap,
  { intros a b h,
    apply_fun (Œª e, e ‚â´ ee.inv) at h,
    simpa using h },
  dsimp [ee, ExtrSheaf.extend_to_iso],
  simp only [category.assoc, ‚Üê F.extend_to_hom_comp],
  let fst'' : (Profinite.pullback f f).pres.hom_over X.pres
    (Profinite.pullback.fst f f) :=
    (((Profinite.pullback f f).pres.lift E‚ÇÉ
      (ùüô (Profinite.pullback f f))).comp
      (fst'.comp (E‚ÇÇ.lift X.pres (ùüô X)))).map _ _ (by simp),
  let snd'' : (Profinite.pullback f f).pres.hom_over X.pres
    (Profinite.pullback.snd f f) :=
    (((Profinite.pullback f f).pres.lift E‚ÇÉ
      (ùüô (Profinite.pullback f f))).comp
      (snd'.comp (E‚ÇÇ.lift X.pres (ùüô X)))).map _ _ (by simp),
  have : F.extend_to_hom
    (((Profinite.pullback f f).pres.lift E‚ÇÉ (ùüô (Profinite.pullback f f))).comp
    (fst'.comp (E‚ÇÇ.lift X.pres (ùüô X)))) = F.extend_to_hom fst'', by simp, rw this, clear this,
  have : F.extend_to_hom
    (((Profinite.pullback f f).pres.lift E‚ÇÉ (ùüô (Profinite.pullback f f))).comp
    (snd'.comp (E‚ÇÇ.lift X.pres (ùüô X)))) = F.extend_to_hom snd'', by simp, rw this, clear this,
  have : F.extend_to_hom fst'' =
    F.extend_to_hom ((Profinite.pullback f f).pres.lift X.pres (Profinite.pullback.fst f f)),
    by apply F.extend_to_hom_unique, rw this, clear this,
  have : F.extend_to_hom snd'' =
    F.extend_to_hom ((Profinite.pullback f f).pres.lift X.pres (Profinite.pullback.snd f f)),
    by apply F.extend_to_hom_unique, rw this, clear this,
  apply equalizer.condition,
end

def ExtrSheaf.eq_iso_inv_aux (F : ExtrSheaf.{u} C) :
  equalizer
    (F.extend_to_hom fst')
    (F.extend_to_hom snd') ‚ü∂
  equalizer
    (F.extend_to_presheaf.map (Profinite.pullback.fst f f).op)
    (F.extend_to_presheaf.map (Profinite.pullback.snd f f).op) :=
equalizer.lift (equalizer.Œπ _ _ ‚â´ (F.extend_to_iso _ _ (iso.refl _)).inv)
begin
  let ee : F.extend_to_obj (Profinite.pullback f f).pres ‚âÖ F.extend_to_obj E‚ÇÉ :=
    F.extend_to_iso _ _ (iso.refl _),
  apply_fun (Œª e, e ‚â´ ee.hom),
  swap,
  { intros a b h,
    apply_fun (Œª e, e ‚â´ ee.inv) at h,
    simpa using h },
  dsimp [ee, ExtrSheaf.extend_to_iso],
  simp only [category.assoc, ‚Üê F.extend_to_hom_comp],
  let fst'' : E‚ÇÉ.hom_over E‚ÇÇ (Profinite.pullback.fst f f) :=
    ((E‚ÇÉ.lift (Profinite.pullback f f).pres (ùüô (Profinite.pullback f f))).comp
    (((Profinite.pullback f f).pres.lift X.pres
    (Profinite.pullback.fst f f)).comp (X.pres.lift E‚ÇÇ (ùüô X)))).map _ _ (by simp),
  let snd'' : E‚ÇÉ.hom_over E‚ÇÇ (Profinite.pullback.snd f f) :=
    ((E‚ÇÉ.lift (Profinite.pullback f f).pres (ùüô (Profinite.pullback f f))).comp
    (((Profinite.pullback f f).pres.lift X.pres
    (Profinite.pullback.snd f f)).comp (X.pres.lift E‚ÇÇ (ùüô X)))).map _ _ (by simp),
  have : F.extend_to_hom ((E‚ÇÉ.lift (Profinite.pullback f f).pres (ùüô (Profinite.pullback f f))).comp
    (((Profinite.pullback f f).pres.lift X.pres
    (Profinite.pullback.fst f f)).comp (X.pres.lift E‚ÇÇ (ùüô X)))) = F.extend_to_hom fst'',
    by simp, rw this, clear this,
  have : F.extend_to_hom ((E‚ÇÉ.lift (Profinite.pullback f f).pres (ùüô (Profinite.pullback f f))).comp
    (((Profinite.pullback f f).pres.lift X.pres
    (Profinite.pullback.snd f f)).comp (X.pres.lift E‚ÇÇ (ùüô X)))) = F.extend_to_hom snd'',
    by simp, rw this, clear this,
  have : F.extend_to_hom fst'' = F.extend_to_hom fst', by apply F.extend_to_hom_unique,
  rw this, clear this,
  have : F.extend_to_hom snd'' = F.extend_to_hom snd', by apply F.extend_to_hom_unique,
  rw this, clear this,
  apply equalizer.condition,
end

def ExtrSheaf.eq_iso (F : ExtrSheaf.{u} C) :
  equalizer
    (F.extend_to_presheaf.map (Profinite.pullback.fst f f).op)
    (F.extend_to_presheaf.map (Profinite.pullback.snd f f).op) ‚âÖ
  equalizer
    (F.extend_to_hom fst')
    (F.extend_to_hom snd') :=
{ hom := F.eq_iso_hom_aux _ _ _ _,
  inv := F.eq_iso_inv_aux _ _ _ _,
  hom_inv_id' := begin
    dsimp only [ExtrSheaf.eq_iso_hom_aux, ExtrSheaf.eq_iso_inv_aux],
    ext1,
    simp only [equalizer.lift_Œπ, category.id_comp, equalizer.lift_Œπ_assoc, category.assoc],
    erw [iso.hom_inv_id, category.comp_id],
  end,
  inv_hom_id' := begin
    dsimp only [ExtrSheaf.eq_iso_hom_aux, ExtrSheaf.eq_iso_inv_aux],
    ext1,
    simp only [equalizer.lift_Œπ, category.id_comp, equalizer.lift_Œπ_assoc, category.assoc],
    erw [iso.inv_hom_id, category.comp_id],
  end }

def eq_iso'_hom_aux' (F : ExtrSheaf.{u} C) :
  equalizer (F.extend_to_hom fst') (F.extend_to_hom snd') ‚ü∂ F.val.obj (op E‚ÇÅ.G) :=
begin
  refine _ ‚â´ (F.equalizer_iso G).inv,
  refine equalizer.lift _ _,
  refine equalizer.Œπ _ _ ‚â´ equalizer.Œπ _ _,
  simp only [category.assoc],
  have : equalizer.Œπ (F.val.map E‚ÇÇ.fst.op) (F.val.map E‚ÇÇ.snd.op) ‚â´ F.val.map G.fst.op =
    F.extend_to_hom fst' ‚â´ equalizer.Œπ _ _,
  { dsimp [ExtrSheaf.extend_to_hom],
    simpa },
  rw this, clear this,
  have : equalizer.Œπ (F.val.map E‚ÇÇ.fst.op) (F.val.map E‚ÇÇ.snd.op) ‚â´ F.val.map G.snd.op =
    F.extend_to_hom snd' ‚â´ equalizer.Œπ _ _,
  { dsimp [ExtrSheaf.extend_to_hom],
    simpa },
  rw this, clear this,
  rw equalizer.condition_assoc,
end

def ExtrSheaf.eq_iso'_hom_aux (F : ExtrSheaf.{u} C) :
  equalizer (F.extend_to_hom fst') (F.extend_to_hom snd') ‚ü∂
  F.extend_to_obj E‚ÇÅ :=
equalizer.lift (eq_iso'_hom_aux' F) begin
  dsimp only [eq_iso'_hom_aux'],
  simp only [category.assoc],

  /-
  let lfst : E‚ÇÅ.R ‚ü∂ E‚ÇÇ.G := ‚ü®ExtrDisc.lift _ G.hœÄ E‚ÇÅ.fst.val‚ü©,
  let lsnd : E‚ÇÅ.R ‚ü∂ E‚ÇÇ.G := ‚ü®ExtrDisc.lift _ G.hœÄ E‚ÇÅ.snd.val‚ü©,
  have : (F.equalizer_iso G).inv ‚â´ F.val.map E‚ÇÅ.fst.op =
    equalizer.Œπ _ _ ‚â´ F.val.map (quiver.hom.op lfst),
  { sorry },
  rw this, clear this,
  have : (F.equalizer_iso G).inv ‚â´ F.val.map E‚ÇÅ.snd.op =
    equalizer.Œπ _ _ ‚â´ F.val.map (quiver.hom.op lsnd),
  { sorry },
  rw this, clear this,
  simp,
  let t : G.G ‚ü∂ G.R := ‚ü®ExtrDisc.lift _ G.hr $ Profinite.pullback.lift _ _ (ùüô _) (ùüô _) rfl‚ü©,
  have : equalizer.Œπ (F.val.map E‚ÇÇ.fst.op) (F.val.map E‚ÇÇ.snd.op) ‚â´ F.val.map lfst.op =
    F.extend_to_hom fst' ‚â´ equalizer.Œπ _ _ ‚â´ F.val.map t.op ‚â´ F.val.map lfst.op,
  { sorry },
  rw this, clear this,
  have : equalizer.Œπ (F.val.map E‚ÇÇ.fst.op) (F.val.map E‚ÇÇ.snd.op) ‚â´ F.val.map lsnd.op =
    F.extend_to_hom snd' ‚â´ equalizer.Œπ _ _ ‚â´ F.val.map t.op ‚â´ F.val.map lsnd.op,
  { sorry },
  rw this, clear this,
  rw equalizer.condition_assoc,
  congr' 2,
  have : F.val.map t.op ‚â´ F.val.map lfst.op = F.val.map E‚ÇÉ.fst.op ‚â´ F.val.map (quiver.hom.op _),
  -/
  sorry
end

end equalizer_condition

lemma ExtrSheaf.equalizer_condition_extend (F : ExtrSheaf.{u} C) :
  F.extend_to_presheaf.equalizer_condition' :=
begin
  intros X B f hf,
  dsimp only [functor.map_to_equalizer'],
  sorry,
end


theorem ExtrSheaf.extend_is_sheaf (F : ExtrSheaf.{u} C) : presheaf.is_sheaf proetale_topology
  F.extend_to_presheaf :=
begin
  rw F.extend_to_presheaf.is_proetale_sheaf_tfae.out 0 3,
  refine ‚ü®F.empty_condition_extend, F.product_condition_extend,
    F.equalizer_condition_extend‚ü©,
end

def ExtrSheaf.extend (F : ExtrSheaf.{u} C) : Condensed C :=
‚ü®F.extend_to_presheaf, F.extend_is_sheaf‚ü©

/-
def ExtrSheaf.extend_restrict_hom (F : ExtrSheaf.{u} C) :
  F ‚ü∂ (Condensed_to_ExtrSheaf C).obj F.extend := ExtrSheaf.hom.mk $
{ app := Œª X, limits.equalizer.lift
    (F.val.map $ eq_to_hom (X.op_unop).symm ‚â´ quiver.hom.op ‚ü®X.unop.val.pres_œÄ‚ü©) begin
      dsimp [Profinite.rels_fst, Profinite.rels_snd, Profinite.free_presentation],
      simp only [‚Üê F.val.map_comp, category.id_comp, ‚Üê op_comp],
      congr' 2,
      apply ExtrDisc.hom.ext,
      simp [Profinite.pullback.condition],
    end,
  naturality' := begin
    intros A B f,
    ext,
    dsimp [Condensed_to_ExtrSheaf],
    simp only [limits.equalizer.lift_Œπ, category.id_comp, category.assoc],
    dsimp [ExtrSheaf.extend, ExtrSheaf.extend_to_hom],
    simp only [limits.equalizer.lift_Œπ, limits.equalizer.lift_Œπ_assoc],
    simp only [‚Üê F.val.map_comp, ‚Üê op_comp],
    rw [‚Üê f.op_unop, ‚Üê op_comp],
    congr' 2,
    apply ExtrDisc.hom.ext,
    exact (Profinite.map_pres_œÄ f.unop.val).symm,
  end }

-- This should follow from the equalizer condition which is proved for `ExtrSheaf` above.
instance extend_restrict_hom_app_is_iso (F : ExtrSheaf.{u} C) (X : ExtrDisc·µí·µñ) :
  is_iso (F.extend_restrict_hom.val.app X) := sorry

instance extend_restrict_hom (F : ExtrSheaf.{u} C) : is_iso F.extend_restrict_hom :=
begin
  haveI : is_iso F.extend_restrict_hom.val := nat_iso.is_iso_of_is_iso_app _,
  use ‚ü®inv F.extend_restrict_hom.val‚ü©,
  split,
  all_goals { ext1, dsimp, simp }
end

def Condensed.restrict_extend_hom (F : Condensed.{u} C) :
  F ‚ü∂ ((Condensed_to_ExtrSheaf C).obj F).extend := Sheaf.hom.mk $
{ app := Œª X, limits.equalizer.lift (F.val.map X.unop.pres_œÄ.op) begin
    dsimp [Condensed_to_ExtrSheaf],
    simp only [‚Üê F.val.map_comp, ‚Üê op_comp, category.assoc,
      Profinite.pullback.condition],
  end,
  naturality' := begin
    intros S T f,
    ext,
    dsimp [Condensed_to_ExtrSheaf],
    simp only [limits.equalizer.lift_Œπ, category.assoc],
    erw [limits.equalizer.lift_Œπ],
    erw [limits.equalizer.lift_Œπ_assoc],
    dsimp,
    simp only [‚Üê F.val.map_comp, ‚Üê op_comp],
    rw Profinite.map_pres_œÄ,
    refl,
  end }

-- This map is an equalizer inclusion, and so is a mono.
lemma Condensed.mono_map_of_surjective (F : Condensed.{u} C) {X Y : Profinite}
  (f : Y ‚ü∂ X) (hf : function.surjective f) : mono (F.val.map f.op) :=
begin
  have := F.2,
  rw F.val.is_proetale_sheaf_tfae.out 0 3 at this,
  obtain ‚ü®_,_,h‚ü© := this,
  let t :=
    F.val.map_to_equalizer' f (Profinite.pullback.fst f f)
      (Profinite.pullback.snd f f) _,
  have : F.val.map f.op = t ‚â´ limits.equalizer.Œπ _ _,
  { dsimp [t, functor.map_to_equalizer'],
    simp },
  rw this,
  specialize h _ _ f hf,
  change is_iso t at h,
  resetI,
  have := mono_comp t (limits.equalizer.Œπ _ _),
  apply this,
end

lemma Condensed.equalizer_condition (F : Condensed.{u} C) {X Y Z : Profinite}
  (f : Y ‚ü∂ X) (hf : function.surjective f) (g : Z ‚ü∂ Profinite.pullback f f)
  (hg : function.surjective g) :
  is_iso (F.val.map_to_equalizer' f (g ‚â´ Profinite.pullback.fst _ _)
    (g ‚â´ Profinite.pullback.snd _ _) $ by simp [Profinite.pullback.condition] ) :=
begin
  have := F.2,
  rw F.val.is_proetale_sheaf_tfae.out 0 3 at this,
  obtain ‚ü®_,_,h‚ü© := this,
  specialize h Y X f hf,
  -- TODO: generalize these isomorphisms between various equalizers.
  let E‚ÇÅ := limits.equalizer
    (F.val.map (Profinite.pullback.fst f f).op)
    (F.val.map (Profinite.pullback.snd f f).op),
  let E‚ÇÇ := limits.equalizer
    (F.val.map (g ‚â´ Profinite.pullback.fst f f).op)
    (F.val.map (g ‚â´ Profinite.pullback.snd f f).op),
  let e : E‚ÇÅ ‚ü∂ E‚ÇÇ :=
    limits.equalizer.lift (limits.equalizer.Œπ _ _) (by simp [limits.equalizer.condition_assoc]),
  haveI : is_iso e := begin
    let i : E‚ÇÇ ‚ü∂ E‚ÇÅ :=
      limits.equalizer.lift (limits.equalizer.Œπ _ _) _,
    swap,
    { haveI : mono (F.val.map g.op) := F.mono_map_of_surjective _ hg,
      rw ‚Üê cancel_mono (F.val.map g.op),
      dsimp, simp only [category.assoc, ‚Üê F.val.map_comp, ‚Üê op_comp],
      apply limits.equalizer.condition },
    use i,
    split,
    { dsimp [i, e], ext, simp },
    { dsimp [i, e], ext, simp, dsimp, simp, },
  end,
  let t := F.val.map_to_equalizer' f
    (g ‚â´ Profinite.pullback.fst f f)
    (g ‚â´ Profinite.pullback.snd f f) _,
  swap, { simp [Profinite.pullback.condition] },
  change is_iso t,
  suffices : is_iso (t ‚â´ inv e),
  { resetI,
    use inv e ‚â´ inv (t ‚â´ inv e),
    split,
    { simp only [‚Üê category.assoc, is_iso.hom_inv_id] },
    { simp } },
  have : t ‚â´ inv e =
    F.val.map_to_equalizer' f (Profinite.pullback.fst f f) (Profinite.pullback.snd f f) _,
  { rw is_iso.comp_inv_eq,
    ext,
    dsimp [t, e, functor.map_to_equalizer'],
    simp },
  -- Closes the other goal because proof appears in assumption.
  rwa this,
end

instance restrict_extend_hom_app_is_iso (F : Condensed.{u} C) (X : Profinite·µí·µñ) :
  is_iso (F.restrict_extend_hom.val.app X) :=
begin
  dsimp [Condensed.restrict_extend_hom],
  have := F.equalizer_condition,
  apply this,
  apply Profinite.pres_œÄ_surjective,
  apply Profinite.pres_œÄ_surjective,
end

instance restrict_extend_hom_is_iso (F : Condensed.{u} C) :
  is_iso F.restrict_extend_hom :=
begin
  haveI : is_iso F.restrict_extend_hom.val := nat_iso.is_iso_of_is_iso_app _,
  use ‚ü®inv F.restrict_extend_hom.val‚ü©,
  split,
  all_goals { ext1, dsimp, simp }
end

def ExtrSheaf.extend_nat_trans {F G : ExtrSheaf.{u} C} (Œ∑ : F ‚ü∂ G) :
  F.extend_to_presheaf ‚ü∂ G.extend_to_presheaf :=
{ app := Œª X, limits.equalizer.lift
    (limits.equalizer.Œπ _ _ ‚â´ Œ∑.val.app _) begin
      simp only [category.assoc, ‚Üê Œ∑.val.naturality,
        limits.equalizer.condition_assoc],
    end,
  naturality' := begin
    intros S T f,
    dsimp [ExtrSheaf.extend_to_hom],
    ext,
    simp,
  end }

@[simp]
lemma ExtrSheaf.extend_nat_trans_id (F : ExtrSheaf.{u} C) :
  ExtrSheaf.extend_nat_trans (ùüô F) = ùüô _ :=
begin
  ext S,
  dsimp [ExtrSheaf.extend_nat_trans],
  simp,
end

@[simp]
lemma ExtrSheaf.extend_nat_trans_comp {F G H : ExtrSheaf.{u} C} (Œ∑ : F ‚ü∂ G) (Œ≥ : G ‚ü∂ H) :
  ExtrSheaf.extend_nat_trans (Œ∑ ‚â´ Œ≥) =
  ExtrSheaf.extend_nat_trans Œ∑ ‚â´ ExtrSheaf.extend_nat_trans Œ≥ :=
begin
  ext,
  dsimp [ExtrSheaf.extend_nat_trans],
  simp,
end

variable (C)
@[simps]
def ExtrSheaf_to_Condensed : ExtrSheaf.{u} C ‚•§ Condensed.{u} C :=
{ obj := Œª F, F.extend,
  map := Œª F G Œ∑, ‚ü®ExtrSheaf.extend_nat_trans Œ∑‚ü©,
  map_id' := Œª X, by { ext1, apply ExtrSheaf.extend_nat_trans_id },
  map_comp' := Œª X Y Z f g, by { ext1, apply ExtrSheaf.extend_nat_trans_comp } }

def ExtrSheaf_Condensed_equivalence : ExtrSheaf.{u} C ‚âå Condensed.{u} C :=
equivalence.mk (ExtrSheaf_to_Condensed C) (Condensed_to_ExtrSheaf C)
(nat_iso.of_components (Œª X,
  { hom := X.extend_restrict_hom,
    inv := let e := inv X.extend_restrict_hom in e,
    hom_inv_id' := is_iso.hom_inv_id _,
    inv_hom_id' := is_iso.inv_hom_id _ }) begin
      intros X Y f,
      ext,
      dsimp [ExtrSheaf.extend_restrict_hom, ExtrSheaf.extend_nat_trans],
      simp,
    end)
(nat_iso.of_components (Œª X,
  { hom := let e := inv X.restrict_extend_hom in e,
    inv := X.restrict_extend_hom,
    hom_inv_id' := is_iso.inv_hom_id _,
    inv_hom_id' := is_iso.hom_inv_id _ }) begin
      intros X Y f,
      dsimp,
      rw [is_iso.comp_inv_eq, category.assoc, is_iso.eq_inv_comp],
      ext,
      dsimp [Condensed.restrict_extend_hom, ExtrSheaf.extend_nat_trans],
      simp,
    end)
-/

end
