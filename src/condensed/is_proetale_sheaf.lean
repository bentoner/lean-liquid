import condensed.proetale_site
import for_mathlib.presieve
import topology.category.Profinite.projective
import for_mathlib.Profinite.disjoint_union

universes w v u

namespace category_theory.functor

open category_theory opposite

variables {C : Type u} [category.{v} C] (Q : Profinite.{w}·µí·µñ ‚•§ C)
variables (P : Profinite.{w}·µí·µñ ‚•§ Type u)

def finite_product_condition : Prop := ‚àÄ
(Œ± : Fintype.{w}) (X : Œ± ‚Üí Profinite.{w}),
function.bijective (Œª (x : P.obj (op (Profinite.sigma X))) (a : Œ±),
  P.map (Profinite.sigma.Œπ X a).op x)

def map_to_equalizer {W X B : Profinite.{w}} (f : X ‚ü∂ B) (g‚ÇÅ g‚ÇÇ : W ‚ü∂ X)
  (w : g‚ÇÅ ‚â´ f = g‚ÇÇ ‚â´ f) :
  P.obj (op B) ‚Üí { x : P.obj (op X) | P.map g‚ÇÅ.op x = P.map g‚ÇÇ.op x } :=
Œª t, ‚ü®P.map f.op t, by { change (P.map _ ‚â´ P.map _) _ = (P.map _ ‚â´ P.map _) _,
  simp_rw [‚Üê P.map_comp, ‚Üê op_comp, w] }‚ü©

def equalizer_condition : Prop := ‚àÄ
(X B : Profinite.{w}) (œÄ : X ‚ü∂ B) (surj : function.surjective œÄ),
function.bijective (map_to_equalizer P œÄ (Profinite.pullback.fst œÄ œÄ) (Profinite.pullback.snd œÄ œÄ)
    (Profinite.pullback.condition _ _))

-- Should we make this `unique` instead of `subsingleton`?
def subsingleton_empty : Prop := ‚àÄ
(Z : Profinite.{w}) [is_empty Z], subsingleton (P.obj (op Z))

def is_proetale_sheaf_of_types : Prop := ‚àÄ
-- a finite family of morphisms with base B
(Œ± : Type w) [fintype Œ±] (B : Profinite.{w}) (X : Œ± ‚Üí Profinite.{w}) (f : Œ† a, X a ‚ü∂ B)
-- jointly surjective
(surj : ‚àÄ b : B, ‚àÉ a (x : X a), f a x = b)
-- family of terms
(x : Œ† a, P.obj (op (X a)))
-- which is compatible
(compat : ‚àÄ (a b : Œ±) (Z : Profinite.{w}) (g‚ÇÅ : Z ‚ü∂ X a) (g‚ÇÇ : Z ‚ü∂ X b),
  (g‚ÇÅ ‚â´ f a = g‚ÇÇ ‚â´ f b) ‚Üí P.map g‚ÇÅ.op (x a) = P.map g‚ÇÇ.op (x b)),
-- the actual condition
‚àÉ! t : P.obj (op B), ‚àÄ a : Œ±, P.map (f a).op t = x a

def is_proetale_sheaf_of_types_pullback : Prop := ‚àÄ
-- a finite family of morphisms with base B
(Œ± : Type w) [fintype Œ±] (B : Profinite.{w}) (X : Œ± ‚Üí Profinite.{w}) (f : Œ† a, X a ‚ü∂ B)
-- jointly surjective
(surj : ‚àÄ b : B, ‚àÉ a (x : X a), f a x = b)
-- family of terms
(x : Œ† a, P.obj (op (X a)))
-- which is compatible
(compat : ‚àÄ (a b : Œ±),
  P.map (limits.pullback.fst : limits.pullback (f a) (f b) ‚ü∂ _).op (x a) =
  P.map limits.pullback.snd.op (x b)),
-- the actual condition
‚àÉ! t : P.obj (op B), ‚àÄ a : Œ±, P.map (f a).op t = x a

def is_proetale_sheaf_of_types_explicit_pullback : Prop := ‚àÄ
-- a finite family of morphisms with base B
(Œ± : Type w) [fintype Œ±] (B : Profinite.{w}) (X : Œ± ‚Üí Profinite.{w}) (f : Œ† a, X a ‚ü∂ B)
-- jointly surjective
(surj : ‚àÄ b : B, ‚àÉ a (x : X a), f a x = b)
-- family of terms
(x : Œ† a, P.obj (op (X a)))
-- which is compatible
(compat : ‚àÄ (a b : Œ±),
  P.map (Profinite.pullback.fst (f a) (f b)).op (x a) =
  P.map (Profinite.pullback.snd _ _).op (x b)),
-- the actual condition
‚àÉ! t : P.obj (op B), ‚àÄ a : Œ±, P.map (f a).op t = x a

def is_proetale_sheaf_of_types_projective : Prop := ‚àÄ
-- a finite family of projective objects
(Œ± : Fintype.{w}) (X : Œ± ‚Üí Profinite.{w}) [‚àÄ a, projective (X a)],
function.bijective (Œª (x : P.obj (op $ Profinite.sigma X)) (a : Œ±),
  P.map (Profinite.sigma.Œπ _ a).op x)

theorem subsingleton_empty_of_is_proetale_sheaf_of_types
  (h : P.is_proetale_sheaf_of_types) : P.subsingleton_empty :=
begin
  intros Z hZ,
  specialize h pempty Z pempty.elim (Œª a, a.elim) hZ.elim (Œª a, a.elim) (Œª a, a.elim),
  obtain ‚ü®t,ht1,ht2‚ü© := h,
  constructor,
  intros x y,
  have : x = t, { apply ht2, exact Œª a, a.elim },
  have : y = t, { apply ht2, exact Œª a, a.elim },
  cc,
end

theorem finite_product_condition_of_is_proetale_sheaf_of_types
  (h : P.is_proetale_sheaf_of_types) : P.finite_product_condition :=
begin
  intros Œ± X,
  split,
  { intros x y hh,
    dsimp at hh,
    specialize h Œ± (Profinite.sigma X) X (Profinite.sigma.Œπ X)
      (Profinite.sigma.Œπ_jointly_surjective X)
      (Œª a, P.map (Profinite.sigma.Œπ X a).op x) _,
    { intros a b Z g‚ÇÅ g‚ÇÇ hhh,
      dsimp,
      change (P.map _ ‚â´ P.map _) _ = (P.map _ ‚â´ P.map _) _,
      simp_rw [‚Üê P.map_comp, ‚Üê op_comp, hhh] },
    obtain ‚ü®t,ht1,ht2‚ü© := h,
    have hx : x = t,
    { apply ht2,
      intros a,
      refl },
    have hy : y = t,
    { apply ht2,
      intros a,
      apply_fun (Œª e, e a) at hh,
      exact hh.symm },
    rw [hx, ‚Üê hy] },
  { intros bb,
    dsimp,
    specialize h Œ± (Profinite.sigma X) X (Profinite.sigma.Œπ X)
      (Profinite.sigma.Œπ_jointly_surjective X) bb _,
    { intros a b Z g‚ÇÅ g‚ÇÇ hhh,
      by_cases hZ : is_empty Z,
      { haveI := hZ,
        haveI := subsingleton_empty_of_is_proetale_sheaf_of_types P h Z,
        apply subsingleton.elim },
      simp at hZ,
      obtain ‚ü®z‚ü© := hZ,
      have : a = b,
      { apply_fun (Œª e, (e z).1) at hhh,
        exact hhh },
      subst this,
      have : g‚ÇÅ = g‚ÇÇ,
      { ext1 t,
        apply_fun (Profinite.sigma.Œπ X a),
        swap, { exact Profinite.sigma.Œπ_injective X a },
        apply_fun (Œª e, e t) at hhh,
        exact hhh },
      rw this },
    obtain ‚ü®t,ht1,ht2‚ü© := h,
    use t,
    ext,
    apply ht1 }
end

theorem is_proetale_sheaf_of_types_iff :
  P.is_proetale_sheaf_of_types ‚Üî presieve.is_sheaf proetale_topology P :=
begin
  erw presieve.is_sheaf_pretopology,
  split,
  { intros h B S hS,
    obtain ‚ü®Œ±, _, X, f, surj, rfl‚ü© := hS,
    resetI,
    intros x hx,
    dsimp [presieve.family_of_elements] at x,
    let y : Œ† (a : Œ±), P.obj (op (X a)) := Œª a, x (f a) _,
    swap,
    { rw presieve.mem_of_arrows_iff, use [a, rfl], simp },
    specialize h Œ± B X f surj y _,
    { intros a b Z g‚ÇÅ g‚ÇÇ hh,
      dsimp [presieve.family_of_elements.compatible] at hx,
      apply hx,
      assumption },
    convert h,
    ext t,
    split,
    { intro hh,
      intros a,
      apply hh },
    { intros hh Y g hg,
      rw presieve.mem_of_arrows_iff at hg,
      obtain ‚ü®u,rfl,rfl‚ü© := hg,
      simp [hh] } },
  { introsI h Œ± _ B X f surj x compat,
    let R : presieve B := presieve.of_arrows X f,
    have hR : R ‚àà proetale_pretopology B := ‚ü®Œ±, infer_instance, X, f, surj, rfl‚ü©,
    have hhh : ‚àÄ ‚¶ÉY‚¶Ñ (g : Y ‚ü∂ B) (hg : R g), ‚àÉ (a : Œ±) (ha : Y = X a), g = eq_to_hom ha ‚â´ f a,
    { intros Y g hg,
      rcases hg with ‚ü®a‚ü©,
      use [a, rfl],
      simp },
    let aa : Œ† ‚¶ÉY‚¶Ñ (g : Y ‚ü∂ B) (hg : R g), Œ± := Œª Y g hg, (hhh g hg).some,
    have haa : ‚àÄ ‚¶ÉY‚¶Ñ (g : Y ‚ü∂ B) (hg : R g), Y = X (aa g hg) :=
      Œª Y g hg, (hhh g hg).some_spec.some,
    have haa' : ‚àÄ ‚¶ÉY‚¶Ñ (g : Y ‚ü∂ B) (hg : R g), g = eq_to_hom (haa g hg) ‚â´ f (aa g hg) :=
      Œª Y g hg, (hhh g hg).some_spec.some_spec,
    let y : R.family_of_elements P := Œª Y g hg, P.map (eq_to_hom (haa g hg)).op (x (aa g hg)),
    specialize h R hR y _,
    { rintros Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ ‚ü®a‚ü© ‚ü®b‚ü© hh,
      change (P.map _ ‚â´ P.map _) _ = (P.map _ ‚â´ P.map _) _,
      simp_rw [‚Üê P.map_comp, ‚Üê op_comp],
      apply compat,
      simp_rw category.assoc,
      convert hh,
      all_goals {
        symmetry,
        apply haa' } },
    convert h,
    ext t,
    split,
    { intros hh Y g hg,
      conv_lhs { rw haa' g hg },
      dsimp [y],
      simp [hh] },
    { intros hh a,
      have : R (f a),
      { dsimp [R],
        rw presieve.mem_of_arrows_iff,
        use [a, rfl],
        simp },
      rw hh (f a) this,
      dsimp [y],
      specialize compat (aa (f a) this) a (X a) (eq_to_hom _) (ùüô _) _,
      { apply haa },
      rw category.id_comp,
      apply (haa' _ _).symm,
      simpa using compat } }
end

theorem is_proetale_sheaf_of_types_pullback_iff :
  P.is_proetale_sheaf_of_types ‚Üî P.is_proetale_sheaf_of_types_pullback :=
begin
  split,
  { introsI h Œ± _ B X f surj x compat,
    apply h Œ± B X f surj x,
    intros a b Z g‚ÇÅ g‚ÇÇ h,
    let g : Z ‚ü∂ limits.pullback (f a) (f b) := limits.pullback.lift _ _ h,
    rw (show g‚ÇÅ = g ‚â´ limits.pullback.fst, by simp [g]),
    rw (show g‚ÇÇ = g ‚â´ limits.pullback.snd, by simp [g]),
    simp only [op_comp, P.map_comp],
    dsimp,
    rw compat },
  { introsI h Œ± _ B X f surj x compat,
    apply h Œ± B X f surj x,
    intros a b,
    apply compat,
    exact limits.pullback.condition }
end

theorem is_proetale_sheaf_of_types_explicit_pullback_iff :
  P.is_proetale_sheaf_of_types ‚Üî P.is_proetale_sheaf_of_types_explicit_pullback :=
begin
  split,
  { introsI h Œ± _ B X f surj x compat,
    apply h Œ± B X f surj x,
    intros a b Z g‚ÇÅ g‚ÇÇ h,
    let g : Z ‚ü∂ Profinite.pullback (f a) (f b) := Profinite.pullback.lift (f a) (f b) g‚ÇÅ g‚ÇÇ h,
    rw (show g‚ÇÅ = g ‚â´ Profinite.pullback.fst (f a) (f b), by simp [g]),
    rw (show g‚ÇÇ = g ‚â´ Profinite.pullback.snd (f a) (f b), by simp [g]),
    simp only [op_comp, P.map_comp],
    dsimp,
    rw compat },
  { introsI h Œ± _ B X f surj x compat,
    apply h Œ± B X f surj x,
    intros a b,
    apply compat,
    exact Profinite.pullback.condition _ _ }
end

theorem equalizer_condition_of_is_proetale_sheaf_of_types
  (h : P.is_proetale_sheaf_of_types) : P.equalizer_condition :=
begin
  intros X B œÄ surj,
  rw is_proetale_sheaf_of_types_explicit_pullback_iff at h,
  specialize h punit B (Œª _, X) (Œª _, œÄ) _,
  { intros b,
    use punit.star,
    apply surj },
  dsimp at h,
  split,
  { intros x y hh,
    dsimp [map_to_equalizer] at hh,
    apply_fun (Œª e, e.val) at hh,
    specialize h (Œª _, P.map œÄ.op x) _,
    { intros,
      dsimp,
      change (P.map _ ‚â´ P.map _) _ = (P.map _ ‚â´ P.map _) _,
      simp_rw [‚Üê P.map_comp, ‚Üê op_comp, Profinite.pullback.condition] },
    obtain ‚ü®t,ht1,ht2‚ü© := h,
    have hx : x = t,
    { apply ht2,
      intros,
      refl },
    have hy : y = t,
    { apply ht2,
      intros a,
      exact hh.symm },
    rw [hx, ‚Üê hy] },
  { rintros ‚ü®x,hx‚ü©,
    specialize h (Œª _, x) _,
    { intros,
      exact hx },
    obtain ‚ü®t,ht1,ht2‚ü© := h,
    use [t],
    ext1,
    exact ht1 punit.star }
end

noncomputable theory

def sigma_pi_equiv {Œ± : Fintype.{w}} (X : Œ± ‚Üí Profinite.{w}) (h : P.finite_product_condition) :
  P.obj (op $ Profinite.sigma X) ‚âÉ Œ† a, P.obj (op $ X a) :=
equiv.of_bijective _ (h Œ± X)

def equalizer_equiv {S‚ÇÅ S‚ÇÇ : Profinite}
  (h : P.equalizer_condition) (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) (surj : function.surjective f) :
  P.obj (op S‚ÇÇ) ‚âÉ { x : P.obj (op S‚ÇÅ) |
    P.map (Profinite.pullback.fst f f).op x = P.map (Profinite.pullback.snd f f).op x } :=
equiv.of_bijective _ (h _ _ _ surj)

lemma equalizes_of_compat {Œ± : Fintype.{w}} {B} {X : Œ± ‚Üí Profinite.{w}}
  (h : P.finite_product_condition) (f : Œ† a, X a ‚ü∂ B) (x : Œ† a, P.obj (op $ X a))
  (compat : ‚àÄ a b, P.map (Profinite.pullback.fst (f a) (f b)).op (x a) =
    P.map (Profinite.pullback.snd (f a) (f b)).op (x b)) :
  P.map (Profinite.pullback.fst (Profinite.sigma.desc X f) (Profinite.sigma.desc X f)).op
    ((sigma_pi_equiv P X h).symm x) =
  P.map (Profinite.pullback.snd (Profinite.sigma.desc X f) (Profinite.sigma.desc X f)).op
    ((sigma_pi_equiv P X h).symm x) :=
begin
  let I := Profinite.sigma_pullback_to_pullback_sigma X f,
  apply_fun P.map I.op,
  swap, {
    intros i j hh,
    apply_fun P.map (category_theory.inv I).op at hh,
    change (P.map _ ‚â´ P.map _) _ = (P.map _ ‚â´ P.map _) _ at hh,
    simp_rw [‚Üê P.map_comp, ‚Üê op_comp] at hh,
    simpa using hh },
  change (P.map _ ‚â´ P.map _) _ = (P.map _ ‚â´ P.map _) _,
  simp_rw [‚Üê P.map_comp, ‚Üê op_comp],
  erw Profinite.sigma_pullback_to_pullback_sigma_fst,
  erw Profinite.sigma_pullback_to_pullback_sigma_snd,
  let E := sigma_pi_equiv P X h,
  specialize h ‚ü®Œ± √ó Œ±‚ü© (Œª a, Profinite.pullback (f a.1) (f a.2)),
  let E' := equiv.of_bijective _ h,
  apply_fun E',
  ext1 ‚ü®a,b‚ü©,
  dsimp [E'],
  change (P.map _ ‚â´ P.map _) _ = (P.map _ ‚â´ P.map _) _,
  simp_rw [‚Üê P.map_comp, ‚Üê op_comp, Profinite.sigma.Œπ_desc],
  dsimp,
  simp_rw [P.map_comp],
  convert compat a b,
  all_goals { dsimp [coe_comp],
    congr' 1,
    change ((E ‚àò E.symm) x) _ = _,
    simp },
end

theorem is_proetale_sheaf_of_finite_product_condition_of_equalizer_condition
  (h1 : P.finite_product_condition) (h2 : P.equalizer_condition) :
  P.is_proetale_sheaf_of_types :=
begin
  rw is_proetale_sheaf_of_types_explicit_pullback_iff,
  introsI Œ± _ B X f surj x compat,
  let A : Fintype := Fintype.of Œ±,
  change Œ† (x : A), _ at x,
  change Œ† (x : A), _ at f,
  change ‚àÄ (a b : A), _ at compat,
  change A ‚Üí _ at X,
  let E := sigma_pi_equiv P X h1,
  let F := equalizer_equiv P h2 (Profinite.sigma.desc X f)
    (Profinite.sigma.desc_surjective _ _ surj),
  let œÄ1 := Profinite.pullback.fst (Profinite.sigma.desc X f) (Profinite.sigma.desc X f),
  let œÄ2 := Profinite.pullback.snd (Profinite.sigma.desc X f) (Profinite.sigma.desc X f),
  let S := P.obj (op $ Profinite.sigma X),
  let x' : { t : S | P.map œÄ1.op t = P.map œÄ2.op t } := ‚ü®E.symm x, _‚ü©,
  swap, { exact equalizes_of_compat P h1 f x compat },
  use F.symm x',
  split,
  { dsimp,
    intros a,
    have : P.map (f a).op = ((Œª u : Œ† a, P.obj (op $ X a), u a) ‚àò
      (Œª u : { t : S | P.map œÄ1.op t = P.map œÄ2.op t }, E u.val) ‚àò F),
    { ext t, dsimp [E, F, sigma_pi_equiv, equalizer_equiv, map_to_equalizer],
      change _ = (P.map _ ‚â´ P.map _) _,
      simp_rw [‚Üê P.map_comp, ‚Üê op_comp, Profinite.sigma.Œπ_desc] },
    rw this,
    change ((Œª u : Œ† a, P.obj (op $ X a), u a) ‚àò
      (Œª u : { t : S | P.map œÄ1.op t = P.map œÄ2.op t }, E u.val) ‚àò F ‚àò F.symm) x' = _,
    simp },
  { intros y hy,
    apply_fun F,
    change _ = (F ‚àò F.symm) x',
    simp only [equiv.self_comp_symm, id.def],
    ext1,
    apply_fun E,
    change _ = (E ‚àò E.symm) _,
    simp only [equiv.self_comp_symm, id.def],
    dsimp [E,F, sigma_pi_equiv, equalizer_equiv, map_to_equalizer],
    ext a,
    change (P.map _ ‚â´ P.map _) _ = _,
    simp_rw [‚Üê P.map_comp, ‚Üê op_comp, Profinite.sigma.Œπ_desc, hy a] }
end


def is_proetale_sheaf : Prop := ‚àÄ
-- a finite family of morphisms with base B
(Œ± : Type w) [fintype Œ±] (B : Profinite.{w}) (X : Œ± ‚Üí Profinite.{w}) (f : Œ† a, X a ‚ü∂ B)
-- jointly surjective
(surj : ‚àÄ b : B, ‚àÉ a (x : X a), f a x = b)
-- test object
(T : C)
-- family of moprhisms
(x : Œ† a, T ‚ü∂ Q.obj (op (X a)))
-- which is compatible
(compat : ‚àÄ (a b : Œ±) (Z : Profinite.{w}) (g‚ÇÅ : Z ‚ü∂ X a) (g‚ÇÇ : Z ‚ü∂ X b),
  (g‚ÇÅ ‚â´ f a = g‚ÇÇ ‚â´ f b) ‚Üí x a ‚â´ Q.map g‚ÇÅ.op = x b ‚â´ Q.map g‚ÇÇ.op),
-- the actual condition
‚àÉ! t : T ‚ü∂ Q.obj (op B), ‚àÄ a : Œ±, t ‚â´ Q.map (f a).op = x a

def is_proetale_sheaf_pullback : Prop := ‚àÄ
-- a finite family of morphisms with base B
(Œ± : Type w) [fintype Œ±] (B : Profinite.{w}) (X : Œ± ‚Üí Profinite.{w}) (f : Œ† a, X a ‚ü∂ B)
-- jointly surjective
(surj : ‚àÄ b : B, ‚àÉ a (x : X a), f a x = b)
-- test object
(T : C)
-- family of moprhisms
(x : Œ† a, T ‚ü∂ Q.obj (op (X a)))
-- which is compatible
(compat : ‚àÄ (a b : Œ±), x a ‚â´ Q.map (limits.pullback.fst : limits.pullback (f a) (f b) ‚ü∂ _).op =
  x b ‚â´ Q.map limits.pullback.snd.op),
-- the actual condition
‚àÉ! t : T ‚ü∂ Q.obj (op B), ‚àÄ a : Œ±, t ‚â´ Q.map (f a).op = x a

theorem is_prroetale_sheaf_pullback_iff : Q.is_proetale_sheaf ‚Üî Q.is_proetale_sheaf_pullback :=
begin
  split,
  { introsI h Œ± _ B X f surj T x compat,
    apply h Œ± B X f surj T x,
    intros a b Z g‚ÇÅ g‚ÇÇ h,
    specialize compat a b,
    let g : Z ‚ü∂ limits.pullback (f a) (f b) := limits.pullback.lift g‚ÇÅ g‚ÇÇ h,
    rw (show g‚ÇÅ = g ‚â´ limits.pullback.fst, by simp [g]),
    rw (show g‚ÇÇ = g ‚â´ limits.pullback.snd, by simp [g]),
    simp only [op_comp, Q.map_comp, reassoc_of compat] },
  { introsI h Œ± _ B X f surj T x compat,
    apply h Œ± B X f surj T x,
    intros a b,
    apply compat,
    exact limits.pullback.condition }
end

theorem is_proetale_sheaf_iff : Q.is_proetale_sheaf ‚Üî presheaf.is_sheaf proetale_topology Q :=
begin
  split,
  { intros h T,
    rw ‚Üê (Q ‚ãô coyoneda.obj (op T)).is_proetale_sheaf_of_types_iff,
    introsI Œ± _ B X f surj x compat,
    exact h Œ± B X f surj T x compat },
  { introsI h Œ± _ B X f surj T x compat,
    specialize h T,
    rw ‚Üê (Q ‚ãô coyoneda.obj (op T)).is_proetale_sheaf_of_types_iff at h,
    exact h Œ± B X f surj x compat }
end

end category_theory.functor
