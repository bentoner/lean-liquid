import for_mathlib.Cech.split
import for_mathlib.Profinite.functorial_limit
import for_mathlib.simplicial.complex
import for_mathlib.SemiNormedGroup
import for_mathlib.homological_complex

import locally_constant.Vhat
import prop819.completion

open_locale nnreal

noncomputable theory

open category_theory opposite
open SemiNormedGroup

universes u

-- We have a surjective morphism of profinite sets.
variables (F : arrow Profinite.{u}) (surj : function.surjective F.hom)
variables (M : SemiNormedGroup.{u})

abbreviation FL : cochain_complex SemiNormedGroup ‚Ñï :=
  (((cosimplicial_object.augmented.whiskering _ _).obj (LocallyConstant.{u u}.obj M)).obj
  F.augmented_cech_nerve.right_op).to_cocomplex

abbreviation FLC : cochain_complex SemiNormedGroup ‚Ñï :=
  (((cosimplicial_object.augmented.whiskering _ _).obj (LCC.{u u}.obj M)).obj
  F.augmented_cech_nerve.right_op).to_cocomplex

--def Rop : (simplicial_object.augmented Profinite)·µí·µñ ‚•§ cosimplicial_object.augmented Profinite·µí·µñ :=
--{ obj := Œª X, X.unop.right_op,
--  map := Œª X Y f,
--  { left := quiver.hom.op (comma_morphism.right f.unop),
--    right := nat_trans.right_op (comma_morphism.left f.unop),
--    w' := by { ext, exact congr_arg (Œª Œ∑, (nat_trans.app Œ∑ (op x)).op) f.unop.w.symm, } } }

def FLC_functor : (arrow Profinite.{u})·µí·µñ ‚•§ cochain_complex SemiNormedGroup ‚Ñï :=
simplicial_object.augmented_cech_nerve.op ‚ãô
  simplicial_to_cosimplicial_augmented _ ‚ãô
  (cosimplicial_object.augmented.whiskering _ _).obj (LCC.{u u}.obj M) ‚ãô
  cosimplicial_object.augmented.cocomplex

--‚ä¢ cosimplicial_object.Œ¥
--      (functor.right_op F.cech_nerve ‚ãô (curry.obj (uncurry.obj LocallyConstant ‚ãô Completion)).obj M)
--      k =
--    Completion.map (cosimplicial_object.Œ¥ (functor.right_op F.cech_nerve ‚ãô LocallyConstant.obj M) k)

lemma FLC_iso_helper {x y : simplex_category} (f : x ‚ü∂ y) :
  (F.cech_nerve.right_op ‚ãô LCC.obj M).map f =
  Completion.map ((F.cech_nerve.right_op ‚ãô LocallyConstant.obj M).map f) :=
begin
  change Completion.map _ = _,
  congr' 1,
  dsimp [uncurry],
  erw locally_constant.map_hom_id,
  change ùüô _ ‚â´ _ = _,
  rw category.id_comp,
end

def FLC_iso : strict_iso ((Completion.map_homological_complex _).obj (FL F M)) (FLC F M) :=
{ iso := homological_complex.iso_of_components (Œª i,
    match i with
    | 0 := eq_to_iso rfl
    | n+1 := eq_to_iso rfl
    end) begin
      rintro (_|i) (_|j) h; rcases h with _|‚ü®i,w‚ü©; ext; dsimp [FLC_iso._match_1];
        split_ifs with hh hh,
      { simp only [category.id_comp, category.comp_id, Completion_map_apply],
        dsimp only [cosimplicial_object.augmented.to_cocomplex_d,
          cosimplicial_object.augmented.drop, comma.snd, cosimplicial_object.whiskering,
          whiskering_right, cosimplicial_object.coboundary, functor.const_comp, LCC],
        simpa },
      { exfalso,
        apply hh,
        refl },
      { simp only [category.id_comp, category.comp_id, Completion_map_apply],
        dsimp only [cosimplicial_object.augmented.to_cocomplex_d,
          cosimplicial_object.augmented.drop, comma.snd, cosimplicial_object.whiskering,
          whiskering_right, cosimplicial_object.coboundary, LCC],
        rw [‚Üê Completion_map_apply, Completion.map_sum],
        congr,
        funext k,
        rw [Completion.map_gsmul],
        congr' 1,
        apply FLC_iso_helper },
      { exfalso,
        apply hh,
        refl }
    end,
  is_strict := Œª i, { strict_hom' := Œª a, by { cases i; refl } } }

include surj

theorem prop819 {m : ‚Ñï} (Œµ : ‚Ñù‚â•0) (hŒµ : 0 < Œµ)
  (f : (FLC F M).X (m+1)) (hf : (FLC F M).d (m+1) (m+2) f = 0) :
  ‚àÉ g : (FLC F M).X m, (FLC F M).d m (m+1) g = f ‚àß nnnorm g ‚â§ (1 + Œµ) * (nnnorm f) :=
begin
  apply exact_of_strict_iso _ _ (FLC_iso F M) Œµ hŒµ _ _ _ hf,
  apply cmpl_exact_of_exact _ _ hŒµ,
  clear hf f m hŒµ Œµ,
  intros n f hf,
  -- We've reduced to the non-completed case.
  sorry,
end
